// This code conforms with the UFC specification version 2018.1.0
// and was automatically generated by FFC version 2019.1.0.post0.
//
// This code was generated with the option '-l dolfin' and
// contains DOLFIN-specific wrappers that depend on DOLFIN.
//
// This code was generated with the following parameters:
//

//  add_tabulate_tensor_timing:     False
//  convert_exceptions_to_warnings: False
//  cpp_optimize:                   True
//  cpp_optimize_flags:             '-O2'
//  epsilon:                        1e-14
//  error_control:                  False
//  external_include_dirs:          ''
//  external_includes:              ''
//  external_libraries:             ''
//  external_library_dirs:          ''
//  form_postfix:                   True
//  format:                         'dolfin'
//  generate_dummy_tabulate_tensor: False
//  max_signature_length:           0
//  optimize:                       True
//  precision:                      None
//  quadrature_degree:              None
//  quadrature_rule:                None
//  representation:                 'auto'
//  split:                          False

#ifndef __VP3_3_H
#define __VP3_3_H
#include <algorithm>
#include <iostream>
#include <stdexcept>
#include <ufc.h>

class vp3_3_finite_element_0: public ufc::finite_element
{
public:

  vp3_3_finite_element_0() : ufc::finite_element()
  {
    // Do nothing
  }

  ~vp3_3_finite_element_0() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FiniteElement('Lagrange', tetrahedron, 3)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::tetrahedron;
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t geometric_dimension() const final override
  {
    return 3;
  }

  std::size_t space_dimension() const final override
  {
    return 20;
  }

  std::size_t value_rank() const final override
  {
    return 0;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t value_size() const final override
  {
    return 1;
  }

  std::size_t reference_value_rank() const final override
  {
    return 0;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t reference_value_size() const final override
  {
    return 1;
  }

  std::size_t degree() const final override
  {
    return 3;
  }

  const char * family() const final override
  {
    return "Lagrange";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    static const double coefficients0[1][20] = { { 0.028867513459481377, 0.01304101327393252, 0.007529232524210424, 0.005323971374999493, 0.01829812636778498, 0.014173667737846016, 0.011572751247156891, 0.008183170883849705, 0.006681531047810616, 0.004724555912615332, -0.028347335475692043, -0.023957871187497756, -0.020748125068968316, -0.01855768722395226, -0.016071428571428573, -0.013122266479195604, -0.010714285714285692, -0.009278843611976116, -0.007576144084141579, -0.00535714285714285 } };
    static const double coefficients1[1][20] = { { 0.028867513459481454, -0.01304101327393248, 0.007529232524210435, 0.005323971374999493, 0.018298126367784984, -0.014173667737846004, -0.011572751247156891, 0.008183170883849717, 0.0066815310478106045, 0.004724555912615337, 0.028347335475692036, -0.02395787118749775, -0.020748125068968302, 0.01855768722395226, 0.01607142857142858, 0.013122266479195593, -0.010714285714285723, -0.00927884361197613, -0.00757614408414158, -0.005357142857142854 } };
    static const double coefficients2[1][20] = { { 0.028867513459481187, 0.0, -0.015058465048420894, 0.005323971374999505, 0.0, 0.0, 0.0, 0.02454951265154915, -0.01336306209562124, 0.004724555912615356, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.042857142857142844, -0.027836530835928387, 0.015152288168283172, -0.005357142857142867 } };
    static const double coefficients3[1][20] = { { 0.028867513459481315, 0.0, 0.0, -0.01597191412499849, 0.0, 0.0, 0.0, 0.0, 0.0, 0.028347335475692043, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.053571428571428575 } };
    static const double coefficients4[1][20] = { { 0.0, 0.0, 0.11293848786315637, -0.06388765649999399, 0.0, 0.0, 0.0, 0.0736485379546474, 0.026726124191242418, -0.023622779563076728, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06495190528383286, -0.06060915267313264, 0.026785714285714298 } };
    static const double coefficients5[1][20] = { { 0.0, 0.0, -0.022587697572631307, 0.12777531299998807, 0.0, 0.0, 0.0, 0.0, 0.06681531047810609, 0.0472455591261534, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07576144084141581, -0.05357142857142859 } };
    static const double coefficients6[1][20] = { { 0.0, 0.0978075995544939, -0.05646924393157821, -0.06388765649999403, 0.054894379103355, -0.04252100321353805, 0.02314550249431374, 0.02454951265154913, -0.013363062095621204, -0.023622779563076717, 0.0, 0.0, 0.04841229182759272, 0.0, -0.03749999999999999, -0.052489065916782374, 0.0, 0.02165063509461096, 0.030304576336566334, 0.026785714285714305 } };
    static const double coefficients7[1][20] = { { 0.0, -0.019561519910898818, 0.011293848786315647, 0.12777531299998807, 0.0, 0.0, 0.05786375623578448, 0.0, -0.03340765523905306, 0.04724555912615341, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06561133239597798, 0.0, 0.0, -0.03788072042070791, -0.053571428571428596 } };
    static const double coefficients8[1][20] = { { 0.0, 0.09780759955449396, -0.07905694150420949, -0.031943828249996996, 0.05489437910335498, 0.01417366773784601, -0.046291004988627586, -0.02454951265154915, 0.013363062095621228, 0.023622779563076703, 0.0, 0.04791574237499548, -0.006916041689656098, -0.0618589574131742, -0.016071428571428566, 0.008748177652797052, 0.04285714285714287, 0.015464739353293547, 0.0, -0.005357142857142856 } };
    static const double coefficients9[1][20] = { { 0.0, -0.019561519910898842, 0.12423233664947204, -0.031943828249996996, 0.0, 0.05669467095138407, -0.011572751247156909, 0.024549512651549147, -0.046770717334674285, 0.023622779563076696, 0.0, 0.0, 0.0, 0.061858957413174195, -0.02142857142857144, 0.00437408882639853, -0.0642857142857143, 0.009278843611976128, 0.007576144084141588, -0.005357142857142859 } };
    static const double coefficients10[1][20] = { { 0.0, -0.09780759955449397, -0.05646924393157825, -0.06388765649999402, 0.054894379103355005, 0.04252100321353805, -0.0231455024943138, 0.024549512651549157, -0.013363062095621242, -0.023622779563076693, 0.0, 0.0, 0.04841229182759272, 0.0, 0.03749999999999999, 0.05248906591678238, 0.0, 0.02165063509461097, 0.030304576336566337, 0.026785714285714288 } };
    static const double coefficients11[1][20] = { { 0.0, 0.019561519910898825, 0.011293848786315641, 0.12777531299998804, 0.0, 0.0, -0.057863756235784464, 0.0, -0.03340765523905305, 0.047245559126153386, 0.0, 0.0, 0.0, 0.0, 0.0, -0.06561133239597798, 0.0, 0.0, -0.037880720420707906, -0.05357142857142858 } };
    static const double coefficients12[1][20] = { { 0.0, -0.09780759955449392, -0.07905694150420953, -0.031943828249996975, 0.054894379103355005, -0.014173667737845985, 0.04629100498862756, -0.02454951265154914, 0.013363062095621214, 0.02362277956307672, 0.0, 0.04791574237499549, -0.006916041689656096, 0.0618589574131742, 0.016071428571428563, -0.008748177652797059, 0.04285714285714286, 0.015464739353293537, 0.0, -0.005357142857142868 } };
    static const double coefficients13[1][20] = { { 0.0, 0.019561519910898776, 0.12423233664947204, -0.031943828249996996, 0.0, -0.0566946709513841, 0.0115727512471569, 0.024549512651549157, -0.04677071733467428, 0.023622779563076696, 0.0, 0.0, 0.0, -0.0618589574131742, 0.021428571428571446, -0.004374088826398529, -0.0642857142857143, 0.00927884361197614, 0.007576144084141581, -0.005357142857142856 } };
    static const double coefficients14[1][20] = { { 0.0, -0.11736911946539277, -0.04517539514526254, -0.03194382824999702, -0.01829812636778497, 0.04252100321353806, 0.03471825374147069, 0.040915854419248575, 0.03340765523905304, 0.023622779563076717, 0.08504200642707613, 0.023957871187497745, 0.02074812506896832, -0.006185895741317411, -0.005357142857142858, -0.004374088826398521, -0.01071428571428572, -0.009278843611976124, -0.007576144084141591, -0.00535714285714286 } };
    static const double coefficients15[1][20] = { { 0.0, 0.11736911946539276, -0.04517539514526255, -0.03194382824999698, -0.018298126367784988, -0.04252100321353805, -0.03471825374147069, 0.04091585441924858, 0.033407655239053057, 0.023622779563076693, -0.08504200642707613, 0.02395787118749776, 0.02074812506896831, 0.006185895741317411, 0.005357142857142859, 0.004374088826398524, -0.01071428571428572, -0.009278843611976131, -0.007576144084141586, -0.0053571428571428555 } };
    static const double coefficients16[1][20] = { { 0.2598076211353317, 0.11736911946539266, 0.06776309271789384, 0.0479157423749955, 0.0, 0.0850420064270761, 0.06943650748294135, -0.07364853795464742, 0.04008918628686366, -0.09921567416492216, 0.0, 0.0, 0.0, 0.0, 0.07500000000000001, -0.026244532958391176, 0.0, -0.06495190528383289, -0.015152288168283167, 0.02678571428571429 } };
    static const double coefficients17[1][20] = { { 0.2598076211353316, -0.11736911946539272, 0.0677630927178939, 0.047915742374995435, 0.0, -0.08504200642707613, -0.06943650748294138, -0.0736485379546474, 0.04008918628686368, -0.09921567416492216, 0.0, 0.0, 0.0, 0.0, -0.07500000000000001, 0.02624453295839119, 0.0, -0.06495190528383286, -0.015152288168283169, 0.02678571428571431 } };
    static const double coefficients18[1][20] = { { 0.2598076211353315, 0.0, -0.1355261854357876, 0.04791574237499552, -0.10978875820671, 0.0, 0.0, 0.024549512651549112, -0.08017837257372729, -0.09921567416492215, 0.0, 0.0, -0.09682458365518544, 0.0, 0.0, 0.0, 0.0, 0.02165063509461095, 0.03030457633656631, 0.026785714285714277 } };
    static const double coefficients19[1][20] = { { 0.2598076211353317, 0.0, 0.0, -0.14374722712498647, -0.10978875820671001, 0.0, 0.0, -0.12274756325774572, 0.0, 0.042521003213538064, 0.0, -0.095831484749991, 0.013832083379312196, 0.0, 0.0, 0.0, 0.042857142857142864, 0.015464739353293549, 0.0, -0.005357142857142852 } };
    for (std::size_t k = 0; k < num_points * 20; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[3] = { 2.0 * X[ip * 3] - 1.0, 2.0 * X[ip * 3 + 1] - 1.0, 2.0 * X[ip * 3 + 2] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues3[20] = {};
        basisvalues3[0] = 1.0;
        const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
        basisvalues3[1] = tmp1_3;
        const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
        basisvalues3[4] = 1.5 * tmp1_3 * basisvalues3[1] - 0.5 * tmp2_3 * basisvalues3[0];
        basisvalues3[10] = 1.6666666666666667 * tmp1_3 * basisvalues3[4] - 0.6666666666666666 * tmp2_3 * basisvalues3[1];
        basisvalues3[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues3[0];
        basisvalues3[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues3[1];
        basisvalues3[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues3[4];
        const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
        const double tmp4_3 = 0.5 * (1.0 - Y[2]);
        const double tmp5_3 = tmp4_3 * tmp4_3;
        basisvalues3[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues3[2] - 0.5555555555555556 * tmp5_3 * basisvalues3[0];
        basisvalues3[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues3[7] - 0.7 * tmp5_3 * basisvalues3[2];
        basisvalues3[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues3[5] - 0.56 * tmp5_3 * basisvalues3[1];
        basisvalues3[3] = (2.0 * Y[2] + 1.0) * basisvalues3[0];
        basisvalues3[8] = (3.0 * Y[2] + 2.0) * basisvalues3[2];
        basisvalues3[17] = (4.0 * Y[2] + 3.0) * basisvalues3[7];
        basisvalues3[6] = (3.0 * Y[2] + 2.0) * basisvalues3[1];
        basisvalues3[14] = (4.0 * Y[2] + 3.0) * basisvalues3[5];
        basisvalues3[12] = (4.0 * Y[2] + 3.0) * basisvalues3[4];
        basisvalues3[9] = (0.3125 + 1.875 * Y[2]) * basisvalues3[3] - 0.5625 * basisvalues3[0];
        basisvalues3[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues3[9] - 0.7111111111111111 * basisvalues3[3];
        basisvalues3[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues3[8] - 0.5555555555555556 * basisvalues3[2];
        basisvalues3[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues3[6] - 0.5555555555555556 * basisvalues3[1];
        basisvalues3[0] *= std::sqrt(0.75);
        basisvalues3[3] *= std::sqrt(1.25);
        basisvalues3[9] *= std::sqrt(1.75);
        basisvalues3[19] *= std::sqrt(2.25);
        basisvalues3[2] *= std::sqrt(2.5);
        basisvalues3[8] *= std::sqrt(3.5);
        basisvalues3[18] *= std::sqrt(4.5);
        basisvalues3[7] *= std::sqrt(5.25);
        basisvalues3[17] *= std::sqrt(6.75);
        basisvalues3[16] *= std::sqrt(9.0);
        basisvalues3[1] *= std::sqrt(7.5);
        basisvalues3[6] *= std::sqrt(10.5);
        basisvalues3[15] *= std::sqrt(13.5);
        basisvalues3[5] *= std::sqrt(15.75);
        basisvalues3[14] *= std::sqrt(20.25);
        basisvalues3[13] *= std::sqrt(27.0);
        basisvalues3[4] *= std::sqrt(26.25);
        basisvalues3[12] *= std::sqrt(33.75);
        basisvalues3[11] *= std::sqrt(45.0);
        basisvalues3[10] *= std::sqrt(63.0);
        // Accumulate products of coefficients and basisvalues
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[20 * ip] += coefficients0[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[20 * ip + 1] += coefficients1[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[20 * ip + 2] += coefficients2[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[20 * ip + 3] += coefficients3[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[20 * ip + 4] += coefficients4[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[20 * ip + 5] += coefficients5[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[20 * ip + 6] += coefficients6[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[20 * ip + 7] += coefficients7[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[20 * ip + 8] += coefficients8[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[20 * ip + 9] += coefficients9[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[20 * ip + 10] += coefficients10[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[20 * ip + 11] += coefficients11[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[20 * ip + 12] += coefficients12[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[20 * ip + 13] += coefficients13[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[20 * ip + 14] += coefficients14[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[20 * ip + 15] += coefficients15[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[20 * ip + 16] += coefficients16[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[20 * ip + 17] += coefficients17[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[20 * ip + 18] += coefficients18[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[20 * ip + 19] += coefficients19[0][r] * basisvalues3[r];
    }
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(3, order);
    std::fill_n(reference_values, num_points * 20 * num_derivatives, 0.0);
    if (order > 3)
        return;
    // Tables of derivatives of the polynomial base (transpose).
    alignas(32) static const double dmats0[3][20][20] =
        { { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 6.324555320336762, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 11.224972160321832, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 4.582575694955858, 0.0, 8.366600265340768, -1.18321595661993, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 3.7416573867739498, 0.0, 0.0, 8.694826047713665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 5.499090833947011, 0.0, -3.346640106136308, -2.3664319132398495, 15.491933384829666, 0.0, 0.0, 0.6928203230275537, 0.5656854249492373, 0.39999999999999886, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 4.8989794855663495, 0.0, 0.0, 0.0, 14.198591479439074, -0.828078671210824, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 4.2426406871192786, 0.0, 0.0, 0.0, 0.0, 14.342743312012727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 3.6000000000000134, 0.0, 8.763560920082679, -1.549193338482974, 0.0, 0.0, 0.0, 9.524704719832533, -1.4813121596360834, 0.26186146828319146, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 3.1176914536239795, 0.0, 3.162277660168379, 4.919349550499535, 0.0, 0.0, 0.0, 0.0, 10.690449676496982, -2.418972627259056, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.5455844122715585, 0.0, 0.0, 7.66811580507228, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 5.477225575051666, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.291287847477958, 7.245688373094727, 4.1833001326703805, -0.5916079783099749, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.8708286933869749, 0.0, 0.0, 4.3474130238568325, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { -2.6457513110646285, 0.0, 9.66091783079296, 0.6831300510639867, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 3.2403703492039373, 0.0, 0.0, 7.529940238806683, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.3237900077244578, 2.449489742783181, 2.828427124746206, -1.0, 9.165151389911685, 7.099295739719534, -0.41403933560541256, -2.049390153191928, -0.47809144373376167, 0.16903085094570522, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.0124611797498098, 2.1213203435596397, -0.40824829046386346, 3.1754264805429355, 0.0, 0.0, 7.171371656006364, 0.0, -1.380131118684709, -1.5614401167176546, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.80000000000001, -5.692099788303113, 4.381780460041349, -0.7745966692414907, 0.0, 10.998181667893988, 0.9621404708847333, 4.762352359916273, -0.7406560798180437, 0.1309307341415961, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.5588457268119917, 2.7386127875258306, 1.5811388300841904, 2.4596747752497663, 0.0, 0.0, 9.258200997725515, 0.0, 5.345224838248491, -1.2094863136295253, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.2727922061357735, 0.0, 0.0, 3.8340579025361397, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 5.196152422706658, 0.0, -3.162277660168412, -2.2360679774998027, 0.0, 0.0, 0.0, 13.747727084867515, 0.5345224838248532, 0.3779644730092276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { -1.7999999999999887, 0.0, 3.6514837167010707, -2.840187787218764, 0.0, 0.0, 0.0, 0.0, 12.344267996967348, 1.396594497510348, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.2045407685048555, 0.0, 0.0, 6.640783086353614, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.8257418583505551, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.291287847477918, 1.4491376746189435, 4.183300132670375, -0.5916079783099615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.870828693387008, 7.099295739719542, 0.0, 4.347413023856828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.3228756555323076, 0.0, 3.864367132317193, -0.3415650255319911, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.080123449734629, 0.0, 7.099295739719546, 2.509980079602214, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { -3.8188130791299173, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.323790007724463, 2.4494897427831743, 2.828427124746207, -1.0, 1.309307341415954, 7.099295739719537, -0.4140393356054117, -2.049390153191927, -0.4780914437337623, 0.16903085094570483, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.0124611797498075, 2.121320343559647, -0.40824829046386685, 3.1754264805429337, 9.071147352221455, 0.0, 7.171371656006362, 0.0, -1.3801311186847083, -1.5614401167176528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.800000000000009, 0.6324555320336753, 4.381780460041344, -0.7745966692414884, 0.0, 3.142337619398289, -0.10690449676496958, 4.76235235991627, -0.7406560798180428, 0.13093073414159664, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.5588457268119886, 0.5477225575051662, 1.5811388300841966, 2.4596747752497654, 0.0, 9.071147352221454, 1.851640199545103, 0.0, 5.345224838248489, -1.209486313629527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.272792206135779, -6.260990336999449, 0.0, 3.8340579025361414, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.039230484541329, 0.0, 3.162277660168365, -0.447213595499961, 0.0, 0.0, 0.0, 5.891883036371791, -0.5345224838248448, 0.07559289460184586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.89999999999999, 0.0, 1.4605934866803583, 1.4200938936093819, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786952, -0.6982972487551772, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.734846922834953, 0.0, -6.260990336999394, 2.2135943621178726, 0.0, 0.0, 0.0, 0.0, 10.583005244258366, 2.993325909419166, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 5.715767664977288, 0.0, 0.0, -4.695742752749563, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110028, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } } };
    static const double coefficients0[1][20] = { { 0.028867513459481377, 0.01304101327393252, 0.007529232524210424, 0.005323971374999493, 0.01829812636778498, 0.014173667737846016, 0.011572751247156891, 0.008183170883849705, 0.006681531047810616, 0.004724555912615332, -0.028347335475692043, -0.023957871187497756, -0.020748125068968316, -0.01855768722395226, -0.016071428571428573, -0.013122266479195604, -0.010714285714285692, -0.009278843611976116, -0.007576144084141579, -0.00535714285714285 } };
    static const double coefficients1[1][20] = { { 0.028867513459481454, -0.01304101327393248, 0.007529232524210435, 0.005323971374999493, 0.018298126367784984, -0.014173667737846004, -0.011572751247156891, 0.008183170883849717, 0.0066815310478106045, 0.004724555912615337, 0.028347335475692036, -0.02395787118749775, -0.020748125068968302, 0.01855768722395226, 0.01607142857142858, 0.013122266479195593, -0.010714285714285723, -0.00927884361197613, -0.00757614408414158, -0.005357142857142854 } };
    static const double coefficients2[1][20] = { { 0.028867513459481187, 0.0, -0.015058465048420894, 0.005323971374999505, 0.0, 0.0, 0.0, 0.02454951265154915, -0.01336306209562124, 0.004724555912615356, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.042857142857142844, -0.027836530835928387, 0.015152288168283172, -0.005357142857142867 } };
    static const double coefficients3[1][20] = { { 0.028867513459481315, 0.0, 0.0, -0.01597191412499849, 0.0, 0.0, 0.0, 0.0, 0.0, 0.028347335475692043, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.053571428571428575 } };
    static const double coefficients4[1][20] = { { 0.0, 0.0, 0.11293848786315637, -0.06388765649999399, 0.0, 0.0, 0.0, 0.0736485379546474, 0.026726124191242418, -0.023622779563076728, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06495190528383286, -0.06060915267313264, 0.026785714285714298 } };
    static const double coefficients5[1][20] = { { 0.0, 0.0, -0.022587697572631307, 0.12777531299998807, 0.0, 0.0, 0.0, 0.0, 0.06681531047810609, 0.0472455591261534, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07576144084141581, -0.05357142857142859 } };
    static const double coefficients6[1][20] = { { 0.0, 0.0978075995544939, -0.05646924393157821, -0.06388765649999403, 0.054894379103355, -0.04252100321353805, 0.02314550249431374, 0.02454951265154913, -0.013363062095621204, -0.023622779563076717, 0.0, 0.0, 0.04841229182759272, 0.0, -0.03749999999999999, -0.052489065916782374, 0.0, 0.02165063509461096, 0.030304576336566334, 0.026785714285714305 } };
    static const double coefficients7[1][20] = { { 0.0, -0.019561519910898818, 0.011293848786315647, 0.12777531299998807, 0.0, 0.0, 0.05786375623578448, 0.0, -0.03340765523905306, 0.04724555912615341, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06561133239597798, 0.0, 0.0, -0.03788072042070791, -0.053571428571428596 } };
    static const double coefficients8[1][20] = { { 0.0, 0.09780759955449396, -0.07905694150420949, -0.031943828249996996, 0.05489437910335498, 0.01417366773784601, -0.046291004988627586, -0.02454951265154915, 0.013363062095621228, 0.023622779563076703, 0.0, 0.04791574237499548, -0.006916041689656098, -0.0618589574131742, -0.016071428571428566, 0.008748177652797052, 0.04285714285714287, 0.015464739353293547, 0.0, -0.005357142857142856 } };
    static const double coefficients9[1][20] = { { 0.0, -0.019561519910898842, 0.12423233664947204, -0.031943828249996996, 0.0, 0.05669467095138407, -0.011572751247156909, 0.024549512651549147, -0.046770717334674285, 0.023622779563076696, 0.0, 0.0, 0.0, 0.061858957413174195, -0.02142857142857144, 0.00437408882639853, -0.0642857142857143, 0.009278843611976128, 0.007576144084141588, -0.005357142857142859 } };
    static const double coefficients10[1][20] = { { 0.0, -0.09780759955449397, -0.05646924393157825, -0.06388765649999402, 0.054894379103355005, 0.04252100321353805, -0.0231455024943138, 0.024549512651549157, -0.013363062095621242, -0.023622779563076693, 0.0, 0.0, 0.04841229182759272, 0.0, 0.03749999999999999, 0.05248906591678238, 0.0, 0.02165063509461097, 0.030304576336566337, 0.026785714285714288 } };
    static const double coefficients11[1][20] = { { 0.0, 0.019561519910898825, 0.011293848786315641, 0.12777531299998804, 0.0, 0.0, -0.057863756235784464, 0.0, -0.03340765523905305, 0.047245559126153386, 0.0, 0.0, 0.0, 0.0, 0.0, -0.06561133239597798, 0.0, 0.0, -0.037880720420707906, -0.05357142857142858 } };
    static const double coefficients12[1][20] = { { 0.0, -0.09780759955449392, -0.07905694150420953, -0.031943828249996975, 0.054894379103355005, -0.014173667737845985, 0.04629100498862756, -0.02454951265154914, 0.013363062095621214, 0.02362277956307672, 0.0, 0.04791574237499549, -0.006916041689656096, 0.0618589574131742, 0.016071428571428563, -0.008748177652797059, 0.04285714285714286, 0.015464739353293537, 0.0, -0.005357142857142868 } };
    static const double coefficients13[1][20] = { { 0.0, 0.019561519910898776, 0.12423233664947204, -0.031943828249996996, 0.0, -0.0566946709513841, 0.0115727512471569, 0.024549512651549157, -0.04677071733467428, 0.023622779563076696, 0.0, 0.0, 0.0, -0.0618589574131742, 0.021428571428571446, -0.004374088826398529, -0.0642857142857143, 0.00927884361197614, 0.007576144084141581, -0.005357142857142856 } };
    static const double coefficients14[1][20] = { { 0.0, -0.11736911946539277, -0.04517539514526254, -0.03194382824999702, -0.01829812636778497, 0.04252100321353806, 0.03471825374147069, 0.040915854419248575, 0.03340765523905304, 0.023622779563076717, 0.08504200642707613, 0.023957871187497745, 0.02074812506896832, -0.006185895741317411, -0.005357142857142858, -0.004374088826398521, -0.01071428571428572, -0.009278843611976124, -0.007576144084141591, -0.00535714285714286 } };
    static const double coefficients15[1][20] = { { 0.0, 0.11736911946539276, -0.04517539514526255, -0.03194382824999698, -0.018298126367784988, -0.04252100321353805, -0.03471825374147069, 0.04091585441924858, 0.033407655239053057, 0.023622779563076693, -0.08504200642707613, 0.02395787118749776, 0.02074812506896831, 0.006185895741317411, 0.005357142857142859, 0.004374088826398524, -0.01071428571428572, -0.009278843611976131, -0.007576144084141586, -0.0053571428571428555 } };
    static const double coefficients16[1][20] = { { 0.2598076211353317, 0.11736911946539266, 0.06776309271789384, 0.0479157423749955, 0.0, 0.0850420064270761, 0.06943650748294135, -0.07364853795464742, 0.04008918628686366, -0.09921567416492216, 0.0, 0.0, 0.0, 0.0, 0.07500000000000001, -0.026244532958391176, 0.0, -0.06495190528383289, -0.015152288168283167, 0.02678571428571429 } };
    static const double coefficients17[1][20] = { { 0.2598076211353316, -0.11736911946539272, 0.0677630927178939, 0.047915742374995435, 0.0, -0.08504200642707613, -0.06943650748294138, -0.0736485379546474, 0.04008918628686368, -0.09921567416492216, 0.0, 0.0, 0.0, 0.0, -0.07500000000000001, 0.02624453295839119, 0.0, -0.06495190528383286, -0.015152288168283169, 0.02678571428571431 } };
    static const double coefficients18[1][20] = { { 0.2598076211353315, 0.0, -0.1355261854357876, 0.04791574237499552, -0.10978875820671, 0.0, 0.0, 0.024549512651549112, -0.08017837257372729, -0.09921567416492215, 0.0, 0.0, -0.09682458365518544, 0.0, 0.0, 0.0, 0.0, 0.02165063509461095, 0.03030457633656631, 0.026785714285714277 } };
    static const double coefficients19[1][20] = { { 0.2598076211353317, 0.0, 0.0, -0.14374722712498647, -0.10978875820671001, 0.0, 0.0, -0.12274756325774572, 0.0, 0.042521003213538064, 0.0, -0.095831484749991, 0.013832083379312196, 0.0, 0.0, 0.0, 0.042857142857142864, 0.015464739353293549, 0.0, -0.005357142857142852 } };
    const std::size_t reference_offset[20] = {};
    const std::size_t num_components[20] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    // Precomputed combinations
    const std::size_t combinations[3][27][3] =
        { { { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 } },
          { { 0, 0, 0 },
            { 0, 1, 0 },
            { 0, 2, 0 },
            { 1, 0, 0 },
            { 1, 1, 0 },
            { 1, 2, 0 },
            { 2, 0, 0 },
            { 2, 1, 0 },
            { 2, 2, 0 },
            { 0, 0, 0 },
            { 0, 1, 0 },
            { 0, 2, 0 },
            { 1, 0, 0 },
            { 1, 1, 0 },
            { 1, 2, 0 },
            { 2, 0, 0 },
            { 2, 1, 0 },
            { 2, 2, 0 },
            { 0, 0, 0 },
            { 0, 1, 0 },
            { 0, 2, 0 },
            { 1, 0, 0 },
            { 1, 1, 0 },
            { 1, 2, 0 },
            { 2, 0, 0 },
            { 2, 1, 0 },
            { 2, 2, 0 } },
          { { 0, 0, 0 },
            { 0, 0, 1 },
            { 0, 0, 2 },
            { 0, 1, 0 },
            { 0, 1, 1 },
            { 0, 1, 2 },
            { 0, 2, 0 },
            { 0, 2, 1 },
            { 0, 2, 2 },
            { 1, 0, 0 },
            { 1, 0, 1 },
            { 1, 0, 2 },
            { 1, 1, 0 },
            { 1, 1, 1 },
            { 1, 1, 2 },
            { 1, 2, 0 },
            { 1, 2, 1 },
            { 1, 2, 2 },
            { 2, 0, 0 },
            { 2, 0, 1 },
            { 2, 0, 2 },
            { 2, 1, 0 },
            { 2, 1, 1 },
            { 2, 1, 2 },
            { 2, 2, 0 },
            { 2, 2, 1 },
            { 2, 2, 2 } } };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[3] = { 2.0 * X[ip * 3] - 1.0, 2.0 * X[ip * 3 + 1] - 1.0, 2.0 * X[ip * 3 + 2] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues3[20] = {};
        basisvalues3[0] = 1.0;
        const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
        basisvalues3[1] = tmp1_3;
        const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
        basisvalues3[4] = 1.5 * tmp1_3 * basisvalues3[1] - 0.5 * tmp2_3 * basisvalues3[0];
        basisvalues3[10] = 1.6666666666666667 * tmp1_3 * basisvalues3[4] - 0.6666666666666666 * tmp2_3 * basisvalues3[1];
        basisvalues3[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues3[0];
        basisvalues3[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues3[1];
        basisvalues3[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues3[4];
        const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
        const double tmp4_3 = 0.5 * (1.0 - Y[2]);
        const double tmp5_3 = tmp4_3 * tmp4_3;
        basisvalues3[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues3[2] - 0.5555555555555556 * tmp5_3 * basisvalues3[0];
        basisvalues3[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues3[7] - 0.7 * tmp5_3 * basisvalues3[2];
        basisvalues3[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues3[5] - 0.56 * tmp5_3 * basisvalues3[1];
        basisvalues3[3] = (2.0 * Y[2] + 1.0) * basisvalues3[0];
        basisvalues3[8] = (3.0 * Y[2] + 2.0) * basisvalues3[2];
        basisvalues3[17] = (4.0 * Y[2] + 3.0) * basisvalues3[7];
        basisvalues3[6] = (3.0 * Y[2] + 2.0) * basisvalues3[1];
        basisvalues3[14] = (4.0 * Y[2] + 3.0) * basisvalues3[5];
        basisvalues3[12] = (4.0 * Y[2] + 3.0) * basisvalues3[4];
        basisvalues3[9] = (0.3125 + 1.875 * Y[2]) * basisvalues3[3] - 0.5625 * basisvalues3[0];
        basisvalues3[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues3[9] - 0.7111111111111111 * basisvalues3[3];
        basisvalues3[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues3[8] - 0.5555555555555556 * basisvalues3[2];
        basisvalues3[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues3[6] - 0.5555555555555556 * basisvalues3[1];
        basisvalues3[0] *= std::sqrt(0.75);
        basisvalues3[3] *= std::sqrt(1.25);
        basisvalues3[9] *= std::sqrt(1.75);
        basisvalues3[19] *= std::sqrt(2.25);
        basisvalues3[2] *= std::sqrt(2.5);
        basisvalues3[8] *= std::sqrt(3.5);
        basisvalues3[18] *= std::sqrt(4.5);
        basisvalues3[7] *= std::sqrt(5.25);
        basisvalues3[17] *= std::sqrt(6.75);
        basisvalues3[16] *= std::sqrt(9.0);
        basisvalues3[1] *= std::sqrt(7.5);
        basisvalues3[6] *= std::sqrt(10.5);
        basisvalues3[15] *= std::sqrt(13.5);
        basisvalues3[5] *= std::sqrt(15.75);
        basisvalues3[14] *= std::sqrt(20.25);
        basisvalues3[13] *= std::sqrt(27.0);
        basisvalues3[4] *= std::sqrt(26.25);
        basisvalues3[12] *= std::sqrt(33.75);
        basisvalues3[11] *= std::sqrt(45.0);
        basisvalues3[10] *= std::sqrt(63.0);
        // Loop over all dofs
        for (std::size_t i = 0; i < 20; ++i)
        {
            double derivatives[27] = {};
            switch (i)
            {
            case 0:
                // Compute reference derivatives for dof 0.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 1:
                // Compute reference derivatives for dof 1.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 2:
                // Compute reference derivatives for dof 2.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 3:
                // Compute reference derivatives for dof 3.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients3[0][s] * aux[s];
                }
                break;
            case 4:
                // Compute reference derivatives for dof 4.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients4[0][s] * aux[s];
                }
                break;
            case 5:
                // Compute reference derivatives for dof 5.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients5[0][s] * aux[s];
                }
                break;
            case 6:
                // Compute reference derivatives for dof 6.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients6[0][s] * aux[s];
                }
                break;
            case 7:
                // Compute reference derivatives for dof 7.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients7[0][s] * aux[s];
                }
                break;
            case 8:
                // Compute reference derivatives for dof 8.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients8[0][s] * aux[s];
                }
                break;
            case 9:
                // Compute reference derivatives for dof 9.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients9[0][s] * aux[s];
                }
                break;
            case 10:
                // Compute reference derivatives for dof 10.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients10[0][s] * aux[s];
                }
                break;
            case 11:
                // Compute reference derivatives for dof 11.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients11[0][s] * aux[s];
                }
                break;
            case 12:
                // Compute reference derivatives for dof 12.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients12[0][s] * aux[s];
                }
                break;
            case 13:
                // Compute reference derivatives for dof 13.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients13[0][s] * aux[s];
                }
                break;
            case 14:
                // Compute reference derivatives for dof 14.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients14[0][s] * aux[s];
                }
                break;
            case 15:
                // Compute reference derivatives for dof 15.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients15[0][s] * aux[s];
                }
                break;
            case 16:
                // Compute reference derivatives for dof 16.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients16[0][s] * aux[s];
                }
                break;
            case 17:
                // Compute reference derivatives for dof 17.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients17[0][s] * aux[s];
                }
                break;
            case 18:
                // Compute reference derivatives for dof 18.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients18[0][s] * aux[s];
                }
                break;
            case 19:
                // Compute reference derivatives for dof 19.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients19[0][s] * aux[s];
                }
                break;
            }
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t c = 0; c < num_components[i]; ++c)
                    reference_values[20 * num_derivatives * ip + num_derivatives * i + r + (reference_offset[i] + c)] = derivatives[num_derivatives * c + r];
        }
    }
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    const std::size_t num_derivatives = std::pow(3, order);
    // Precomputed combinations
    const std::size_t combinations[3][27][3] =
        { { { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 } },
          { { 0, 0, 0 },
            { 0, 1, 0 },
            { 0, 2, 0 },
            { 1, 0, 0 },
            { 1, 1, 0 },
            { 1, 2, 0 },
            { 2, 0, 0 },
            { 2, 1, 0 },
            { 2, 2, 0 },
            { 0, 0, 0 },
            { 0, 1, 0 },
            { 0, 2, 0 },
            { 1, 0, 0 },
            { 1, 1, 0 },
            { 1, 2, 0 },
            { 2, 0, 0 },
            { 2, 1, 0 },
            { 2, 2, 0 },
            { 0, 0, 0 },
            { 0, 1, 0 },
            { 0, 2, 0 },
            { 1, 0, 0 },
            { 1, 1, 0 },
            { 1, 2, 0 },
            { 2, 0, 0 },
            { 2, 1, 0 },
            { 2, 2, 0 } },
          { { 0, 0, 0 },
            { 0, 0, 1 },
            { 0, 0, 2 },
            { 0, 1, 0 },
            { 0, 1, 1 },
            { 0, 1, 2 },
            { 0, 2, 0 },
            { 0, 2, 1 },
            { 0, 2, 2 },
            { 1, 0, 0 },
            { 1, 0, 1 },
            { 1, 0, 2 },
            { 1, 1, 0 },
            { 1, 1, 1 },
            { 1, 1, 2 },
            { 1, 2, 0 },
            { 1, 2, 1 },
            { 1, 2, 2 },
            { 2, 0, 0 },
            { 2, 0, 1 },
            { 2, 0, 2 },
            { 2, 1, 0 },
            { 2, 1, 1 },
            { 2, 1, 2 },
            { 2, 2, 0 },
            { 2, 2, 1 },
            { 2, 2, 2 } } };
    std::fill_n(values, num_points * 20 * num_derivatives, 0.0);
    const std::size_t reference_offsets[20] = {};
    const std::size_t physical_offsets[20] = {};
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[27][27];
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                transform[r][s] = 1.0;
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                for (std::size_t k = 0; k < order; ++k)
                    transform[r][s] *= K[3 * 3 * ip + 3 * combinations[order - 1][s][k] + combinations[order - 1][r][k]];
        for (std::size_t d = 0; d < 20; ++d)
        {
            for (std::size_t s = 0; s < num_derivatives; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[20 * num_derivatives * ip + num_derivatives * d + s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < num_derivatives; ++r)
                        values[20 * num_derivatives * ip + num_derivatives * d + r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    double X[3] = {};
    double J[9];
    double detJ;
    double K[9];
    if (cm)
    {
        cm->compute_reference_geometry(X, J, &detJ, K, 1, x, coordinate_dofs, cell_orientation);
    }
    else
    {
        compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
        compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
        // Compute constants
        const double C0 = coordinate_dofs[9] + coordinate_dofs[6] + coordinate_dofs[3] - coordinate_dofs[0];
        const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4] - coordinate_dofs[1];
        const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5] - coordinate_dofs[2];
        // Compute subdeterminants
        const double d[9] = { J[4] * J[8] - J[5] * J[7], J[5] * J[6] - J[3] * J[8], J[3] * J[7] - J[4] * J[6], J[2] * J[7] - J[1] * J[8], J[0] * J[8] - J[2] * J[6], J[1] * J[6] - J[0] * J[7], J[1] * J[5] - J[2] * J[4], J[2] * J[3] - J[0] * J[5], J[0] * J[4] - J[1] * J[3] };
        // Get coordinates and map to the reference (FIAT) element
        double Y[3] = { (d[0] * (2.0 * x[0] - C0) + d[3] * (2.0 * x[1] - C1) + d[6] * (2.0 * x[2] - C2)) / detJ, (d[1] * (2.0 * x[0] - C0) + d[4] * (2.0 * x[1] - C1) + d[7] * (2.0 * x[2] - C2)) / detJ, (d[2] * (2.0 * x[0] - C0) + d[5] * (2.0 * x[1] - C1) + d[8] * (2.0 * x[2] - C2)) / detJ };
        // Map to FFC reference coordinate
        for (std::size_t k = 0; k < 3; ++k)
            X[k] = (Y[k] + 1.0) / 2.0;
    }
    // Evaluate basis on reference element
    double ref_values[20];
    evaluate_reference_basis(ref_values, 1, X);
    // Push forward
    double physical_values[20];
    transform_reference_basis_derivatives(physical_values, 0, 1, ref_values, X, J, &detJ, K, cell_orientation);
    for (std::size_t k = 0; k < 1; ++k)
        values[k] = physical_values[i + k];
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    // Helper variable to hold value of a single dof.
    double dof_values = 0.0;
    // Loop dofs and call evaluate_basis
    for (std::size_t r = 0; r < 20; ++r)
    {
        evaluate_basis(r, &dof_values, x, coordinate_dofs, cell_orientation);
        values[r] = dof_values;
    }
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::size_t num_derivatives = std::pow(3, n);
    std::fill_n(values, num_derivatives, 0.0);
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
        return;
    }
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 3)
        return;
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    // Compute Inverse Jacobian and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    // Compute constants
    const double C0 = coordinate_dofs[9] + coordinate_dofs[6] + coordinate_dofs[3] - coordinate_dofs[0];
    const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4] - coordinate_dofs[1];
    const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5] - coordinate_dofs[2];
    // Compute subdeterminants
    const double d[9] = { J[4] * J[8] - J[5] * J[7], J[5] * J[6] - J[3] * J[8], J[3] * J[7] - J[4] * J[6], J[2] * J[7] - J[1] * J[8], J[0] * J[8] - J[2] * J[6], J[1] * J[6] - J[0] * J[7], J[1] * J[5] - J[2] * J[4], J[2] * J[3] - J[0] * J[5], J[0] * J[4] - J[1] * J[3] };
    // Get coordinates and map to the reference (FIAT) element
    double Y[3] = { (d[0] * (2.0 * x[0] - C0) + d[3] * (2.0 * x[1] - C1) + d[6] * (2.0 * x[2] - C2)) / detJ, (d[1] * (2.0 * x[0] - C0) + d[4] * (2.0 * x[1] - C1) + d[7] * (2.0 * x[2] - C2)) / detJ, (d[2] * (2.0 * x[0] - C0) + d[5] * (2.0 * x[1] - C1) + d[8] * (2.0 * x[2] - C2)) / detJ };
    // Precomputed combinations
    const std::size_t combinations[3][27][3] =
        { { { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 } },
          { { 0, 0, 0 },
            { 0, 1, 0 },
            { 0, 2, 0 },
            { 1, 0, 0 },
            { 1, 1, 0 },
            { 1, 2, 0 },
            { 2, 0, 0 },
            { 2, 1, 0 },
            { 2, 2, 0 },
            { 0, 0, 0 },
            { 0, 1, 0 },
            { 0, 2, 0 },
            { 1, 0, 0 },
            { 1, 1, 0 },
            { 1, 2, 0 },
            { 2, 0, 0 },
            { 2, 1, 0 },
            { 2, 2, 0 },
            { 0, 0, 0 },
            { 0, 1, 0 },
            { 0, 2, 0 },
            { 1, 0, 0 },
            { 1, 1, 0 },
            { 1, 2, 0 },
            { 2, 0, 0 },
            { 2, 1, 0 },
            { 2, 2, 0 } },
          { { 0, 0, 0 },
            { 0, 0, 1 },
            { 0, 0, 2 },
            { 0, 1, 0 },
            { 0, 1, 1 },
            { 0, 1, 2 },
            { 0, 2, 0 },
            { 0, 2, 1 },
            { 0, 2, 2 },
            { 1, 0, 0 },
            { 1, 0, 1 },
            { 1, 0, 2 },
            { 1, 1, 0 },
            { 1, 1, 1 },
            { 1, 1, 2 },
            { 1, 2, 0 },
            { 1, 2, 1 },
            { 1, 2, 2 },
            { 2, 0, 0 },
            { 2, 0, 1 },
            { 2, 0, 2 },
            { 2, 1, 0 },
            { 2, 1, 1 },
            { 2, 1, 2 },
            { 2, 2, 0 },
            { 2, 2, 1 },
            { 2, 2, 2 } } };
    // Declare transformation matrix
    double transform[27][27] =
        { { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 } };
    // Construct transformation matrix
    for (std::size_t row = 0; row < num_derivatives; ++row)
        for (std::size_t col = 0; col < num_derivatives; ++col)
            for (std::size_t k = 0; k < n; ++k)
                transform[row][col] *= K[3 * combinations[n - 1][col][k] + combinations[n - 1][row][k]];
    switch (i)
    {
    case 0:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.028867513459481377, 0.01304101327393252, 0.007529232524210424, 0.005323971374999493, 0.01829812636778498, 0.014173667737846016, 0.011572751247156891, 0.008183170883849705, 0.006681531047810616, 0.004724555912615332, -0.028347335475692043, -0.023957871187497756, -0.020748125068968316, -0.01855768722395226, -0.016071428571428573, -0.013122266479195604, -0.010714285714285692, -0.009278843611976116, -0.007576144084141579, -0.00535714285714285 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336762, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321832, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955858, 0.0, 8.366600265340768, -1.18321595661993, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739498, 0.0, 0.0, 8.694826047713665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947011, -3.3935649046180636e-14, -3.346640106136308, -2.3664319132398495, 15.491933384829666, 0.0, 0.0, 0.6928203230275537, 0.5656854249492373, 0.39999999999999886, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.8989794855663495, 0.0, 0.0, 0.0, 14.198591479439074, -0.828078671210824, 1.2098624933629525e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0884716495130443e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 0.0, 0.0, 0.0, 14.342743312012727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000134, 0.0, 8.763560920082679, -1.549193338482974, 0.0, 0.0, 0.0, 9.524704719832533, -1.4813121596360834, 0.26186146828319146, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1176914536239795, 0.0, 3.162277660168379, 4.919349550499535, 0.0, 0.0, 0.0, 0.0, 10.690449676496982, -2.418972627259056, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5455844122715585, 0.0, 0.0, 7.66811580507228, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051666, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477958, 7.245688373094727, 4.1833001326703805, -0.5916079783099749, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869749, 0.0, 0.0, 4.3474130238568325, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646285, 0.0, 9.66091783079296, 0.6831300510639867, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.2403703492039373, 0.0, 0.0, 7.529940238806683, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244578, 2.449489742783181, 2.828427124746206, -1.0000000000000095, 9.165151389911685, 7.099295739719534, -0.41403933560541256, -2.049390153191928, -0.47809144373376167, 0.16903085094570522, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.1213203435596397, -0.40824829046386346, 3.1754264805429355, 0.0, 0.0, 7.171371656006364, 0.0, -1.380131118684709, -1.5614401167176546, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.80000000000001, -5.692099788303113, 4.381780460041349, -0.7745966692414907, 0.0, 10.998181667893988, 0.9621404708847333, 4.762352359916273, -0.7406560798180437, 0.1309307341415961, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119917, 2.7386127875258306, 1.5811388300841904, 2.4596747752497663, 0.0, 0.0, 9.258200997725515, 0.0, 5.345224838248491, -1.2094863136295253, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357735, 0.0, 0.0, 3.8340579025361397, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706658, 0.0, -3.162277660168412, -2.2360679774998027, 0.0, 0.0, 0.0, 13.747727084867515, 0.5345224838248532, 0.3779644730092276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999887, 0.0, 3.6514837167010707, -2.840187787218764, 0.0, 0.0, 0.0, 0.0, 12.344267996967348, 1.396594497510348, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048555, 0.0, 0.0, 6.640783086353614, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505551, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189435, 4.183300132670375, -0.5916079783099615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387008, 7.099295739719542, 0.0, 4.347413023856828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323076, 0.0, 3.864367132317193, -0.3415650255319911, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.080123449734629, 0.0, 7.099295739719546, 2.509980079602214, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299173, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724463, 2.4494897427831743, 2.828427124746207, -1.000000000000009, 1.309307341415954, 7.099295739719537, -0.4140393356054117, -2.049390153191927, -0.4780914437337623, 0.16903085094570483, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498075, 2.121320343559647, -0.40824829046386685, 3.1754264805429337, 9.071147352221455, 0.0, 7.171371656006362, 0.0, -1.3801311186847083, -1.5614401167176528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000009, 0.6324555320336753, 4.381780460041344, -0.7745966692414884, 0.0, 3.142337619398289, -0.10690449676496958, 4.76235235991627, -0.7406560798180428, 0.13093073414159664, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119886, 0.5477225575051662, 1.5811388300841966, 2.4596747752497654, 0.0, 9.071147352221454, 1.851640199545103, 0.0, 5.345224838248489, -1.209486313629527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135779, -6.260990336999449, 0.0, 3.8340579025361414, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.039230484541329, 0.0, 3.162277660168365, -0.447213595499961, 0.0, 0.0, 0.0, 5.891883036371791, -0.5345224838248448, 0.07559289460184586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.89999999999999, 0.0, 1.4605934866803583, 1.4200938936093819, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786952, -0.6982972487551772, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.260990336999394, 2.2135943621178726, 0.0, 0.0, 0.0, 0.0, 10.583005244258366, 2.993325909419166, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977288, 0.0, 0.0, -4.695742752749563, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110028, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 1:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.028867513459481454, -0.01304101327393248, 0.007529232524210435, 0.005323971374999493, 0.018298126367784984, -0.014173667737846004, -0.011572751247156891, 0.008183170883849717, 0.0066815310478106045, 0.004724555912615337, 0.028347335475692036, -0.02395787118749775, -0.020748125068968302, 0.01855768722395226, 0.01607142857142858, 0.013122266479195593, -0.010714285714285723, -0.00927884361197613, -0.00757614408414158, -0.005357142857142854 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336762, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321832, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955858, 0.0, 8.366600265340768, -1.18321595661993, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739498, 0.0, 0.0, 8.694826047713665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947011, -3.3935649046180636e-14, -3.346640106136308, -2.3664319132398495, 15.491933384829666, 0.0, 0.0, 0.6928203230275537, 0.5656854249492373, 0.39999999999999886, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.8989794855663495, 0.0, 0.0, 0.0, 14.198591479439074, -0.828078671210824, 1.2098624933629525e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0884716495130443e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 0.0, 0.0, 0.0, 14.342743312012727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000134, 0.0, 8.763560920082679, -1.549193338482974, 0.0, 0.0, 0.0, 9.524704719832533, -1.4813121596360834, 0.26186146828319146, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1176914536239795, 0.0, 3.162277660168379, 4.919349550499535, 0.0, 0.0, 0.0, 0.0, 10.690449676496982, -2.418972627259056, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5455844122715585, 0.0, 0.0, 7.66811580507228, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051666, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477958, 7.245688373094727, 4.1833001326703805, -0.5916079783099749, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869749, 0.0, 0.0, 4.3474130238568325, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646285, 0.0, 9.66091783079296, 0.6831300510639867, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.2403703492039373, 0.0, 0.0, 7.529940238806683, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244578, 2.449489742783181, 2.828427124746206, -1.0000000000000095, 9.165151389911685, 7.099295739719534, -0.41403933560541256, -2.049390153191928, -0.47809144373376167, 0.16903085094570522, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.1213203435596397, -0.40824829046386346, 3.1754264805429355, 0.0, 0.0, 7.171371656006364, 0.0, -1.380131118684709, -1.5614401167176546, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.80000000000001, -5.692099788303113, 4.381780460041349, -0.7745966692414907, 0.0, 10.998181667893988, 0.9621404708847333, 4.762352359916273, -0.7406560798180437, 0.1309307341415961, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119917, 2.7386127875258306, 1.5811388300841904, 2.4596747752497663, 0.0, 0.0, 9.258200997725515, 0.0, 5.345224838248491, -1.2094863136295253, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357735, 0.0, 0.0, 3.8340579025361397, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706658, 0.0, -3.162277660168412, -2.2360679774998027, 0.0, 0.0, 0.0, 13.747727084867515, 0.5345224838248532, 0.3779644730092276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999887, 0.0, 3.6514837167010707, -2.840187787218764, 0.0, 0.0, 0.0, 0.0, 12.344267996967348, 1.396594497510348, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048555, 0.0, 0.0, 6.640783086353614, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505551, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189435, 4.183300132670375, -0.5916079783099615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387008, 7.099295739719542, 0.0, 4.347413023856828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323076, 0.0, 3.864367132317193, -0.3415650255319911, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.080123449734629, 0.0, 7.099295739719546, 2.509980079602214, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299173, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724463, 2.4494897427831743, 2.828427124746207, -1.000000000000009, 1.309307341415954, 7.099295739719537, -0.4140393356054117, -2.049390153191927, -0.4780914437337623, 0.16903085094570483, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498075, 2.121320343559647, -0.40824829046386685, 3.1754264805429337, 9.071147352221455, 0.0, 7.171371656006362, 0.0, -1.3801311186847083, -1.5614401167176528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000009, 0.6324555320336753, 4.381780460041344, -0.7745966692414884, 0.0, 3.142337619398289, -0.10690449676496958, 4.76235235991627, -0.7406560798180428, 0.13093073414159664, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119886, 0.5477225575051662, 1.5811388300841966, 2.4596747752497654, 0.0, 9.071147352221454, 1.851640199545103, 0.0, 5.345224838248489, -1.209486313629527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135779, -6.260990336999449, 0.0, 3.8340579025361414, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.039230484541329, 0.0, 3.162277660168365, -0.447213595499961, 0.0, 0.0, 0.0, 5.891883036371791, -0.5345224838248448, 0.07559289460184586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.89999999999999, 0.0, 1.4605934866803583, 1.4200938936093819, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786952, -0.6982972487551772, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.260990336999394, 2.2135943621178726, 0.0, 0.0, 0.0, 0.0, 10.583005244258366, 2.993325909419166, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977288, 0.0, 0.0, -4.695742752749563, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110028, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 2:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.028867513459481187, 0.0, -0.015058465048420894, 0.005323971374999505, 0.0, 0.0, 0.0, 0.02454951265154915, -0.01336306209562124, 0.004724555912615356, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.042857142857142844, -0.027836530835928387, 0.015152288168283172, -0.005357142857142867 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336762, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321832, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955858, 0.0, 8.366600265340768, -1.18321595661993, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739498, 0.0, 0.0, 8.694826047713665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947011, -3.3935649046180636e-14, -3.346640106136308, -2.3664319132398495, 15.491933384829666, 0.0, 0.0, 0.6928203230275537, 0.5656854249492373, 0.39999999999999886, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.8989794855663495, 0.0, 0.0, 0.0, 14.198591479439074, -0.828078671210824, 1.2098624933629525e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0884716495130443e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 0.0, 0.0, 0.0, 14.342743312012727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000134, 0.0, 8.763560920082679, -1.549193338482974, 0.0, 0.0, 0.0, 9.524704719832533, -1.4813121596360834, 0.26186146828319146, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1176914536239795, 0.0, 3.162277660168379, 4.919349550499535, 0.0, 0.0, 0.0, 0.0, 10.690449676496982, -2.418972627259056, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5455844122715585, 0.0, 0.0, 7.66811580507228, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051666, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477958, 7.245688373094727, 4.1833001326703805, -0.5916079783099749, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869749, 0.0, 0.0, 4.3474130238568325, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646285, 0.0, 9.66091783079296, 0.6831300510639867, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.2403703492039373, 0.0, 0.0, 7.529940238806683, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244578, 2.449489742783181, 2.828427124746206, -1.0000000000000095, 9.165151389911685, 7.099295739719534, -0.41403933560541256, -2.049390153191928, -0.47809144373376167, 0.16903085094570522, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.1213203435596397, -0.40824829046386346, 3.1754264805429355, 0.0, 0.0, 7.171371656006364, 0.0, -1.380131118684709, -1.5614401167176546, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.80000000000001, -5.692099788303113, 4.381780460041349, -0.7745966692414907, 0.0, 10.998181667893988, 0.9621404708847333, 4.762352359916273, -0.7406560798180437, 0.1309307341415961, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119917, 2.7386127875258306, 1.5811388300841904, 2.4596747752497663, 0.0, 0.0, 9.258200997725515, 0.0, 5.345224838248491, -1.2094863136295253, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357735, 0.0, 0.0, 3.8340579025361397, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706658, 0.0, -3.162277660168412, -2.2360679774998027, 0.0, 0.0, 0.0, 13.747727084867515, 0.5345224838248532, 0.3779644730092276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999887, 0.0, 3.6514837167010707, -2.840187787218764, 0.0, 0.0, 0.0, 0.0, 12.344267996967348, 1.396594497510348, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048555, 0.0, 0.0, 6.640783086353614, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505551, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189435, 4.183300132670375, -0.5916079783099615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387008, 7.099295739719542, 0.0, 4.347413023856828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323076, 0.0, 3.864367132317193, -0.3415650255319911, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.080123449734629, 0.0, 7.099295739719546, 2.509980079602214, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299173, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724463, 2.4494897427831743, 2.828427124746207, -1.000000000000009, 1.309307341415954, 7.099295739719537, -0.4140393356054117, -2.049390153191927, -0.4780914437337623, 0.16903085094570483, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498075, 2.121320343559647, -0.40824829046386685, 3.1754264805429337, 9.071147352221455, 0.0, 7.171371656006362, 0.0, -1.3801311186847083, -1.5614401167176528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000009, 0.6324555320336753, 4.381780460041344, -0.7745966692414884, 0.0, 3.142337619398289, -0.10690449676496958, 4.76235235991627, -0.7406560798180428, 0.13093073414159664, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119886, 0.5477225575051662, 1.5811388300841966, 2.4596747752497654, 0.0, 9.071147352221454, 1.851640199545103, 0.0, 5.345224838248489, -1.209486313629527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135779, -6.260990336999449, 0.0, 3.8340579025361414, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.039230484541329, 0.0, 3.162277660168365, -0.447213595499961, 0.0, 0.0, 0.0, 5.891883036371791, -0.5345224838248448, 0.07559289460184586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.89999999999999, 0.0, 1.4605934866803583, 1.4200938936093819, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786952, -0.6982972487551772, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.260990336999394, 2.2135943621178726, 0.0, 0.0, 0.0, 0.0, 10.583005244258366, 2.993325909419166, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977288, 0.0, 0.0, -4.695742752749563, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110028, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 3:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.028867513459481315, 0.0, 0.0, -0.01597191412499849, 0.0, 0.0, 0.0, 0.0, 0.0, 0.028347335475692043, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.053571428571428575 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336762, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321832, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955858, 0.0, 8.366600265340768, -1.18321595661993, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739498, 0.0, 0.0, 8.694826047713665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947011, -3.3935649046180636e-14, -3.346640106136308, -2.3664319132398495, 15.491933384829666, 0.0, 0.0, 0.6928203230275537, 0.5656854249492373, 0.39999999999999886, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.8989794855663495, 0.0, 0.0, 0.0, 14.198591479439074, -0.828078671210824, 1.2098624933629525e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0884716495130443e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 0.0, 0.0, 0.0, 14.342743312012727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000134, 0.0, 8.763560920082679, -1.549193338482974, 0.0, 0.0, 0.0, 9.524704719832533, -1.4813121596360834, 0.26186146828319146, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1176914536239795, 0.0, 3.162277660168379, 4.919349550499535, 0.0, 0.0, 0.0, 0.0, 10.690449676496982, -2.418972627259056, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5455844122715585, 0.0, 0.0, 7.66811580507228, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051666, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477958, 7.245688373094727, 4.1833001326703805, -0.5916079783099749, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869749, 0.0, 0.0, 4.3474130238568325, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646285, 0.0, 9.66091783079296, 0.6831300510639867, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.2403703492039373, 0.0, 0.0, 7.529940238806683, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244578, 2.449489742783181, 2.828427124746206, -1.0000000000000095, 9.165151389911685, 7.099295739719534, -0.41403933560541256, -2.049390153191928, -0.47809144373376167, 0.16903085094570522, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.1213203435596397, -0.40824829046386346, 3.1754264805429355, 0.0, 0.0, 7.171371656006364, 0.0, -1.380131118684709, -1.5614401167176546, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.80000000000001, -5.692099788303113, 4.381780460041349, -0.7745966692414907, 0.0, 10.998181667893988, 0.9621404708847333, 4.762352359916273, -0.7406560798180437, 0.1309307341415961, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119917, 2.7386127875258306, 1.5811388300841904, 2.4596747752497663, 0.0, 0.0, 9.258200997725515, 0.0, 5.345224838248491, -1.2094863136295253, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357735, 0.0, 0.0, 3.8340579025361397, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706658, 0.0, -3.162277660168412, -2.2360679774998027, 0.0, 0.0, 0.0, 13.747727084867515, 0.5345224838248532, 0.3779644730092276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999887, 0.0, 3.6514837167010707, -2.840187787218764, 0.0, 0.0, 0.0, 0.0, 12.344267996967348, 1.396594497510348, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048555, 0.0, 0.0, 6.640783086353614, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505551, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189435, 4.183300132670375, -0.5916079783099615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387008, 7.099295739719542, 0.0, 4.347413023856828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323076, 0.0, 3.864367132317193, -0.3415650255319911, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.080123449734629, 0.0, 7.099295739719546, 2.509980079602214, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299173, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724463, 2.4494897427831743, 2.828427124746207, -1.000000000000009, 1.309307341415954, 7.099295739719537, -0.4140393356054117, -2.049390153191927, -0.4780914437337623, 0.16903085094570483, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498075, 2.121320343559647, -0.40824829046386685, 3.1754264805429337, 9.071147352221455, 0.0, 7.171371656006362, 0.0, -1.3801311186847083, -1.5614401167176528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000009, 0.6324555320336753, 4.381780460041344, -0.7745966692414884, 0.0, 3.142337619398289, -0.10690449676496958, 4.76235235991627, -0.7406560798180428, 0.13093073414159664, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119886, 0.5477225575051662, 1.5811388300841966, 2.4596747752497654, 0.0, 9.071147352221454, 1.851640199545103, 0.0, 5.345224838248489, -1.209486313629527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135779, -6.260990336999449, 0.0, 3.8340579025361414, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.039230484541329, 0.0, 3.162277660168365, -0.447213595499961, 0.0, 0.0, 0.0, 5.891883036371791, -0.5345224838248448, 0.07559289460184586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.89999999999999, 0.0, 1.4605934866803583, 1.4200938936093819, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786952, -0.6982972487551772, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.260990336999394, 2.2135943621178726, 0.0, 0.0, 0.0, 0.0, 10.583005244258366, 2.993325909419166, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977288, 0.0, 0.0, -4.695742752749563, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110028, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 4:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, 0.0, 0.11293848786315637, -0.06388765649999399, 0.0, 0.0, 0.0, 0.0736485379546474, 0.026726124191242418, -0.023622779563076728, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06495190528383286, -0.06060915267313264, 0.026785714285714298 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336762, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321832, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955858, 0.0, 8.366600265340768, -1.18321595661993, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739498, 0.0, 0.0, 8.694826047713665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947011, -3.3935649046180636e-14, -3.346640106136308, -2.3664319132398495, 15.491933384829666, 0.0, 0.0, 0.6928203230275537, 0.5656854249492373, 0.39999999999999886, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.8989794855663495, 0.0, 0.0, 0.0, 14.198591479439074, -0.828078671210824, 1.2098624933629525e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0884716495130443e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 0.0, 0.0, 0.0, 14.342743312012727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000134, 0.0, 8.763560920082679, -1.549193338482974, 0.0, 0.0, 0.0, 9.524704719832533, -1.4813121596360834, 0.26186146828319146, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1176914536239795, 0.0, 3.162277660168379, 4.919349550499535, 0.0, 0.0, 0.0, 0.0, 10.690449676496982, -2.418972627259056, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5455844122715585, 0.0, 0.0, 7.66811580507228, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051666, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477958, 7.245688373094727, 4.1833001326703805, -0.5916079783099749, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869749, 0.0, 0.0, 4.3474130238568325, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646285, 0.0, 9.66091783079296, 0.6831300510639867, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.2403703492039373, 0.0, 0.0, 7.529940238806683, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244578, 2.449489742783181, 2.828427124746206, -1.0000000000000095, 9.165151389911685, 7.099295739719534, -0.41403933560541256, -2.049390153191928, -0.47809144373376167, 0.16903085094570522, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.1213203435596397, -0.40824829046386346, 3.1754264805429355, 0.0, 0.0, 7.171371656006364, 0.0, -1.380131118684709, -1.5614401167176546, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.80000000000001, -5.692099788303113, 4.381780460041349, -0.7745966692414907, 0.0, 10.998181667893988, 0.9621404708847333, 4.762352359916273, -0.7406560798180437, 0.1309307341415961, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119917, 2.7386127875258306, 1.5811388300841904, 2.4596747752497663, 0.0, 0.0, 9.258200997725515, 0.0, 5.345224838248491, -1.2094863136295253, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357735, 0.0, 0.0, 3.8340579025361397, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706658, 0.0, -3.162277660168412, -2.2360679774998027, 0.0, 0.0, 0.0, 13.747727084867515, 0.5345224838248532, 0.3779644730092276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999887, 0.0, 3.6514837167010707, -2.840187787218764, 0.0, 0.0, 0.0, 0.0, 12.344267996967348, 1.396594497510348, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048555, 0.0, 0.0, 6.640783086353614, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505551, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189435, 4.183300132670375, -0.5916079783099615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387008, 7.099295739719542, 0.0, 4.347413023856828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323076, 0.0, 3.864367132317193, -0.3415650255319911, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.080123449734629, 0.0, 7.099295739719546, 2.509980079602214, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299173, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724463, 2.4494897427831743, 2.828427124746207, -1.000000000000009, 1.309307341415954, 7.099295739719537, -0.4140393356054117, -2.049390153191927, -0.4780914437337623, 0.16903085094570483, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498075, 2.121320343559647, -0.40824829046386685, 3.1754264805429337, 9.071147352221455, 0.0, 7.171371656006362, 0.0, -1.3801311186847083, -1.5614401167176528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000009, 0.6324555320336753, 4.381780460041344, -0.7745966692414884, 0.0, 3.142337619398289, -0.10690449676496958, 4.76235235991627, -0.7406560798180428, 0.13093073414159664, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119886, 0.5477225575051662, 1.5811388300841966, 2.4596747752497654, 0.0, 9.071147352221454, 1.851640199545103, 0.0, 5.345224838248489, -1.209486313629527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135779, -6.260990336999449, 0.0, 3.8340579025361414, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.039230484541329, 0.0, 3.162277660168365, -0.447213595499961, 0.0, 0.0, 0.0, 5.891883036371791, -0.5345224838248448, 0.07559289460184586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.89999999999999, 0.0, 1.4605934866803583, 1.4200938936093819, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786952, -0.6982972487551772, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.260990336999394, 2.2135943621178726, 0.0, 0.0, 0.0, 0.0, 10.583005244258366, 2.993325909419166, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977288, 0.0, 0.0, -4.695742752749563, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110028, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 5:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, 0.0, -0.022587697572631307, 0.12777531299998807, 0.0, 0.0, 0.0, 0.0, 0.06681531047810609, 0.0472455591261534, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07576144084141581, -0.05357142857142859 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336762, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321832, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955858, 0.0, 8.366600265340768, -1.18321595661993, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739498, 0.0, 0.0, 8.694826047713665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947011, -3.3935649046180636e-14, -3.346640106136308, -2.3664319132398495, 15.491933384829666, 0.0, 0.0, 0.6928203230275537, 0.5656854249492373, 0.39999999999999886, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.8989794855663495, 0.0, 0.0, 0.0, 14.198591479439074, -0.828078671210824, 1.2098624933629525e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0884716495130443e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 0.0, 0.0, 0.0, 14.342743312012727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000134, 0.0, 8.763560920082679, -1.549193338482974, 0.0, 0.0, 0.0, 9.524704719832533, -1.4813121596360834, 0.26186146828319146, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1176914536239795, 0.0, 3.162277660168379, 4.919349550499535, 0.0, 0.0, 0.0, 0.0, 10.690449676496982, -2.418972627259056, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5455844122715585, 0.0, 0.0, 7.66811580507228, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051666, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477958, 7.245688373094727, 4.1833001326703805, -0.5916079783099749, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869749, 0.0, 0.0, 4.3474130238568325, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646285, 0.0, 9.66091783079296, 0.6831300510639867, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.2403703492039373, 0.0, 0.0, 7.529940238806683, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244578, 2.449489742783181, 2.828427124746206, -1.0000000000000095, 9.165151389911685, 7.099295739719534, -0.41403933560541256, -2.049390153191928, -0.47809144373376167, 0.16903085094570522, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.1213203435596397, -0.40824829046386346, 3.1754264805429355, 0.0, 0.0, 7.171371656006364, 0.0, -1.380131118684709, -1.5614401167176546, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.80000000000001, -5.692099788303113, 4.381780460041349, -0.7745966692414907, 0.0, 10.998181667893988, 0.9621404708847333, 4.762352359916273, -0.7406560798180437, 0.1309307341415961, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119917, 2.7386127875258306, 1.5811388300841904, 2.4596747752497663, 0.0, 0.0, 9.258200997725515, 0.0, 5.345224838248491, -1.2094863136295253, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357735, 0.0, 0.0, 3.8340579025361397, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706658, 0.0, -3.162277660168412, -2.2360679774998027, 0.0, 0.0, 0.0, 13.747727084867515, 0.5345224838248532, 0.3779644730092276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999887, 0.0, 3.6514837167010707, -2.840187787218764, 0.0, 0.0, 0.0, 0.0, 12.344267996967348, 1.396594497510348, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048555, 0.0, 0.0, 6.640783086353614, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505551, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189435, 4.183300132670375, -0.5916079783099615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387008, 7.099295739719542, 0.0, 4.347413023856828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323076, 0.0, 3.864367132317193, -0.3415650255319911, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.080123449734629, 0.0, 7.099295739719546, 2.509980079602214, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299173, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724463, 2.4494897427831743, 2.828427124746207, -1.000000000000009, 1.309307341415954, 7.099295739719537, -0.4140393356054117, -2.049390153191927, -0.4780914437337623, 0.16903085094570483, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498075, 2.121320343559647, -0.40824829046386685, 3.1754264805429337, 9.071147352221455, 0.0, 7.171371656006362, 0.0, -1.3801311186847083, -1.5614401167176528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000009, 0.6324555320336753, 4.381780460041344, -0.7745966692414884, 0.0, 3.142337619398289, -0.10690449676496958, 4.76235235991627, -0.7406560798180428, 0.13093073414159664, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119886, 0.5477225575051662, 1.5811388300841966, 2.4596747752497654, 0.0, 9.071147352221454, 1.851640199545103, 0.0, 5.345224838248489, -1.209486313629527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135779, -6.260990336999449, 0.0, 3.8340579025361414, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.039230484541329, 0.0, 3.162277660168365, -0.447213595499961, 0.0, 0.0, 0.0, 5.891883036371791, -0.5345224838248448, 0.07559289460184586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.89999999999999, 0.0, 1.4605934866803583, 1.4200938936093819, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786952, -0.6982972487551772, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.260990336999394, 2.2135943621178726, 0.0, 0.0, 0.0, 0.0, 10.583005244258366, 2.993325909419166, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977288, 0.0, 0.0, -4.695742752749563, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110028, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 6:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, 0.0978075995544939, -0.05646924393157821, -0.06388765649999403, 0.054894379103355, -0.04252100321353805, 0.02314550249431374, 0.02454951265154913, -0.013363062095621204, -0.023622779563076717, 0.0, 0.0, 0.04841229182759272, 0.0, -0.03749999999999999, -0.052489065916782374, 0.0, 0.02165063509461096, 0.030304576336566334, 0.026785714285714305 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336762, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321832, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955858, 0.0, 8.366600265340768, -1.18321595661993, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739498, 0.0, 0.0, 8.694826047713665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947011, -3.3935649046180636e-14, -3.346640106136308, -2.3664319132398495, 15.491933384829666, 0.0, 0.0, 0.6928203230275537, 0.5656854249492373, 0.39999999999999886, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.8989794855663495, 0.0, 0.0, 0.0, 14.198591479439074, -0.828078671210824, 1.2098624933629525e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0884716495130443e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 0.0, 0.0, 0.0, 14.342743312012727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000134, 0.0, 8.763560920082679, -1.549193338482974, 0.0, 0.0, 0.0, 9.524704719832533, -1.4813121596360834, 0.26186146828319146, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1176914536239795, 0.0, 3.162277660168379, 4.919349550499535, 0.0, 0.0, 0.0, 0.0, 10.690449676496982, -2.418972627259056, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5455844122715585, 0.0, 0.0, 7.66811580507228, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051666, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477958, 7.245688373094727, 4.1833001326703805, -0.5916079783099749, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869749, 0.0, 0.0, 4.3474130238568325, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646285, 0.0, 9.66091783079296, 0.6831300510639867, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.2403703492039373, 0.0, 0.0, 7.529940238806683, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244578, 2.449489742783181, 2.828427124746206, -1.0000000000000095, 9.165151389911685, 7.099295739719534, -0.41403933560541256, -2.049390153191928, -0.47809144373376167, 0.16903085094570522, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.1213203435596397, -0.40824829046386346, 3.1754264805429355, 0.0, 0.0, 7.171371656006364, 0.0, -1.380131118684709, -1.5614401167176546, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.80000000000001, -5.692099788303113, 4.381780460041349, -0.7745966692414907, 0.0, 10.998181667893988, 0.9621404708847333, 4.762352359916273, -0.7406560798180437, 0.1309307341415961, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119917, 2.7386127875258306, 1.5811388300841904, 2.4596747752497663, 0.0, 0.0, 9.258200997725515, 0.0, 5.345224838248491, -1.2094863136295253, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357735, 0.0, 0.0, 3.8340579025361397, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706658, 0.0, -3.162277660168412, -2.2360679774998027, 0.0, 0.0, 0.0, 13.747727084867515, 0.5345224838248532, 0.3779644730092276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999887, 0.0, 3.6514837167010707, -2.840187787218764, 0.0, 0.0, 0.0, 0.0, 12.344267996967348, 1.396594497510348, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048555, 0.0, 0.0, 6.640783086353614, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505551, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189435, 4.183300132670375, -0.5916079783099615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387008, 7.099295739719542, 0.0, 4.347413023856828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323076, 0.0, 3.864367132317193, -0.3415650255319911, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.080123449734629, 0.0, 7.099295739719546, 2.509980079602214, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299173, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724463, 2.4494897427831743, 2.828427124746207, -1.000000000000009, 1.309307341415954, 7.099295739719537, -0.4140393356054117, -2.049390153191927, -0.4780914437337623, 0.16903085094570483, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498075, 2.121320343559647, -0.40824829046386685, 3.1754264805429337, 9.071147352221455, 0.0, 7.171371656006362, 0.0, -1.3801311186847083, -1.5614401167176528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000009, 0.6324555320336753, 4.381780460041344, -0.7745966692414884, 0.0, 3.142337619398289, -0.10690449676496958, 4.76235235991627, -0.7406560798180428, 0.13093073414159664, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119886, 0.5477225575051662, 1.5811388300841966, 2.4596747752497654, 0.0, 9.071147352221454, 1.851640199545103, 0.0, 5.345224838248489, -1.209486313629527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135779, -6.260990336999449, 0.0, 3.8340579025361414, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.039230484541329, 0.0, 3.162277660168365, -0.447213595499961, 0.0, 0.0, 0.0, 5.891883036371791, -0.5345224838248448, 0.07559289460184586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.89999999999999, 0.0, 1.4605934866803583, 1.4200938936093819, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786952, -0.6982972487551772, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.260990336999394, 2.2135943621178726, 0.0, 0.0, 0.0, 0.0, 10.583005244258366, 2.993325909419166, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977288, 0.0, 0.0, -4.695742752749563, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110028, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 7:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, -0.019561519910898818, 0.011293848786315647, 0.12777531299998807, 0.0, 0.0, 0.05786375623578448, 0.0, -0.03340765523905306, 0.04724555912615341, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06561133239597798, 0.0, 0.0, -0.03788072042070791, -0.053571428571428596 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336762, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321832, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955858, 0.0, 8.366600265340768, -1.18321595661993, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739498, 0.0, 0.0, 8.694826047713665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947011, -3.3935649046180636e-14, -3.346640106136308, -2.3664319132398495, 15.491933384829666, 0.0, 0.0, 0.6928203230275537, 0.5656854249492373, 0.39999999999999886, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.8989794855663495, 0.0, 0.0, 0.0, 14.198591479439074, -0.828078671210824, 1.2098624933629525e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0884716495130443e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 0.0, 0.0, 0.0, 14.342743312012727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000134, 0.0, 8.763560920082679, -1.549193338482974, 0.0, 0.0, 0.0, 9.524704719832533, -1.4813121596360834, 0.26186146828319146, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1176914536239795, 0.0, 3.162277660168379, 4.919349550499535, 0.0, 0.0, 0.0, 0.0, 10.690449676496982, -2.418972627259056, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5455844122715585, 0.0, 0.0, 7.66811580507228, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051666, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477958, 7.245688373094727, 4.1833001326703805, -0.5916079783099749, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869749, 0.0, 0.0, 4.3474130238568325, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646285, 0.0, 9.66091783079296, 0.6831300510639867, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.2403703492039373, 0.0, 0.0, 7.529940238806683, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244578, 2.449489742783181, 2.828427124746206, -1.0000000000000095, 9.165151389911685, 7.099295739719534, -0.41403933560541256, -2.049390153191928, -0.47809144373376167, 0.16903085094570522, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.1213203435596397, -0.40824829046386346, 3.1754264805429355, 0.0, 0.0, 7.171371656006364, 0.0, -1.380131118684709, -1.5614401167176546, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.80000000000001, -5.692099788303113, 4.381780460041349, -0.7745966692414907, 0.0, 10.998181667893988, 0.9621404708847333, 4.762352359916273, -0.7406560798180437, 0.1309307341415961, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119917, 2.7386127875258306, 1.5811388300841904, 2.4596747752497663, 0.0, 0.0, 9.258200997725515, 0.0, 5.345224838248491, -1.2094863136295253, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357735, 0.0, 0.0, 3.8340579025361397, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706658, 0.0, -3.162277660168412, -2.2360679774998027, 0.0, 0.0, 0.0, 13.747727084867515, 0.5345224838248532, 0.3779644730092276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999887, 0.0, 3.6514837167010707, -2.840187787218764, 0.0, 0.0, 0.0, 0.0, 12.344267996967348, 1.396594497510348, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048555, 0.0, 0.0, 6.640783086353614, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505551, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189435, 4.183300132670375, -0.5916079783099615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387008, 7.099295739719542, 0.0, 4.347413023856828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323076, 0.0, 3.864367132317193, -0.3415650255319911, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.080123449734629, 0.0, 7.099295739719546, 2.509980079602214, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299173, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724463, 2.4494897427831743, 2.828427124746207, -1.000000000000009, 1.309307341415954, 7.099295739719537, -0.4140393356054117, -2.049390153191927, -0.4780914437337623, 0.16903085094570483, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498075, 2.121320343559647, -0.40824829046386685, 3.1754264805429337, 9.071147352221455, 0.0, 7.171371656006362, 0.0, -1.3801311186847083, -1.5614401167176528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000009, 0.6324555320336753, 4.381780460041344, -0.7745966692414884, 0.0, 3.142337619398289, -0.10690449676496958, 4.76235235991627, -0.7406560798180428, 0.13093073414159664, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119886, 0.5477225575051662, 1.5811388300841966, 2.4596747752497654, 0.0, 9.071147352221454, 1.851640199545103, 0.0, 5.345224838248489, -1.209486313629527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135779, -6.260990336999449, 0.0, 3.8340579025361414, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.039230484541329, 0.0, 3.162277660168365, -0.447213595499961, 0.0, 0.0, 0.0, 5.891883036371791, -0.5345224838248448, 0.07559289460184586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.89999999999999, 0.0, 1.4605934866803583, 1.4200938936093819, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786952, -0.6982972487551772, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.260990336999394, 2.2135943621178726, 0.0, 0.0, 0.0, 0.0, 10.583005244258366, 2.993325909419166, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977288, 0.0, 0.0, -4.695742752749563, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110028, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 8:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, 0.09780759955449396, -0.07905694150420949, -0.031943828249996996, 0.05489437910335498, 0.01417366773784601, -0.046291004988627586, -0.02454951265154915, 0.013363062095621228, 0.023622779563076703, 0.0, 0.04791574237499548, -0.006916041689656098, -0.0618589574131742, -0.016071428571428566, 0.008748177652797052, 0.04285714285714287, 0.015464739353293547, 0.0, -0.005357142857142856 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336762, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321832, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955858, 0.0, 8.366600265340768, -1.18321595661993, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739498, 0.0, 0.0, 8.694826047713665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947011, -3.3935649046180636e-14, -3.346640106136308, -2.3664319132398495, 15.491933384829666, 0.0, 0.0, 0.6928203230275537, 0.5656854249492373, 0.39999999999999886, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.8989794855663495, 0.0, 0.0, 0.0, 14.198591479439074, -0.828078671210824, 1.2098624933629525e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0884716495130443e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 0.0, 0.0, 0.0, 14.342743312012727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000134, 0.0, 8.763560920082679, -1.549193338482974, 0.0, 0.0, 0.0, 9.524704719832533, -1.4813121596360834, 0.26186146828319146, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1176914536239795, 0.0, 3.162277660168379, 4.919349550499535, 0.0, 0.0, 0.0, 0.0, 10.690449676496982, -2.418972627259056, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5455844122715585, 0.0, 0.0, 7.66811580507228, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051666, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477958, 7.245688373094727, 4.1833001326703805, -0.5916079783099749, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869749, 0.0, 0.0, 4.3474130238568325, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646285, 0.0, 9.66091783079296, 0.6831300510639867, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.2403703492039373, 0.0, 0.0, 7.529940238806683, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244578, 2.449489742783181, 2.828427124746206, -1.0000000000000095, 9.165151389911685, 7.099295739719534, -0.41403933560541256, -2.049390153191928, -0.47809144373376167, 0.16903085094570522, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.1213203435596397, -0.40824829046386346, 3.1754264805429355, 0.0, 0.0, 7.171371656006364, 0.0, -1.380131118684709, -1.5614401167176546, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.80000000000001, -5.692099788303113, 4.381780460041349, -0.7745966692414907, 0.0, 10.998181667893988, 0.9621404708847333, 4.762352359916273, -0.7406560798180437, 0.1309307341415961, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119917, 2.7386127875258306, 1.5811388300841904, 2.4596747752497663, 0.0, 0.0, 9.258200997725515, 0.0, 5.345224838248491, -1.2094863136295253, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357735, 0.0, 0.0, 3.8340579025361397, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706658, 0.0, -3.162277660168412, -2.2360679774998027, 0.0, 0.0, 0.0, 13.747727084867515, 0.5345224838248532, 0.3779644730092276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999887, 0.0, 3.6514837167010707, -2.840187787218764, 0.0, 0.0, 0.0, 0.0, 12.344267996967348, 1.396594497510348, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048555, 0.0, 0.0, 6.640783086353614, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505551, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189435, 4.183300132670375, -0.5916079783099615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387008, 7.099295739719542, 0.0, 4.347413023856828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323076, 0.0, 3.864367132317193, -0.3415650255319911, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.080123449734629, 0.0, 7.099295739719546, 2.509980079602214, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299173, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724463, 2.4494897427831743, 2.828427124746207, -1.000000000000009, 1.309307341415954, 7.099295739719537, -0.4140393356054117, -2.049390153191927, -0.4780914437337623, 0.16903085094570483, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498075, 2.121320343559647, -0.40824829046386685, 3.1754264805429337, 9.071147352221455, 0.0, 7.171371656006362, 0.0, -1.3801311186847083, -1.5614401167176528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000009, 0.6324555320336753, 4.381780460041344, -0.7745966692414884, 0.0, 3.142337619398289, -0.10690449676496958, 4.76235235991627, -0.7406560798180428, 0.13093073414159664, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119886, 0.5477225575051662, 1.5811388300841966, 2.4596747752497654, 0.0, 9.071147352221454, 1.851640199545103, 0.0, 5.345224838248489, -1.209486313629527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135779, -6.260990336999449, 0.0, 3.8340579025361414, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.039230484541329, 0.0, 3.162277660168365, -0.447213595499961, 0.0, 0.0, 0.0, 5.891883036371791, -0.5345224838248448, 0.07559289460184586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.89999999999999, 0.0, 1.4605934866803583, 1.4200938936093819, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786952, -0.6982972487551772, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.260990336999394, 2.2135943621178726, 0.0, 0.0, 0.0, 0.0, 10.583005244258366, 2.993325909419166, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977288, 0.0, 0.0, -4.695742752749563, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110028, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 9:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, -0.019561519910898842, 0.12423233664947204, -0.031943828249996996, 0.0, 0.05669467095138407, -0.011572751247156909, 0.024549512651549147, -0.046770717334674285, 0.023622779563076696, 0.0, 0.0, 0.0, 0.061858957413174195, -0.02142857142857144, 0.00437408882639853, -0.0642857142857143, 0.009278843611976128, 0.007576144084141588, -0.005357142857142859 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336762, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321832, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955858, 0.0, 8.366600265340768, -1.18321595661993, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739498, 0.0, 0.0, 8.694826047713665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947011, -3.3935649046180636e-14, -3.346640106136308, -2.3664319132398495, 15.491933384829666, 0.0, 0.0, 0.6928203230275537, 0.5656854249492373, 0.39999999999999886, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.8989794855663495, 0.0, 0.0, 0.0, 14.198591479439074, -0.828078671210824, 1.2098624933629525e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0884716495130443e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 0.0, 0.0, 0.0, 14.342743312012727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000134, 0.0, 8.763560920082679, -1.549193338482974, 0.0, 0.0, 0.0, 9.524704719832533, -1.4813121596360834, 0.26186146828319146, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1176914536239795, 0.0, 3.162277660168379, 4.919349550499535, 0.0, 0.0, 0.0, 0.0, 10.690449676496982, -2.418972627259056, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5455844122715585, 0.0, 0.0, 7.66811580507228, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051666, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477958, 7.245688373094727, 4.1833001326703805, -0.5916079783099749, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869749, 0.0, 0.0, 4.3474130238568325, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646285, 0.0, 9.66091783079296, 0.6831300510639867, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.2403703492039373, 0.0, 0.0, 7.529940238806683, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244578, 2.449489742783181, 2.828427124746206, -1.0000000000000095, 9.165151389911685, 7.099295739719534, -0.41403933560541256, -2.049390153191928, -0.47809144373376167, 0.16903085094570522, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.1213203435596397, -0.40824829046386346, 3.1754264805429355, 0.0, 0.0, 7.171371656006364, 0.0, -1.380131118684709, -1.5614401167176546, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.80000000000001, -5.692099788303113, 4.381780460041349, -0.7745966692414907, 0.0, 10.998181667893988, 0.9621404708847333, 4.762352359916273, -0.7406560798180437, 0.1309307341415961, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119917, 2.7386127875258306, 1.5811388300841904, 2.4596747752497663, 0.0, 0.0, 9.258200997725515, 0.0, 5.345224838248491, -1.2094863136295253, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357735, 0.0, 0.0, 3.8340579025361397, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706658, 0.0, -3.162277660168412, -2.2360679774998027, 0.0, 0.0, 0.0, 13.747727084867515, 0.5345224838248532, 0.3779644730092276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999887, 0.0, 3.6514837167010707, -2.840187787218764, 0.0, 0.0, 0.0, 0.0, 12.344267996967348, 1.396594497510348, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048555, 0.0, 0.0, 6.640783086353614, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505551, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189435, 4.183300132670375, -0.5916079783099615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387008, 7.099295739719542, 0.0, 4.347413023856828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323076, 0.0, 3.864367132317193, -0.3415650255319911, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.080123449734629, 0.0, 7.099295739719546, 2.509980079602214, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299173, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724463, 2.4494897427831743, 2.828427124746207, -1.000000000000009, 1.309307341415954, 7.099295739719537, -0.4140393356054117, -2.049390153191927, -0.4780914437337623, 0.16903085094570483, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498075, 2.121320343559647, -0.40824829046386685, 3.1754264805429337, 9.071147352221455, 0.0, 7.171371656006362, 0.0, -1.3801311186847083, -1.5614401167176528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000009, 0.6324555320336753, 4.381780460041344, -0.7745966692414884, 0.0, 3.142337619398289, -0.10690449676496958, 4.76235235991627, -0.7406560798180428, 0.13093073414159664, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119886, 0.5477225575051662, 1.5811388300841966, 2.4596747752497654, 0.0, 9.071147352221454, 1.851640199545103, 0.0, 5.345224838248489, -1.209486313629527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135779, -6.260990336999449, 0.0, 3.8340579025361414, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.039230484541329, 0.0, 3.162277660168365, -0.447213595499961, 0.0, 0.0, 0.0, 5.891883036371791, -0.5345224838248448, 0.07559289460184586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.89999999999999, 0.0, 1.4605934866803583, 1.4200938936093819, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786952, -0.6982972487551772, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.260990336999394, 2.2135943621178726, 0.0, 0.0, 0.0, 0.0, 10.583005244258366, 2.993325909419166, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977288, 0.0, 0.0, -4.695742752749563, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110028, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 10:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, -0.09780759955449397, -0.05646924393157825, -0.06388765649999402, 0.054894379103355005, 0.04252100321353805, -0.0231455024943138, 0.024549512651549157, -0.013363062095621242, -0.023622779563076693, 0.0, 0.0, 0.04841229182759272, 0.0, 0.03749999999999999, 0.05248906591678238, 0.0, 0.02165063509461097, 0.030304576336566337, 0.026785714285714288 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336762, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321832, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955858, 0.0, 8.366600265340768, -1.18321595661993, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739498, 0.0, 0.0, 8.694826047713665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947011, -3.3935649046180636e-14, -3.346640106136308, -2.3664319132398495, 15.491933384829666, 0.0, 0.0, 0.6928203230275537, 0.5656854249492373, 0.39999999999999886, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.8989794855663495, 0.0, 0.0, 0.0, 14.198591479439074, -0.828078671210824, 1.2098624933629525e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0884716495130443e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 0.0, 0.0, 0.0, 14.342743312012727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000134, 0.0, 8.763560920082679, -1.549193338482974, 0.0, 0.0, 0.0, 9.524704719832533, -1.4813121596360834, 0.26186146828319146, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1176914536239795, 0.0, 3.162277660168379, 4.919349550499535, 0.0, 0.0, 0.0, 0.0, 10.690449676496982, -2.418972627259056, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5455844122715585, 0.0, 0.0, 7.66811580507228, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051666, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477958, 7.245688373094727, 4.1833001326703805, -0.5916079783099749, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869749, 0.0, 0.0, 4.3474130238568325, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646285, 0.0, 9.66091783079296, 0.6831300510639867, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.2403703492039373, 0.0, 0.0, 7.529940238806683, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244578, 2.449489742783181, 2.828427124746206, -1.0000000000000095, 9.165151389911685, 7.099295739719534, -0.41403933560541256, -2.049390153191928, -0.47809144373376167, 0.16903085094570522, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.1213203435596397, -0.40824829046386346, 3.1754264805429355, 0.0, 0.0, 7.171371656006364, 0.0, -1.380131118684709, -1.5614401167176546, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.80000000000001, -5.692099788303113, 4.381780460041349, -0.7745966692414907, 0.0, 10.998181667893988, 0.9621404708847333, 4.762352359916273, -0.7406560798180437, 0.1309307341415961, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119917, 2.7386127875258306, 1.5811388300841904, 2.4596747752497663, 0.0, 0.0, 9.258200997725515, 0.0, 5.345224838248491, -1.2094863136295253, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357735, 0.0, 0.0, 3.8340579025361397, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706658, 0.0, -3.162277660168412, -2.2360679774998027, 0.0, 0.0, 0.0, 13.747727084867515, 0.5345224838248532, 0.3779644730092276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999887, 0.0, 3.6514837167010707, -2.840187787218764, 0.0, 0.0, 0.0, 0.0, 12.344267996967348, 1.396594497510348, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048555, 0.0, 0.0, 6.640783086353614, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505551, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189435, 4.183300132670375, -0.5916079783099615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387008, 7.099295739719542, 0.0, 4.347413023856828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323076, 0.0, 3.864367132317193, -0.3415650255319911, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.080123449734629, 0.0, 7.099295739719546, 2.509980079602214, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299173, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724463, 2.4494897427831743, 2.828427124746207, -1.000000000000009, 1.309307341415954, 7.099295739719537, -0.4140393356054117, -2.049390153191927, -0.4780914437337623, 0.16903085094570483, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498075, 2.121320343559647, -0.40824829046386685, 3.1754264805429337, 9.071147352221455, 0.0, 7.171371656006362, 0.0, -1.3801311186847083, -1.5614401167176528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000009, 0.6324555320336753, 4.381780460041344, -0.7745966692414884, 0.0, 3.142337619398289, -0.10690449676496958, 4.76235235991627, -0.7406560798180428, 0.13093073414159664, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119886, 0.5477225575051662, 1.5811388300841966, 2.4596747752497654, 0.0, 9.071147352221454, 1.851640199545103, 0.0, 5.345224838248489, -1.209486313629527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135779, -6.260990336999449, 0.0, 3.8340579025361414, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.039230484541329, 0.0, 3.162277660168365, -0.447213595499961, 0.0, 0.0, 0.0, 5.891883036371791, -0.5345224838248448, 0.07559289460184586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.89999999999999, 0.0, 1.4605934866803583, 1.4200938936093819, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786952, -0.6982972487551772, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.260990336999394, 2.2135943621178726, 0.0, 0.0, 0.0, 0.0, 10.583005244258366, 2.993325909419166, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977288, 0.0, 0.0, -4.695742752749563, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110028, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 11:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, 0.019561519910898825, 0.011293848786315641, 0.12777531299998804, 0.0, 0.0, -0.057863756235784464, 0.0, -0.03340765523905305, 0.047245559126153386, 0.0, 0.0, 0.0, 0.0, 0.0, -0.06561133239597798, 0.0, 0.0, -0.037880720420707906, -0.05357142857142858 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336762, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321832, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955858, 0.0, 8.366600265340768, -1.18321595661993, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739498, 0.0, 0.0, 8.694826047713665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947011, -3.3935649046180636e-14, -3.346640106136308, -2.3664319132398495, 15.491933384829666, 0.0, 0.0, 0.6928203230275537, 0.5656854249492373, 0.39999999999999886, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.8989794855663495, 0.0, 0.0, 0.0, 14.198591479439074, -0.828078671210824, 1.2098624933629525e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0884716495130443e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 0.0, 0.0, 0.0, 14.342743312012727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000134, 0.0, 8.763560920082679, -1.549193338482974, 0.0, 0.0, 0.0, 9.524704719832533, -1.4813121596360834, 0.26186146828319146, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1176914536239795, 0.0, 3.162277660168379, 4.919349550499535, 0.0, 0.0, 0.0, 0.0, 10.690449676496982, -2.418972627259056, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5455844122715585, 0.0, 0.0, 7.66811580507228, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051666, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477958, 7.245688373094727, 4.1833001326703805, -0.5916079783099749, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869749, 0.0, 0.0, 4.3474130238568325, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646285, 0.0, 9.66091783079296, 0.6831300510639867, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.2403703492039373, 0.0, 0.0, 7.529940238806683, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244578, 2.449489742783181, 2.828427124746206, -1.0000000000000095, 9.165151389911685, 7.099295739719534, -0.41403933560541256, -2.049390153191928, -0.47809144373376167, 0.16903085094570522, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.1213203435596397, -0.40824829046386346, 3.1754264805429355, 0.0, 0.0, 7.171371656006364, 0.0, -1.380131118684709, -1.5614401167176546, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.80000000000001, -5.692099788303113, 4.381780460041349, -0.7745966692414907, 0.0, 10.998181667893988, 0.9621404708847333, 4.762352359916273, -0.7406560798180437, 0.1309307341415961, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119917, 2.7386127875258306, 1.5811388300841904, 2.4596747752497663, 0.0, 0.0, 9.258200997725515, 0.0, 5.345224838248491, -1.2094863136295253, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357735, 0.0, 0.0, 3.8340579025361397, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706658, 0.0, -3.162277660168412, -2.2360679774998027, 0.0, 0.0, 0.0, 13.747727084867515, 0.5345224838248532, 0.3779644730092276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999887, 0.0, 3.6514837167010707, -2.840187787218764, 0.0, 0.0, 0.0, 0.0, 12.344267996967348, 1.396594497510348, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048555, 0.0, 0.0, 6.640783086353614, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505551, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189435, 4.183300132670375, -0.5916079783099615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387008, 7.099295739719542, 0.0, 4.347413023856828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323076, 0.0, 3.864367132317193, -0.3415650255319911, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.080123449734629, 0.0, 7.099295739719546, 2.509980079602214, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299173, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724463, 2.4494897427831743, 2.828427124746207, -1.000000000000009, 1.309307341415954, 7.099295739719537, -0.4140393356054117, -2.049390153191927, -0.4780914437337623, 0.16903085094570483, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498075, 2.121320343559647, -0.40824829046386685, 3.1754264805429337, 9.071147352221455, 0.0, 7.171371656006362, 0.0, -1.3801311186847083, -1.5614401167176528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000009, 0.6324555320336753, 4.381780460041344, -0.7745966692414884, 0.0, 3.142337619398289, -0.10690449676496958, 4.76235235991627, -0.7406560798180428, 0.13093073414159664, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119886, 0.5477225575051662, 1.5811388300841966, 2.4596747752497654, 0.0, 9.071147352221454, 1.851640199545103, 0.0, 5.345224838248489, -1.209486313629527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135779, -6.260990336999449, 0.0, 3.8340579025361414, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.039230484541329, 0.0, 3.162277660168365, -0.447213595499961, 0.0, 0.0, 0.0, 5.891883036371791, -0.5345224838248448, 0.07559289460184586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.89999999999999, 0.0, 1.4605934866803583, 1.4200938936093819, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786952, -0.6982972487551772, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.260990336999394, 2.2135943621178726, 0.0, 0.0, 0.0, 0.0, 10.583005244258366, 2.993325909419166, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977288, 0.0, 0.0, -4.695742752749563, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110028, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 12:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, -0.09780759955449392, -0.07905694150420953, -0.031943828249996975, 0.054894379103355005, -0.014173667737845985, 0.04629100498862756, -0.02454951265154914, 0.013363062095621214, 0.02362277956307672, 0.0, 0.04791574237499549, -0.006916041689656096, 0.0618589574131742, 0.016071428571428563, -0.008748177652797059, 0.04285714285714286, 0.015464739353293537, 0.0, -0.005357142857142868 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336762, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321832, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955858, 0.0, 8.366600265340768, -1.18321595661993, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739498, 0.0, 0.0, 8.694826047713665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947011, -3.3935649046180636e-14, -3.346640106136308, -2.3664319132398495, 15.491933384829666, 0.0, 0.0, 0.6928203230275537, 0.5656854249492373, 0.39999999999999886, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.8989794855663495, 0.0, 0.0, 0.0, 14.198591479439074, -0.828078671210824, 1.2098624933629525e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0884716495130443e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 0.0, 0.0, 0.0, 14.342743312012727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000134, 0.0, 8.763560920082679, -1.549193338482974, 0.0, 0.0, 0.0, 9.524704719832533, -1.4813121596360834, 0.26186146828319146, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1176914536239795, 0.0, 3.162277660168379, 4.919349550499535, 0.0, 0.0, 0.0, 0.0, 10.690449676496982, -2.418972627259056, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5455844122715585, 0.0, 0.0, 7.66811580507228, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051666, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477958, 7.245688373094727, 4.1833001326703805, -0.5916079783099749, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869749, 0.0, 0.0, 4.3474130238568325, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646285, 0.0, 9.66091783079296, 0.6831300510639867, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.2403703492039373, 0.0, 0.0, 7.529940238806683, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244578, 2.449489742783181, 2.828427124746206, -1.0000000000000095, 9.165151389911685, 7.099295739719534, -0.41403933560541256, -2.049390153191928, -0.47809144373376167, 0.16903085094570522, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.1213203435596397, -0.40824829046386346, 3.1754264805429355, 0.0, 0.0, 7.171371656006364, 0.0, -1.380131118684709, -1.5614401167176546, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.80000000000001, -5.692099788303113, 4.381780460041349, -0.7745966692414907, 0.0, 10.998181667893988, 0.9621404708847333, 4.762352359916273, -0.7406560798180437, 0.1309307341415961, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119917, 2.7386127875258306, 1.5811388300841904, 2.4596747752497663, 0.0, 0.0, 9.258200997725515, 0.0, 5.345224838248491, -1.2094863136295253, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357735, 0.0, 0.0, 3.8340579025361397, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706658, 0.0, -3.162277660168412, -2.2360679774998027, 0.0, 0.0, 0.0, 13.747727084867515, 0.5345224838248532, 0.3779644730092276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999887, 0.0, 3.6514837167010707, -2.840187787218764, 0.0, 0.0, 0.0, 0.0, 12.344267996967348, 1.396594497510348, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048555, 0.0, 0.0, 6.640783086353614, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505551, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189435, 4.183300132670375, -0.5916079783099615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387008, 7.099295739719542, 0.0, 4.347413023856828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323076, 0.0, 3.864367132317193, -0.3415650255319911, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.080123449734629, 0.0, 7.099295739719546, 2.509980079602214, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299173, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724463, 2.4494897427831743, 2.828427124746207, -1.000000000000009, 1.309307341415954, 7.099295739719537, -0.4140393356054117, -2.049390153191927, -0.4780914437337623, 0.16903085094570483, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498075, 2.121320343559647, -0.40824829046386685, 3.1754264805429337, 9.071147352221455, 0.0, 7.171371656006362, 0.0, -1.3801311186847083, -1.5614401167176528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000009, 0.6324555320336753, 4.381780460041344, -0.7745966692414884, 0.0, 3.142337619398289, -0.10690449676496958, 4.76235235991627, -0.7406560798180428, 0.13093073414159664, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119886, 0.5477225575051662, 1.5811388300841966, 2.4596747752497654, 0.0, 9.071147352221454, 1.851640199545103, 0.0, 5.345224838248489, -1.209486313629527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135779, -6.260990336999449, 0.0, 3.8340579025361414, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.039230484541329, 0.0, 3.162277660168365, -0.447213595499961, 0.0, 0.0, 0.0, 5.891883036371791, -0.5345224838248448, 0.07559289460184586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.89999999999999, 0.0, 1.4605934866803583, 1.4200938936093819, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786952, -0.6982972487551772, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.260990336999394, 2.2135943621178726, 0.0, 0.0, 0.0, 0.0, 10.583005244258366, 2.993325909419166, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977288, 0.0, 0.0, -4.695742752749563, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110028, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 13:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, 0.019561519910898776, 0.12423233664947204, -0.031943828249996996, 0.0, -0.0566946709513841, 0.0115727512471569, 0.024549512651549157, -0.04677071733467428, 0.023622779563076696, 0.0, 0.0, 0.0, -0.0618589574131742, 0.021428571428571446, -0.004374088826398529, -0.0642857142857143, 0.00927884361197614, 0.007576144084141581, -0.005357142857142856 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336762, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321832, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955858, 0.0, 8.366600265340768, -1.18321595661993, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739498, 0.0, 0.0, 8.694826047713665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947011, -3.3935649046180636e-14, -3.346640106136308, -2.3664319132398495, 15.491933384829666, 0.0, 0.0, 0.6928203230275537, 0.5656854249492373, 0.39999999999999886, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.8989794855663495, 0.0, 0.0, 0.0, 14.198591479439074, -0.828078671210824, 1.2098624933629525e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0884716495130443e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 0.0, 0.0, 0.0, 14.342743312012727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000134, 0.0, 8.763560920082679, -1.549193338482974, 0.0, 0.0, 0.0, 9.524704719832533, -1.4813121596360834, 0.26186146828319146, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1176914536239795, 0.0, 3.162277660168379, 4.919349550499535, 0.0, 0.0, 0.0, 0.0, 10.690449676496982, -2.418972627259056, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5455844122715585, 0.0, 0.0, 7.66811580507228, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051666, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477958, 7.245688373094727, 4.1833001326703805, -0.5916079783099749, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869749, 0.0, 0.0, 4.3474130238568325, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646285, 0.0, 9.66091783079296, 0.6831300510639867, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.2403703492039373, 0.0, 0.0, 7.529940238806683, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244578, 2.449489742783181, 2.828427124746206, -1.0000000000000095, 9.165151389911685, 7.099295739719534, -0.41403933560541256, -2.049390153191928, -0.47809144373376167, 0.16903085094570522, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.1213203435596397, -0.40824829046386346, 3.1754264805429355, 0.0, 0.0, 7.171371656006364, 0.0, -1.380131118684709, -1.5614401167176546, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.80000000000001, -5.692099788303113, 4.381780460041349, -0.7745966692414907, 0.0, 10.998181667893988, 0.9621404708847333, 4.762352359916273, -0.7406560798180437, 0.1309307341415961, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119917, 2.7386127875258306, 1.5811388300841904, 2.4596747752497663, 0.0, 0.0, 9.258200997725515, 0.0, 5.345224838248491, -1.2094863136295253, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357735, 0.0, 0.0, 3.8340579025361397, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706658, 0.0, -3.162277660168412, -2.2360679774998027, 0.0, 0.0, 0.0, 13.747727084867515, 0.5345224838248532, 0.3779644730092276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999887, 0.0, 3.6514837167010707, -2.840187787218764, 0.0, 0.0, 0.0, 0.0, 12.344267996967348, 1.396594497510348, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048555, 0.0, 0.0, 6.640783086353614, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505551, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189435, 4.183300132670375, -0.5916079783099615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387008, 7.099295739719542, 0.0, 4.347413023856828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323076, 0.0, 3.864367132317193, -0.3415650255319911, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.080123449734629, 0.0, 7.099295739719546, 2.509980079602214, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299173, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724463, 2.4494897427831743, 2.828427124746207, -1.000000000000009, 1.309307341415954, 7.099295739719537, -0.4140393356054117, -2.049390153191927, -0.4780914437337623, 0.16903085094570483, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498075, 2.121320343559647, -0.40824829046386685, 3.1754264805429337, 9.071147352221455, 0.0, 7.171371656006362, 0.0, -1.3801311186847083, -1.5614401167176528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000009, 0.6324555320336753, 4.381780460041344, -0.7745966692414884, 0.0, 3.142337619398289, -0.10690449676496958, 4.76235235991627, -0.7406560798180428, 0.13093073414159664, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119886, 0.5477225575051662, 1.5811388300841966, 2.4596747752497654, 0.0, 9.071147352221454, 1.851640199545103, 0.0, 5.345224838248489, -1.209486313629527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135779, -6.260990336999449, 0.0, 3.8340579025361414, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.039230484541329, 0.0, 3.162277660168365, -0.447213595499961, 0.0, 0.0, 0.0, 5.891883036371791, -0.5345224838248448, 0.07559289460184586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.89999999999999, 0.0, 1.4605934866803583, 1.4200938936093819, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786952, -0.6982972487551772, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.260990336999394, 2.2135943621178726, 0.0, 0.0, 0.0, 0.0, 10.583005244258366, 2.993325909419166, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977288, 0.0, 0.0, -4.695742752749563, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110028, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 14:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, -0.11736911946539277, -0.04517539514526254, -0.03194382824999702, -0.01829812636778497, 0.04252100321353806, 0.03471825374147069, 0.040915854419248575, 0.03340765523905304, 0.023622779563076717, 0.08504200642707613, 0.023957871187497745, 0.02074812506896832, -0.006185895741317411, -0.005357142857142858, -0.004374088826398521, -0.01071428571428572, -0.009278843611976124, -0.007576144084141591, -0.00535714285714286 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336762, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321832, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955858, 0.0, 8.366600265340768, -1.18321595661993, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739498, 0.0, 0.0, 8.694826047713665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947011, -3.3935649046180636e-14, -3.346640106136308, -2.3664319132398495, 15.491933384829666, 0.0, 0.0, 0.6928203230275537, 0.5656854249492373, 0.39999999999999886, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.8989794855663495, 0.0, 0.0, 0.0, 14.198591479439074, -0.828078671210824, 1.2098624933629525e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0884716495130443e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 0.0, 0.0, 0.0, 14.342743312012727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000134, 0.0, 8.763560920082679, -1.549193338482974, 0.0, 0.0, 0.0, 9.524704719832533, -1.4813121596360834, 0.26186146828319146, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1176914536239795, 0.0, 3.162277660168379, 4.919349550499535, 0.0, 0.0, 0.0, 0.0, 10.690449676496982, -2.418972627259056, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5455844122715585, 0.0, 0.0, 7.66811580507228, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051666, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477958, 7.245688373094727, 4.1833001326703805, -0.5916079783099749, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869749, 0.0, 0.0, 4.3474130238568325, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646285, 0.0, 9.66091783079296, 0.6831300510639867, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.2403703492039373, 0.0, 0.0, 7.529940238806683, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244578, 2.449489742783181, 2.828427124746206, -1.0000000000000095, 9.165151389911685, 7.099295739719534, -0.41403933560541256, -2.049390153191928, -0.47809144373376167, 0.16903085094570522, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.1213203435596397, -0.40824829046386346, 3.1754264805429355, 0.0, 0.0, 7.171371656006364, 0.0, -1.380131118684709, -1.5614401167176546, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.80000000000001, -5.692099788303113, 4.381780460041349, -0.7745966692414907, 0.0, 10.998181667893988, 0.9621404708847333, 4.762352359916273, -0.7406560798180437, 0.1309307341415961, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119917, 2.7386127875258306, 1.5811388300841904, 2.4596747752497663, 0.0, 0.0, 9.258200997725515, 0.0, 5.345224838248491, -1.2094863136295253, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357735, 0.0, 0.0, 3.8340579025361397, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706658, 0.0, -3.162277660168412, -2.2360679774998027, 0.0, 0.0, 0.0, 13.747727084867515, 0.5345224838248532, 0.3779644730092276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999887, 0.0, 3.6514837167010707, -2.840187787218764, 0.0, 0.0, 0.0, 0.0, 12.344267996967348, 1.396594497510348, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048555, 0.0, 0.0, 6.640783086353614, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505551, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189435, 4.183300132670375, -0.5916079783099615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387008, 7.099295739719542, 0.0, 4.347413023856828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323076, 0.0, 3.864367132317193, -0.3415650255319911, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.080123449734629, 0.0, 7.099295739719546, 2.509980079602214, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299173, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724463, 2.4494897427831743, 2.828427124746207, -1.000000000000009, 1.309307341415954, 7.099295739719537, -0.4140393356054117, -2.049390153191927, -0.4780914437337623, 0.16903085094570483, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498075, 2.121320343559647, -0.40824829046386685, 3.1754264805429337, 9.071147352221455, 0.0, 7.171371656006362, 0.0, -1.3801311186847083, -1.5614401167176528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000009, 0.6324555320336753, 4.381780460041344, -0.7745966692414884, 0.0, 3.142337619398289, -0.10690449676496958, 4.76235235991627, -0.7406560798180428, 0.13093073414159664, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119886, 0.5477225575051662, 1.5811388300841966, 2.4596747752497654, 0.0, 9.071147352221454, 1.851640199545103, 0.0, 5.345224838248489, -1.209486313629527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135779, -6.260990336999449, 0.0, 3.8340579025361414, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.039230484541329, 0.0, 3.162277660168365, -0.447213595499961, 0.0, 0.0, 0.0, 5.891883036371791, -0.5345224838248448, 0.07559289460184586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.89999999999999, 0.0, 1.4605934866803583, 1.4200938936093819, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786952, -0.6982972487551772, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.260990336999394, 2.2135943621178726, 0.0, 0.0, 0.0, 0.0, 10.583005244258366, 2.993325909419166, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977288, 0.0, 0.0, -4.695742752749563, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110028, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 15:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, 0.11736911946539276, -0.04517539514526255, -0.03194382824999698, -0.018298126367784988, -0.04252100321353805, -0.03471825374147069, 0.04091585441924858, 0.033407655239053057, 0.023622779563076693, -0.08504200642707613, 0.02395787118749776, 0.02074812506896831, 0.006185895741317411, 0.005357142857142859, 0.004374088826398524, -0.01071428571428572, -0.009278843611976131, -0.007576144084141586, -0.0053571428571428555 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336762, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321832, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955858, 0.0, 8.366600265340768, -1.18321595661993, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739498, 0.0, 0.0, 8.694826047713665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947011, -3.3935649046180636e-14, -3.346640106136308, -2.3664319132398495, 15.491933384829666, 0.0, 0.0, 0.6928203230275537, 0.5656854249492373, 0.39999999999999886, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.8989794855663495, 0.0, 0.0, 0.0, 14.198591479439074, -0.828078671210824, 1.2098624933629525e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0884716495130443e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 0.0, 0.0, 0.0, 14.342743312012727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000134, 0.0, 8.763560920082679, -1.549193338482974, 0.0, 0.0, 0.0, 9.524704719832533, -1.4813121596360834, 0.26186146828319146, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1176914536239795, 0.0, 3.162277660168379, 4.919349550499535, 0.0, 0.0, 0.0, 0.0, 10.690449676496982, -2.418972627259056, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5455844122715585, 0.0, 0.0, 7.66811580507228, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051666, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477958, 7.245688373094727, 4.1833001326703805, -0.5916079783099749, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869749, 0.0, 0.0, 4.3474130238568325, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646285, 0.0, 9.66091783079296, 0.6831300510639867, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.2403703492039373, 0.0, 0.0, 7.529940238806683, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244578, 2.449489742783181, 2.828427124746206, -1.0000000000000095, 9.165151389911685, 7.099295739719534, -0.41403933560541256, -2.049390153191928, -0.47809144373376167, 0.16903085094570522, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.1213203435596397, -0.40824829046386346, 3.1754264805429355, 0.0, 0.0, 7.171371656006364, 0.0, -1.380131118684709, -1.5614401167176546, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.80000000000001, -5.692099788303113, 4.381780460041349, -0.7745966692414907, 0.0, 10.998181667893988, 0.9621404708847333, 4.762352359916273, -0.7406560798180437, 0.1309307341415961, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119917, 2.7386127875258306, 1.5811388300841904, 2.4596747752497663, 0.0, 0.0, 9.258200997725515, 0.0, 5.345224838248491, -1.2094863136295253, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357735, 0.0, 0.0, 3.8340579025361397, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706658, 0.0, -3.162277660168412, -2.2360679774998027, 0.0, 0.0, 0.0, 13.747727084867515, 0.5345224838248532, 0.3779644730092276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999887, 0.0, 3.6514837167010707, -2.840187787218764, 0.0, 0.0, 0.0, 0.0, 12.344267996967348, 1.396594497510348, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048555, 0.0, 0.0, 6.640783086353614, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505551, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189435, 4.183300132670375, -0.5916079783099615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387008, 7.099295739719542, 0.0, 4.347413023856828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323076, 0.0, 3.864367132317193, -0.3415650255319911, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.080123449734629, 0.0, 7.099295739719546, 2.509980079602214, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299173, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724463, 2.4494897427831743, 2.828427124746207, -1.000000000000009, 1.309307341415954, 7.099295739719537, -0.4140393356054117, -2.049390153191927, -0.4780914437337623, 0.16903085094570483, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498075, 2.121320343559647, -0.40824829046386685, 3.1754264805429337, 9.071147352221455, 0.0, 7.171371656006362, 0.0, -1.3801311186847083, -1.5614401167176528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000009, 0.6324555320336753, 4.381780460041344, -0.7745966692414884, 0.0, 3.142337619398289, -0.10690449676496958, 4.76235235991627, -0.7406560798180428, 0.13093073414159664, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119886, 0.5477225575051662, 1.5811388300841966, 2.4596747752497654, 0.0, 9.071147352221454, 1.851640199545103, 0.0, 5.345224838248489, -1.209486313629527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135779, -6.260990336999449, 0.0, 3.8340579025361414, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.039230484541329, 0.0, 3.162277660168365, -0.447213595499961, 0.0, 0.0, 0.0, 5.891883036371791, -0.5345224838248448, 0.07559289460184586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.89999999999999, 0.0, 1.4605934866803583, 1.4200938936093819, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786952, -0.6982972487551772, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.260990336999394, 2.2135943621178726, 0.0, 0.0, 0.0, 0.0, 10.583005244258366, 2.993325909419166, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977288, 0.0, 0.0, -4.695742752749563, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110028, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 16:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.2598076211353317, 0.11736911946539266, 0.06776309271789384, 0.0479157423749955, 0.0, 0.0850420064270761, 0.06943650748294135, -0.07364853795464742, 0.04008918628686366, -0.09921567416492216, 0.0, 0.0, 0.0, 0.0, 0.07500000000000001, -0.026244532958391176, 0.0, -0.06495190528383289, -0.015152288168283167, 0.02678571428571429 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336762, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321832, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955858, 0.0, 8.366600265340768, -1.18321595661993, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739498, 0.0, 0.0, 8.694826047713665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947011, -3.3935649046180636e-14, -3.346640106136308, -2.3664319132398495, 15.491933384829666, 0.0, 0.0, 0.6928203230275537, 0.5656854249492373, 0.39999999999999886, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.8989794855663495, 0.0, 0.0, 0.0, 14.198591479439074, -0.828078671210824, 1.2098624933629525e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0884716495130443e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 0.0, 0.0, 0.0, 14.342743312012727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000134, 0.0, 8.763560920082679, -1.549193338482974, 0.0, 0.0, 0.0, 9.524704719832533, -1.4813121596360834, 0.26186146828319146, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1176914536239795, 0.0, 3.162277660168379, 4.919349550499535, 0.0, 0.0, 0.0, 0.0, 10.690449676496982, -2.418972627259056, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5455844122715585, 0.0, 0.0, 7.66811580507228, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051666, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477958, 7.245688373094727, 4.1833001326703805, -0.5916079783099749, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869749, 0.0, 0.0, 4.3474130238568325, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646285, 0.0, 9.66091783079296, 0.6831300510639867, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.2403703492039373, 0.0, 0.0, 7.529940238806683, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244578, 2.449489742783181, 2.828427124746206, -1.0000000000000095, 9.165151389911685, 7.099295739719534, -0.41403933560541256, -2.049390153191928, -0.47809144373376167, 0.16903085094570522, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.1213203435596397, -0.40824829046386346, 3.1754264805429355, 0.0, 0.0, 7.171371656006364, 0.0, -1.380131118684709, -1.5614401167176546, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.80000000000001, -5.692099788303113, 4.381780460041349, -0.7745966692414907, 0.0, 10.998181667893988, 0.9621404708847333, 4.762352359916273, -0.7406560798180437, 0.1309307341415961, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119917, 2.7386127875258306, 1.5811388300841904, 2.4596747752497663, 0.0, 0.0, 9.258200997725515, 0.0, 5.345224838248491, -1.2094863136295253, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357735, 0.0, 0.0, 3.8340579025361397, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706658, 0.0, -3.162277660168412, -2.2360679774998027, 0.0, 0.0, 0.0, 13.747727084867515, 0.5345224838248532, 0.3779644730092276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999887, 0.0, 3.6514837167010707, -2.840187787218764, 0.0, 0.0, 0.0, 0.0, 12.344267996967348, 1.396594497510348, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048555, 0.0, 0.0, 6.640783086353614, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505551, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189435, 4.183300132670375, -0.5916079783099615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387008, 7.099295739719542, 0.0, 4.347413023856828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323076, 0.0, 3.864367132317193, -0.3415650255319911, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.080123449734629, 0.0, 7.099295739719546, 2.509980079602214, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299173, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724463, 2.4494897427831743, 2.828427124746207, -1.000000000000009, 1.309307341415954, 7.099295739719537, -0.4140393356054117, -2.049390153191927, -0.4780914437337623, 0.16903085094570483, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498075, 2.121320343559647, -0.40824829046386685, 3.1754264805429337, 9.071147352221455, 0.0, 7.171371656006362, 0.0, -1.3801311186847083, -1.5614401167176528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000009, 0.6324555320336753, 4.381780460041344, -0.7745966692414884, 0.0, 3.142337619398289, -0.10690449676496958, 4.76235235991627, -0.7406560798180428, 0.13093073414159664, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119886, 0.5477225575051662, 1.5811388300841966, 2.4596747752497654, 0.0, 9.071147352221454, 1.851640199545103, 0.0, 5.345224838248489, -1.209486313629527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135779, -6.260990336999449, 0.0, 3.8340579025361414, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.039230484541329, 0.0, 3.162277660168365, -0.447213595499961, 0.0, 0.0, 0.0, 5.891883036371791, -0.5345224838248448, 0.07559289460184586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.89999999999999, 0.0, 1.4605934866803583, 1.4200938936093819, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786952, -0.6982972487551772, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.260990336999394, 2.2135943621178726, 0.0, 0.0, 0.0, 0.0, 10.583005244258366, 2.993325909419166, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977288, 0.0, 0.0, -4.695742752749563, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110028, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 17:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.2598076211353316, -0.11736911946539272, 0.0677630927178939, 0.047915742374995435, 0.0, -0.08504200642707613, -0.06943650748294138, -0.0736485379546474, 0.04008918628686368, -0.09921567416492216, 0.0, 0.0, 0.0, 0.0, -0.07500000000000001, 0.02624453295839119, 0.0, -0.06495190528383286, -0.015152288168283169, 0.02678571428571431 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336762, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321832, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955858, 0.0, 8.366600265340768, -1.18321595661993, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739498, 0.0, 0.0, 8.694826047713665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947011, -3.3935649046180636e-14, -3.346640106136308, -2.3664319132398495, 15.491933384829666, 0.0, 0.0, 0.6928203230275537, 0.5656854249492373, 0.39999999999999886, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.8989794855663495, 0.0, 0.0, 0.0, 14.198591479439074, -0.828078671210824, 1.2098624933629525e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0884716495130443e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 0.0, 0.0, 0.0, 14.342743312012727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000134, 0.0, 8.763560920082679, -1.549193338482974, 0.0, 0.0, 0.0, 9.524704719832533, -1.4813121596360834, 0.26186146828319146, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1176914536239795, 0.0, 3.162277660168379, 4.919349550499535, 0.0, 0.0, 0.0, 0.0, 10.690449676496982, -2.418972627259056, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5455844122715585, 0.0, 0.0, 7.66811580507228, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051666, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477958, 7.245688373094727, 4.1833001326703805, -0.5916079783099749, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869749, 0.0, 0.0, 4.3474130238568325, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646285, 0.0, 9.66091783079296, 0.6831300510639867, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.2403703492039373, 0.0, 0.0, 7.529940238806683, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244578, 2.449489742783181, 2.828427124746206, -1.0000000000000095, 9.165151389911685, 7.099295739719534, -0.41403933560541256, -2.049390153191928, -0.47809144373376167, 0.16903085094570522, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.1213203435596397, -0.40824829046386346, 3.1754264805429355, 0.0, 0.0, 7.171371656006364, 0.0, -1.380131118684709, -1.5614401167176546, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.80000000000001, -5.692099788303113, 4.381780460041349, -0.7745966692414907, 0.0, 10.998181667893988, 0.9621404708847333, 4.762352359916273, -0.7406560798180437, 0.1309307341415961, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119917, 2.7386127875258306, 1.5811388300841904, 2.4596747752497663, 0.0, 0.0, 9.258200997725515, 0.0, 5.345224838248491, -1.2094863136295253, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357735, 0.0, 0.0, 3.8340579025361397, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706658, 0.0, -3.162277660168412, -2.2360679774998027, 0.0, 0.0, 0.0, 13.747727084867515, 0.5345224838248532, 0.3779644730092276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999887, 0.0, 3.6514837167010707, -2.840187787218764, 0.0, 0.0, 0.0, 0.0, 12.344267996967348, 1.396594497510348, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048555, 0.0, 0.0, 6.640783086353614, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505551, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189435, 4.183300132670375, -0.5916079783099615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387008, 7.099295739719542, 0.0, 4.347413023856828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323076, 0.0, 3.864367132317193, -0.3415650255319911, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.080123449734629, 0.0, 7.099295739719546, 2.509980079602214, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299173, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724463, 2.4494897427831743, 2.828427124746207, -1.000000000000009, 1.309307341415954, 7.099295739719537, -0.4140393356054117, -2.049390153191927, -0.4780914437337623, 0.16903085094570483, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498075, 2.121320343559647, -0.40824829046386685, 3.1754264805429337, 9.071147352221455, 0.0, 7.171371656006362, 0.0, -1.3801311186847083, -1.5614401167176528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000009, 0.6324555320336753, 4.381780460041344, -0.7745966692414884, 0.0, 3.142337619398289, -0.10690449676496958, 4.76235235991627, -0.7406560798180428, 0.13093073414159664, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119886, 0.5477225575051662, 1.5811388300841966, 2.4596747752497654, 0.0, 9.071147352221454, 1.851640199545103, 0.0, 5.345224838248489, -1.209486313629527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135779, -6.260990336999449, 0.0, 3.8340579025361414, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.039230484541329, 0.0, 3.162277660168365, -0.447213595499961, 0.0, 0.0, 0.0, 5.891883036371791, -0.5345224838248448, 0.07559289460184586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.89999999999999, 0.0, 1.4605934866803583, 1.4200938936093819, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786952, -0.6982972487551772, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.260990336999394, 2.2135943621178726, 0.0, 0.0, 0.0, 0.0, 10.583005244258366, 2.993325909419166, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977288, 0.0, 0.0, -4.695742752749563, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110028, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 18:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.2598076211353315, 0.0, -0.1355261854357876, 0.04791574237499552, -0.10978875820671, 0.0, 0.0, 0.024549512651549112, -0.08017837257372729, -0.09921567416492215, 0.0, 0.0, -0.09682458365518544, 0.0, 0.0, 0.0, 0.0, 0.02165063509461095, 0.03030457633656631, 0.026785714285714277 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336762, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321832, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955858, 0.0, 8.366600265340768, -1.18321595661993, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739498, 0.0, 0.0, 8.694826047713665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947011, -3.3935649046180636e-14, -3.346640106136308, -2.3664319132398495, 15.491933384829666, 0.0, 0.0, 0.6928203230275537, 0.5656854249492373, 0.39999999999999886, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.8989794855663495, 0.0, 0.0, 0.0, 14.198591479439074, -0.828078671210824, 1.2098624933629525e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0884716495130443e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 0.0, 0.0, 0.0, 14.342743312012727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000134, 0.0, 8.763560920082679, -1.549193338482974, 0.0, 0.0, 0.0, 9.524704719832533, -1.4813121596360834, 0.26186146828319146, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1176914536239795, 0.0, 3.162277660168379, 4.919349550499535, 0.0, 0.0, 0.0, 0.0, 10.690449676496982, -2.418972627259056, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5455844122715585, 0.0, 0.0, 7.66811580507228, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051666, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477958, 7.245688373094727, 4.1833001326703805, -0.5916079783099749, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869749, 0.0, 0.0, 4.3474130238568325, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646285, 0.0, 9.66091783079296, 0.6831300510639867, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.2403703492039373, 0.0, 0.0, 7.529940238806683, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244578, 2.449489742783181, 2.828427124746206, -1.0000000000000095, 9.165151389911685, 7.099295739719534, -0.41403933560541256, -2.049390153191928, -0.47809144373376167, 0.16903085094570522, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.1213203435596397, -0.40824829046386346, 3.1754264805429355, 0.0, 0.0, 7.171371656006364, 0.0, -1.380131118684709, -1.5614401167176546, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.80000000000001, -5.692099788303113, 4.381780460041349, -0.7745966692414907, 0.0, 10.998181667893988, 0.9621404708847333, 4.762352359916273, -0.7406560798180437, 0.1309307341415961, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119917, 2.7386127875258306, 1.5811388300841904, 2.4596747752497663, 0.0, 0.0, 9.258200997725515, 0.0, 5.345224838248491, -1.2094863136295253, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357735, 0.0, 0.0, 3.8340579025361397, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706658, 0.0, -3.162277660168412, -2.2360679774998027, 0.0, 0.0, 0.0, 13.747727084867515, 0.5345224838248532, 0.3779644730092276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999887, 0.0, 3.6514837167010707, -2.840187787218764, 0.0, 0.0, 0.0, 0.0, 12.344267996967348, 1.396594497510348, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048555, 0.0, 0.0, 6.640783086353614, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505551, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189435, 4.183300132670375, -0.5916079783099615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387008, 7.099295739719542, 0.0, 4.347413023856828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323076, 0.0, 3.864367132317193, -0.3415650255319911, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.080123449734629, 0.0, 7.099295739719546, 2.509980079602214, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299173, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724463, 2.4494897427831743, 2.828427124746207, -1.000000000000009, 1.309307341415954, 7.099295739719537, -0.4140393356054117, -2.049390153191927, -0.4780914437337623, 0.16903085094570483, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498075, 2.121320343559647, -0.40824829046386685, 3.1754264805429337, 9.071147352221455, 0.0, 7.171371656006362, 0.0, -1.3801311186847083, -1.5614401167176528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000009, 0.6324555320336753, 4.381780460041344, -0.7745966692414884, 0.0, 3.142337619398289, -0.10690449676496958, 4.76235235991627, -0.7406560798180428, 0.13093073414159664, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119886, 0.5477225575051662, 1.5811388300841966, 2.4596747752497654, 0.0, 9.071147352221454, 1.851640199545103, 0.0, 5.345224838248489, -1.209486313629527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135779, -6.260990336999449, 0.0, 3.8340579025361414, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.039230484541329, 0.0, 3.162277660168365, -0.447213595499961, 0.0, 0.0, 0.0, 5.891883036371791, -0.5345224838248448, 0.07559289460184586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.89999999999999, 0.0, 1.4605934866803583, 1.4200938936093819, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786952, -0.6982972487551772, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.260990336999394, 2.2135943621178726, 0.0, 0.0, 0.0, 0.0, 10.583005244258366, 2.993325909419166, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977288, 0.0, 0.0, -4.695742752749563, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110028, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 19:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.2598076211353317, 0.0, 0.0, -0.14374722712498647, -0.10978875820671001, 0.0, 0.0, -0.12274756325774572, 0.0, 0.042521003213538064, 0.0, -0.095831484749991, 0.013832083379312196, 0.0, 0.0, 0.0, 0.042857142857142864, 0.015464739353293549, 0.0, -0.005357142857142852 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336762, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321832, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955858, 0.0, 8.366600265340768, -1.18321595661993, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739498, 0.0, 0.0, 8.694826047713665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947011, -3.3935649046180636e-14, -3.346640106136308, -2.3664319132398495, 15.491933384829666, 0.0, 0.0, 0.6928203230275537, 0.5656854249492373, 0.39999999999999886, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.8989794855663495, 0.0, 0.0, 0.0, 14.198591479439074, -0.828078671210824, 1.2098624933629525e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0884716495130443e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 0.0, 0.0, 0.0, 14.342743312012727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000134, 0.0, 8.763560920082679, -1.549193338482974, 0.0, 0.0, 0.0, 9.524704719832533, -1.4813121596360834, 0.26186146828319146, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1176914536239795, 0.0, 3.162277660168379, 4.919349550499535, 0.0, 0.0, 0.0, 0.0, 10.690449676496982, -2.418972627259056, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5455844122715585, 0.0, 0.0, 7.66811580507228, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051666, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477958, 7.245688373094727, 4.1833001326703805, -0.5916079783099749, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869749, 0.0, 0.0, 4.3474130238568325, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646285, 0.0, 9.66091783079296, 0.6831300510639867, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.2403703492039373, 0.0, 0.0, 7.529940238806683, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244578, 2.449489742783181, 2.828427124746206, -1.0000000000000095, 9.165151389911685, 7.099295739719534, -0.41403933560541256, -2.049390153191928, -0.47809144373376167, 0.16903085094570522, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.1213203435596397, -0.40824829046386346, 3.1754264805429355, 0.0, 0.0, 7.171371656006364, 0.0, -1.380131118684709, -1.5614401167176546, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.80000000000001, -5.692099788303113, 4.381780460041349, -0.7745966692414907, 0.0, 10.998181667893988, 0.9621404708847333, 4.762352359916273, -0.7406560798180437, 0.1309307341415961, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119917, 2.7386127875258306, 1.5811388300841904, 2.4596747752497663, 0.0, 0.0, 9.258200997725515, 0.0, 5.345224838248491, -1.2094863136295253, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357735, 0.0, 0.0, 3.8340579025361397, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706658, 0.0, -3.162277660168412, -2.2360679774998027, 0.0, 0.0, 0.0, 13.747727084867515, 0.5345224838248532, 0.3779644730092276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999887, 0.0, 3.6514837167010707, -2.840187787218764, 0.0, 0.0, 0.0, 0.0, 12.344267996967348, 1.396594497510348, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048555, 0.0, 0.0, 6.640783086353614, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505551, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189435, 4.183300132670375, -0.5916079783099615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387008, 7.099295739719542, 0.0, 4.347413023856828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323076, 0.0, 3.864367132317193, -0.3415650255319911, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.080123449734629, 0.0, 7.099295739719546, 2.509980079602214, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299173, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724463, 2.4494897427831743, 2.828427124746207, -1.000000000000009, 1.309307341415954, 7.099295739719537, -0.4140393356054117, -2.049390153191927, -0.4780914437337623, 0.16903085094570483, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498075, 2.121320343559647, -0.40824829046386685, 3.1754264805429337, 9.071147352221455, 0.0, 7.171371656006362, 0.0, -1.3801311186847083, -1.5614401167176528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000009, 0.6324555320336753, 4.381780460041344, -0.7745966692414884, 0.0, 3.142337619398289, -0.10690449676496958, 4.76235235991627, -0.7406560798180428, 0.13093073414159664, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119886, 0.5477225575051662, 1.5811388300841966, 2.4596747752497654, 0.0, 9.071147352221454, 1.851640199545103, 0.0, 5.345224838248489, -1.209486313629527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135779, -6.260990336999449, 0.0, 3.8340579025361414, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.039230484541329, 0.0, 3.162277660168365, -0.447213595499961, 0.0, 0.0, 0.0, 5.891883036371791, -0.5345224838248448, 0.07559289460184586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.89999999999999, 0.0, 1.4605934866803583, 1.4200938936093819, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786952, -0.6982972487551772, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.260990336999394, 2.2135943621178726, 0.0, 0.0, 0.0, 0.0, 10.583005244258366, 2.993325909419166, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977288, 0.0, 0.0, -4.695742752749563, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110028, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    }
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
        return;
    }
    unsigned int num_derivatives = std::pow(3, n);
    // Set values equal to zero.
    std::fill_n(values, num_derivatives * 20, 0.0);
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 3)
        return;
    // Helper variable to hold values of a single dof.
    double dof_values[27] = {};
    // Loop dofs and call evaluate_basis_derivatives.
    for (std::size_t r = 0; r < 20; ++r)
    {
        evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < num_derivatives; ++s)
            values[num_derivatives * r + s] = dof_values[s];
    }
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[3];
    switch (i)
    {
    case 0:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            y[2] = coordinate_dofs[2];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 1:
        {
            y[0] = coordinate_dofs[3];
            y[1] = coordinate_dofs[4];
            y[2] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 2:
        {
            y[0] = coordinate_dofs[6];
            y[1] = coordinate_dofs[7];
            y[2] = coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 3:
        {
            y[0] = coordinate_dofs[9];
            y[1] = coordinate_dofs[10];
            y[2] = coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 4:
        {
            y[0] = -5.551115123125783e-17 * coordinate_dofs[0] + 0.6666666666666667 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
            y[1] = -5.551115123125783e-17 * coordinate_dofs[1] + 0.6666666666666667 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
            y[2] = -5.551115123125783e-17 * coordinate_dofs[2] + 0.6666666666666667 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 5:
        {
            y[0] = 0.33333333333333337 * coordinate_dofs[6] + 0.6666666666666666 * coordinate_dofs[9];
            y[1] = 0.33333333333333337 * coordinate_dofs[7] + 0.6666666666666666 * coordinate_dofs[10];
            y[2] = 0.33333333333333337 * coordinate_dofs[8] + 0.6666666666666666 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 6:
        {
            y[0] = -5.551115123125783e-17 * coordinate_dofs[0] + 0.6666666666666667 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[9];
            y[1] = -5.551115123125783e-17 * coordinate_dofs[1] + 0.6666666666666667 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[10];
            y[2] = -5.551115123125783e-17 * coordinate_dofs[2] + 0.6666666666666667 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 7:
        {
            y[0] = 0.33333333333333337 * coordinate_dofs[3] + 0.6666666666666666 * coordinate_dofs[9];
            y[1] = 0.33333333333333337 * coordinate_dofs[4] + 0.6666666666666666 * coordinate_dofs[10];
            y[2] = 0.33333333333333337 * coordinate_dofs[5] + 0.6666666666666666 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 8:
        {
            y[0] = -5.551115123125783e-17 * coordinate_dofs[0] + 0.6666666666666667 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6];
            y[1] = -5.551115123125783e-17 * coordinate_dofs[1] + 0.6666666666666667 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7];
            y[2] = -5.551115123125783e-17 * coordinate_dofs[2] + 0.6666666666666667 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 9:
        {
            y[0] = 0.33333333333333337 * coordinate_dofs[3] + 0.6666666666666666 * coordinate_dofs[6];
            y[1] = 0.33333333333333337 * coordinate_dofs[4] + 0.6666666666666666 * coordinate_dofs[7];
            y[2] = 0.33333333333333337 * coordinate_dofs[5] + 0.6666666666666666 * coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 10:
        {
            y[0] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[9];
            y[1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[10];
            y[2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 11:
        {
            y[0] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[9];
            y[1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[10];
            y[2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 12:
        {
            y[0] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[6];
            y[1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[7];
            y[2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 13:
        {
            y[0] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[6];
            y[1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[7];
            y[2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 14:
        {
            y[0] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3];
            y[1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4];
            y[2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 15:
        {
            y[0] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[3];
            y[1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[4];
            y[2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 16:
        {
            y[0] = 0.33333333333333337 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
            y[1] = 0.33333333333333337 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
            y[2] = 0.33333333333333337 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 17:
        {
            y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
            y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
            y[2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 18:
        {
            y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[9];
            y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[10];
            y[2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 19:
        {
            y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6];
            y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7];
            y[2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[3];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = -5.551115123125783e-17 * coordinate_dofs[0] + 0.6666666666666667 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
    y[1] = -5.551115123125783e-17 * coordinate_dofs[1] + 0.6666666666666667 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
    y[2] = -5.551115123125783e-17 * coordinate_dofs[2] + 0.6666666666666667 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = 0.33333333333333337 * coordinate_dofs[6] + 0.6666666666666666 * coordinate_dofs[9];
    y[1] = 0.33333333333333337 * coordinate_dofs[7] + 0.6666666666666666 * coordinate_dofs[10];
    y[2] = 0.33333333333333337 * coordinate_dofs[8] + 0.6666666666666666 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
    y[0] = -5.551115123125783e-17 * coordinate_dofs[0] + 0.6666666666666667 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[9];
    y[1] = -5.551115123125783e-17 * coordinate_dofs[1] + 0.6666666666666667 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[10];
    y[2] = -5.551115123125783e-17 * coordinate_dofs[2] + 0.6666666666666667 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[6] = vals[0];
    y[0] = 0.33333333333333337 * coordinate_dofs[3] + 0.6666666666666666 * coordinate_dofs[9];
    y[1] = 0.33333333333333337 * coordinate_dofs[4] + 0.6666666666666666 * coordinate_dofs[10];
    y[2] = 0.33333333333333337 * coordinate_dofs[5] + 0.6666666666666666 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[7] = vals[0];
    y[0] = -5.551115123125783e-17 * coordinate_dofs[0] + 0.6666666666666667 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6];
    y[1] = -5.551115123125783e-17 * coordinate_dofs[1] + 0.6666666666666667 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7];
    y[2] = -5.551115123125783e-17 * coordinate_dofs[2] + 0.6666666666666667 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[8] = vals[0];
    y[0] = 0.33333333333333337 * coordinate_dofs[3] + 0.6666666666666666 * coordinate_dofs[6];
    y[1] = 0.33333333333333337 * coordinate_dofs[4] + 0.6666666666666666 * coordinate_dofs[7];
    y[2] = 0.33333333333333337 * coordinate_dofs[5] + 0.6666666666666666 * coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[9] = vals[0];
    y[0] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[9];
    y[1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[10];
    y[2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[10] = vals[0];
    y[0] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[9];
    y[1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[10];
    y[2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[11] = vals[0];
    y[0] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[6];
    y[1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[7];
    y[2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[12] = vals[0];
    y[0] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[6];
    y[1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[7];
    y[2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[13] = vals[0];
    y[0] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3];
    y[1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4];
    y[2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[14] = vals[0];
    y[0] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[3];
    y[1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[4];
    y[2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[15] = vals[0];
    y[0] = 0.33333333333333337 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
    y[1] = 0.33333333333333337 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
    y[2] = 0.33333333333333337 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[16] = vals[0];
    y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
    y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
    y[2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[17] = vals[0];
    y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[9];
    y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[10];
    y[2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[18] = vals[0];
    y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6];
    y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7];
    y[2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[19] = vals[0];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
    vertex_values[3] = dof_values[3];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[3] = coordinate_dofs[3];
    dof_coordinates[3 + 1] = coordinate_dofs[4];
    dof_coordinates[3 + 2] = coordinate_dofs[5];
    dof_coordinates[3 * 2] = coordinate_dofs[6];
    dof_coordinates[3 * 2 + 1] = coordinate_dofs[7];
    dof_coordinates[3 * 2 + 2] = coordinate_dofs[8];
    dof_coordinates[3 * 3] = coordinate_dofs[9];
    dof_coordinates[3 * 3 + 1] = coordinate_dofs[10];
    dof_coordinates[3 * 3 + 2] = coordinate_dofs[11];
    dof_coordinates[3 * 4] = 0.6666666666666667 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
    dof_coordinates[3 * 4 + 1] = 0.6666666666666667 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
    dof_coordinates[3 * 4 + 2] = 0.6666666666666667 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
    dof_coordinates[3 * 5] = 0.33333333333333337 * coordinate_dofs[6] + 0.6666666666666666 * coordinate_dofs[9];
    dof_coordinates[3 * 5 + 1] = 0.33333333333333337 * coordinate_dofs[7] + 0.6666666666666666 * coordinate_dofs[10];
    dof_coordinates[3 * 5 + 2] = 0.33333333333333337 * coordinate_dofs[8] + 0.6666666666666666 * coordinate_dofs[11];
    dof_coordinates[3 * 6] = 0.6666666666666667 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[9];
    dof_coordinates[3 * 6 + 1] = 0.6666666666666667 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[10];
    dof_coordinates[3 * 6 + 2] = 0.6666666666666667 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[11];
    dof_coordinates[3 * 7] = 0.33333333333333337 * coordinate_dofs[3] + 0.6666666666666666 * coordinate_dofs[9];
    dof_coordinates[3 * 7 + 1] = 0.33333333333333337 * coordinate_dofs[4] + 0.6666666666666666 * coordinate_dofs[10];
    dof_coordinates[3 * 7 + 2] = 0.33333333333333337 * coordinate_dofs[5] + 0.6666666666666666 * coordinate_dofs[11];
    dof_coordinates[3 * 8] = 0.6666666666666667 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6];
    dof_coordinates[3 * 8 + 1] = 0.6666666666666667 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7];
    dof_coordinates[3 * 8 + 2] = 0.6666666666666667 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8];
    dof_coordinates[3 * 9] = 0.33333333333333337 * coordinate_dofs[3] + 0.6666666666666666 * coordinate_dofs[6];
    dof_coordinates[3 * 9 + 1] = 0.33333333333333337 * coordinate_dofs[4] + 0.6666666666666666 * coordinate_dofs[7];
    dof_coordinates[3 * 9 + 2] = 0.33333333333333337 * coordinate_dofs[5] + 0.6666666666666666 * coordinate_dofs[8];
    dof_coordinates[3 * 10] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[9];
    dof_coordinates[3 * 10 + 1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[10];
    dof_coordinates[3 * 10 + 2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[11];
    dof_coordinates[3 * 11] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[9];
    dof_coordinates[3 * 11 + 1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[10];
    dof_coordinates[3 * 11 + 2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[11];
    dof_coordinates[3 * 12] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[6];
    dof_coordinates[3 * 12 + 1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[7];
    dof_coordinates[3 * 12 + 2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[8];
    dof_coordinates[3 * 13] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[6];
    dof_coordinates[3 * 13 + 1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[7];
    dof_coordinates[3 * 13 + 2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[8];
    dof_coordinates[3 * 14] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3];
    dof_coordinates[3 * 14 + 1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4];
    dof_coordinates[3 * 14 + 2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5];
    dof_coordinates[3 * 15] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[3];
    dof_coordinates[3 * 15 + 1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[4];
    dof_coordinates[3 * 15 + 2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[5];
    dof_coordinates[3 * 16] = 0.33333333333333337 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
    dof_coordinates[3 * 16 + 1] = 0.33333333333333337 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
    dof_coordinates[3 * 16 + 2] = 0.33333333333333337 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
    dof_coordinates[3 * 17] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
    dof_coordinates[3 * 17 + 1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
    dof_coordinates[3 * 17 + 2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
    dof_coordinates[3 * 18] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[9];
    dof_coordinates[3 * 18 + 1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[10];
    dof_coordinates[3 * 18 + 2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[11];
    dof_coordinates[3 * 19] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6];
    dof_coordinates[3 * 19 + 1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7];
    dof_coordinates[3 * 19 + 2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8];
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    static const double dof_X[60] = { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.6666666666666667, 0.3333333333333333, 0.0, 0.33333333333333337, 0.6666666666666666, 0.6666666666666667, 0.0, 0.3333333333333333, 0.33333333333333337, 0.0, 0.6666666666666666, 0.6666666666666667, 0.3333333333333333, 0.0, 0.33333333333333337, 0.6666666666666666, 0.0, 0.0, 0.0, 0.3333333333333333, 0.0, 0.0, 0.6666666666666666, 0.0, 0.3333333333333333, 0.0, 0.0, 0.6666666666666666, 0.0, 0.3333333333333333, 0.0, 0.0, 0.6666666666666666, 0.0, 0.0, 0.33333333333333337, 0.3333333333333333, 0.3333333333333333, 0.0, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.0, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.0 };
    std::copy_n(dof_X, 60, reference_dof_coordinates);
  }

  std::size_t num_sub_elements() const final override
  {
    return 0;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::finite_element * create() const final override
  {
    return new vp3_3_finite_element_0();
  }

};


class vp3_3_finite_element_1: public ufc::finite_element
{
public:

  vp3_3_finite_element_1() : ufc::finite_element()
  {
    // Do nothing
  }

  ~vp3_3_finite_element_1() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "VectorElement(FiniteElement('Lagrange', tetrahedron, 3), dim=3)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::tetrahedron;
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t geometric_dimension() const final override
  {
    return 3;
  }

  std::size_t space_dimension() const final override
  {
    return 60;
  }

  std::size_t value_rank() const final override
  {
    return 1;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    static const int return_values[1] = { 3 };
    if (i >= 1)
        return 1;
    return return_values[i];
  }

  std::size_t value_size() const final override
  {
    return 3;
  }

  std::size_t reference_value_rank() const final override
  {
    return 1;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    static const int return_values[1] = { 3 };
    if (i >= 1)
        return 1;
    return return_values[i];
  }

  std::size_t reference_value_size() const final override
  {
    return 3;
  }

  std::size_t degree() const final override
  {
    return 3;
  }

  const char * family() const final override
  {
    return "Lagrange";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    static const double coefficients0[1][20] = { { 0.028867513459481377, 0.01304101327393252, 0.007529232524210424, 0.005323971374999493, 0.01829812636778498, 0.014173667737846016, 0.011572751247156891, 0.008183170883849705, 0.006681531047810616, 0.004724555912615332, -0.028347335475692043, -0.023957871187497756, -0.020748125068968316, -0.01855768722395226, -0.016071428571428573, -0.013122266479195604, -0.010714285714285692, -0.009278843611976116, -0.007576144084141579, -0.00535714285714285 } };
    static const double coefficients1[1][20] = { { 0.028867513459481454, -0.01304101327393248, 0.007529232524210435, 0.005323971374999493, 0.018298126367784984, -0.014173667737846004, -0.011572751247156891, 0.008183170883849717, 0.0066815310478106045, 0.004724555912615337, 0.028347335475692036, -0.02395787118749775, -0.020748125068968302, 0.01855768722395226, 0.01607142857142858, 0.013122266479195593, -0.010714285714285723, -0.00927884361197613, -0.00757614408414158, -0.005357142857142854 } };
    static const double coefficients2[1][20] = { { 0.028867513459481187, 0.0, -0.015058465048420894, 0.005323971374999505, 0.0, 0.0, 0.0, 0.02454951265154915, -0.01336306209562124, 0.004724555912615356, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.042857142857142844, -0.027836530835928387, 0.015152288168283172, -0.005357142857142867 } };
    static const double coefficients3[1][20] = { { 0.028867513459481315, 0.0, 0.0, -0.01597191412499849, 0.0, 0.0, 0.0, 0.0, 0.0, 0.028347335475692043, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.053571428571428575 } };
    static const double coefficients4[1][20] = { { 0.0, 0.0, 0.11293848786315637, -0.06388765649999399, 0.0, 0.0, 0.0, 0.0736485379546474, 0.026726124191242418, -0.023622779563076728, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06495190528383286, -0.06060915267313264, 0.026785714285714298 } };
    static const double coefficients5[1][20] = { { 0.0, 0.0, -0.022587697572631307, 0.12777531299998807, 0.0, 0.0, 0.0, 0.0, 0.06681531047810609, 0.0472455591261534, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07576144084141581, -0.05357142857142859 } };
    static const double coefficients6[1][20] = { { 0.0, 0.0978075995544939, -0.05646924393157821, -0.06388765649999403, 0.054894379103355, -0.04252100321353805, 0.02314550249431374, 0.02454951265154913, -0.013363062095621204, -0.023622779563076717, 0.0, 0.0, 0.04841229182759272, 0.0, -0.03749999999999999, -0.052489065916782374, 0.0, 0.02165063509461096, 0.030304576336566334, 0.026785714285714305 } };
    static const double coefficients7[1][20] = { { 0.0, -0.019561519910898818, 0.011293848786315647, 0.12777531299998807, 0.0, 0.0, 0.05786375623578448, 0.0, -0.03340765523905306, 0.04724555912615341, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06561133239597798, 0.0, 0.0, -0.03788072042070791, -0.053571428571428596 } };
    static const double coefficients8[1][20] = { { 0.0, 0.09780759955449396, -0.07905694150420949, -0.031943828249996996, 0.05489437910335498, 0.01417366773784601, -0.046291004988627586, -0.02454951265154915, 0.013363062095621228, 0.023622779563076703, 0.0, 0.04791574237499548, -0.006916041689656098, -0.0618589574131742, -0.016071428571428566, 0.008748177652797052, 0.04285714285714287, 0.015464739353293547, 0.0, -0.005357142857142856 } };
    static const double coefficients9[1][20] = { { 0.0, -0.019561519910898842, 0.12423233664947204, -0.031943828249996996, 0.0, 0.05669467095138407, -0.011572751247156909, 0.024549512651549147, -0.046770717334674285, 0.023622779563076696, 0.0, 0.0, 0.0, 0.061858957413174195, -0.02142857142857144, 0.00437408882639853, -0.0642857142857143, 0.009278843611976128, 0.007576144084141588, -0.005357142857142859 } };
    static const double coefficients10[1][20] = { { 0.0, -0.09780759955449397, -0.05646924393157825, -0.06388765649999402, 0.054894379103355005, 0.04252100321353805, -0.0231455024943138, 0.024549512651549157, -0.013363062095621242, -0.023622779563076693, 0.0, 0.0, 0.04841229182759272, 0.0, 0.03749999999999999, 0.05248906591678238, 0.0, 0.02165063509461097, 0.030304576336566337, 0.026785714285714288 } };
    static const double coefficients11[1][20] = { { 0.0, 0.019561519910898825, 0.011293848786315641, 0.12777531299998804, 0.0, 0.0, -0.057863756235784464, 0.0, -0.03340765523905305, 0.047245559126153386, 0.0, 0.0, 0.0, 0.0, 0.0, -0.06561133239597798, 0.0, 0.0, -0.037880720420707906, -0.05357142857142858 } };
    static const double coefficients12[1][20] = { { 0.0, -0.09780759955449392, -0.07905694150420953, -0.031943828249996975, 0.054894379103355005, -0.014173667737845985, 0.04629100498862756, -0.02454951265154914, 0.013363062095621214, 0.02362277956307672, 0.0, 0.04791574237499549, -0.006916041689656096, 0.0618589574131742, 0.016071428571428563, -0.008748177652797059, 0.04285714285714286, 0.015464739353293537, 0.0, -0.005357142857142868 } };
    static const double coefficients13[1][20] = { { 0.0, 0.019561519910898776, 0.12423233664947204, -0.031943828249996996, 0.0, -0.0566946709513841, 0.0115727512471569, 0.024549512651549157, -0.04677071733467428, 0.023622779563076696, 0.0, 0.0, 0.0, -0.0618589574131742, 0.021428571428571446, -0.004374088826398529, -0.0642857142857143, 0.00927884361197614, 0.007576144084141581, -0.005357142857142856 } };
    static const double coefficients14[1][20] = { { 0.0, -0.11736911946539277, -0.04517539514526254, -0.03194382824999702, -0.01829812636778497, 0.04252100321353806, 0.03471825374147069, 0.040915854419248575, 0.03340765523905304, 0.023622779563076717, 0.08504200642707613, 0.023957871187497745, 0.02074812506896832, -0.006185895741317411, -0.005357142857142858, -0.004374088826398521, -0.01071428571428572, -0.009278843611976124, -0.007576144084141591, -0.00535714285714286 } };
    static const double coefficients15[1][20] = { { 0.0, 0.11736911946539276, -0.04517539514526255, -0.03194382824999698, -0.018298126367784988, -0.04252100321353805, -0.03471825374147069, 0.04091585441924858, 0.033407655239053057, 0.023622779563076693, -0.08504200642707613, 0.02395787118749776, 0.02074812506896831, 0.006185895741317411, 0.005357142857142859, 0.004374088826398524, -0.01071428571428572, -0.009278843611976131, -0.007576144084141586, -0.0053571428571428555 } };
    static const double coefficients16[1][20] = { { 0.2598076211353317, 0.11736911946539266, 0.06776309271789384, 0.0479157423749955, 0.0, 0.0850420064270761, 0.06943650748294135, -0.07364853795464742, 0.04008918628686366, -0.09921567416492216, 0.0, 0.0, 0.0, 0.0, 0.07500000000000001, -0.026244532958391176, 0.0, -0.06495190528383289, -0.015152288168283167, 0.02678571428571429 } };
    static const double coefficients17[1][20] = { { 0.2598076211353316, -0.11736911946539272, 0.0677630927178939, 0.047915742374995435, 0.0, -0.08504200642707613, -0.06943650748294138, -0.0736485379546474, 0.04008918628686368, -0.09921567416492216, 0.0, 0.0, 0.0, 0.0, -0.07500000000000001, 0.02624453295839119, 0.0, -0.06495190528383286, -0.015152288168283169, 0.02678571428571431 } };
    static const double coefficients18[1][20] = { { 0.2598076211353315, 0.0, -0.1355261854357876, 0.04791574237499552, -0.10978875820671, 0.0, 0.0, 0.024549512651549112, -0.08017837257372729, -0.09921567416492215, 0.0, 0.0, -0.09682458365518544, 0.0, 0.0, 0.0, 0.0, 0.02165063509461095, 0.03030457633656631, 0.026785714285714277 } };
    static const double coefficients19[1][20] = { { 0.2598076211353317, 0.0, 0.0, -0.14374722712498647, -0.10978875820671001, 0.0, 0.0, -0.12274756325774572, 0.0, 0.042521003213538064, 0.0, -0.095831484749991, 0.013832083379312196, 0.0, 0.0, 0.0, 0.042857142857142864, 0.015464739353293549, 0.0, -0.005357142857142852 } };
    for (std::size_t k = 0; k < num_points * 60 * 3; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[3] = { 2.0 * X[ip * 3] - 1.0, 2.0 * X[ip * 3 + 1] - 1.0, 2.0 * X[ip * 3 + 2] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues3[20] = {};
        basisvalues3[0] = 1.0;
        const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
        basisvalues3[1] = tmp1_3;
        const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
        basisvalues3[4] = 1.5 * tmp1_3 * basisvalues3[1] - 0.5 * tmp2_3 * basisvalues3[0];
        basisvalues3[10] = 1.6666666666666667 * tmp1_3 * basisvalues3[4] - 0.6666666666666666 * tmp2_3 * basisvalues3[1];
        basisvalues3[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues3[0];
        basisvalues3[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues3[1];
        basisvalues3[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues3[4];
        const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
        const double tmp4_3 = 0.5 * (1.0 - Y[2]);
        const double tmp5_3 = tmp4_3 * tmp4_3;
        basisvalues3[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues3[2] - 0.5555555555555556 * tmp5_3 * basisvalues3[0];
        basisvalues3[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues3[7] - 0.7 * tmp5_3 * basisvalues3[2];
        basisvalues3[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues3[5] - 0.56 * tmp5_3 * basisvalues3[1];
        basisvalues3[3] = (2.0 * Y[2] + 1.0) * basisvalues3[0];
        basisvalues3[8] = (3.0 * Y[2] + 2.0) * basisvalues3[2];
        basisvalues3[17] = (4.0 * Y[2] + 3.0) * basisvalues3[7];
        basisvalues3[6] = (3.0 * Y[2] + 2.0) * basisvalues3[1];
        basisvalues3[14] = (4.0 * Y[2] + 3.0) * basisvalues3[5];
        basisvalues3[12] = (4.0 * Y[2] + 3.0) * basisvalues3[4];
        basisvalues3[9] = (0.3125 + 1.875 * Y[2]) * basisvalues3[3] - 0.5625 * basisvalues3[0];
        basisvalues3[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues3[9] - 0.7111111111111111 * basisvalues3[3];
        basisvalues3[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues3[8] - 0.5555555555555556 * basisvalues3[2];
        basisvalues3[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues3[6] - 0.5555555555555556 * basisvalues3[1];
        basisvalues3[0] *= std::sqrt(0.75);
        basisvalues3[3] *= std::sqrt(1.25);
        basisvalues3[9] *= std::sqrt(1.75);
        basisvalues3[19] *= std::sqrt(2.25);
        basisvalues3[2] *= std::sqrt(2.5);
        basisvalues3[8] *= std::sqrt(3.5);
        basisvalues3[18] *= std::sqrt(4.5);
        basisvalues3[7] *= std::sqrt(5.25);
        basisvalues3[17] *= std::sqrt(6.75);
        basisvalues3[16] *= std::sqrt(9.0);
        basisvalues3[1] *= std::sqrt(7.5);
        basisvalues3[6] *= std::sqrt(10.5);
        basisvalues3[15] *= std::sqrt(13.5);
        basisvalues3[5] *= std::sqrt(15.75);
        basisvalues3[14] *= std::sqrt(20.25);
        basisvalues3[13] *= std::sqrt(27.0);
        basisvalues3[4] *= std::sqrt(26.25);
        basisvalues3[12] *= std::sqrt(33.75);
        basisvalues3[11] *= std::sqrt(45.0);
        basisvalues3[10] *= std::sqrt(63.0);
        // Accumulate products of coefficients and basisvalues
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip] += coefficients0[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3] += coefficients1[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 2] += coefficients2[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 3] += coefficients3[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 4] += coefficients4[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 5] += coefficients5[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 6] += coefficients6[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 7] += coefficients7[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 8] += coefficients8[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 9] += coefficients9[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 10] += coefficients10[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 11] += coefficients11[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 12] += coefficients12[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 13] += coefficients13[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 14] += coefficients14[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 15] += coefficients15[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 16] += coefficients16[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 17] += coefficients17[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 18] += coefficients18[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 19] += coefficients19[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 20 + 1] += coefficients0[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 21 + 1] += coefficients1[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 22 + 1] += coefficients2[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 23 + 1] += coefficients3[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 24 + 1] += coefficients4[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 25 + 1] += coefficients5[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 26 + 1] += coefficients6[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 27 + 1] += coefficients7[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 28 + 1] += coefficients8[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 29 + 1] += coefficients9[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 30 + 1] += coefficients10[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 31 + 1] += coefficients11[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 32 + 1] += coefficients12[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 33 + 1] += coefficients13[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 34 + 1] += coefficients14[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 35 + 1] += coefficients15[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 36 + 1] += coefficients16[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 37 + 1] += coefficients17[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 38 + 1] += coefficients18[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 39 + 1] += coefficients19[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 40 + 2] += coefficients0[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 41 + 2] += coefficients1[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 42 + 2] += coefficients2[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 43 + 2] += coefficients3[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 44 + 2] += coefficients4[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 45 + 2] += coefficients5[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 46 + 2] += coefficients6[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 47 + 2] += coefficients7[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 48 + 2] += coefficients8[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 49 + 2] += coefficients9[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 50 + 2] += coefficients10[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 51 + 2] += coefficients11[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 52 + 2] += coefficients12[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 53 + 2] += coefficients13[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 54 + 2] += coefficients14[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 55 + 2] += coefficients15[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 56 + 2] += coefficients16[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 57 + 2] += coefficients17[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 58 + 2] += coefficients18[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 59 + 2] += coefficients19[0][r] * basisvalues3[r];
    }
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(3, order);
    std::fill_n(reference_values, num_points * 60 * num_derivatives * 3, 0.0);
    if (order > 3)
        return;
    // Tables of derivatives of the polynomial base (transpose).
    alignas(32) static const double dmats0[3][20][20] =
        { { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 6.324555320336762, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 11.224972160321832, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 4.582575694955858, 0.0, 8.366600265340768, -1.18321595661993, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 3.7416573867739498, 0.0, 0.0, 8.694826047713665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 5.499090833947011, 0.0, -3.346640106136308, -2.3664319132398495, 15.491933384829666, 0.0, 0.0, 0.6928203230275537, 0.5656854249492373, 0.39999999999999886, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 4.8989794855663495, 0.0, 0.0, 0.0, 14.198591479439074, -0.828078671210824, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 4.2426406871192786, 0.0, 0.0, 0.0, 0.0, 14.342743312012727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 3.6000000000000134, 0.0, 8.763560920082679, -1.549193338482974, 0.0, 0.0, 0.0, 9.524704719832533, -1.4813121596360834, 0.26186146828319146, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 3.1176914536239795, 0.0, 3.162277660168379, 4.919349550499535, 0.0, 0.0, 0.0, 0.0, 10.690449676496982, -2.418972627259056, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.5455844122715585, 0.0, 0.0, 7.66811580507228, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 5.477225575051666, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.291287847477958, 7.245688373094727, 4.1833001326703805, -0.5916079783099749, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.8708286933869749, 0.0, 0.0, 4.3474130238568325, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { -2.6457513110646285, 0.0, 9.66091783079296, 0.6831300510639867, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 3.2403703492039373, 0.0, 0.0, 7.529940238806683, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.3237900077244578, 2.449489742783181, 2.828427124746206, -1.0, 9.165151389911685, 7.099295739719534, -0.41403933560541256, -2.049390153191928, -0.47809144373376167, 0.16903085094570522, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.0124611797498098, 2.1213203435596397, -0.40824829046386346, 3.1754264805429355, 0.0, 0.0, 7.171371656006364, 0.0, -1.380131118684709, -1.5614401167176546, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.80000000000001, -5.692099788303113, 4.381780460041349, -0.7745966692414907, 0.0, 10.998181667893988, 0.9621404708847333, 4.762352359916273, -0.7406560798180437, 0.1309307341415961, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.5588457268119917, 2.7386127875258306, 1.5811388300841904, 2.4596747752497663, 0.0, 0.0, 9.258200997725515, 0.0, 5.345224838248491, -1.2094863136295253, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.2727922061357735, 0.0, 0.0, 3.8340579025361397, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 5.196152422706658, 0.0, -3.162277660168412, -2.2360679774998027, 0.0, 0.0, 0.0, 13.747727084867515, 0.5345224838248532, 0.3779644730092276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { -1.7999999999999887, 0.0, 3.6514837167010707, -2.840187787218764, 0.0, 0.0, 0.0, 0.0, 12.344267996967348, 1.396594497510348, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.2045407685048555, 0.0, 0.0, 6.640783086353614, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.8257418583505551, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.291287847477918, 1.4491376746189435, 4.183300132670375, -0.5916079783099615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.870828693387008, 7.099295739719542, 0.0, 4.347413023856828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.3228756555323076, 0.0, 3.864367132317193, -0.3415650255319911, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.080123449734629, 0.0, 7.099295739719546, 2.509980079602214, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { -3.8188130791299173, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.323790007724463, 2.4494897427831743, 2.828427124746207, -1.0, 1.309307341415954, 7.099295739719537, -0.4140393356054117, -2.049390153191927, -0.4780914437337623, 0.16903085094570483, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.0124611797498075, 2.121320343559647, -0.40824829046386685, 3.1754264805429337, 9.071147352221455, 0.0, 7.171371656006362, 0.0, -1.3801311186847083, -1.5614401167176528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.800000000000009, 0.6324555320336753, 4.381780460041344, -0.7745966692414884, 0.0, 3.142337619398289, -0.10690449676496958, 4.76235235991627, -0.7406560798180428, 0.13093073414159664, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.5588457268119886, 0.5477225575051662, 1.5811388300841966, 2.4596747752497654, 0.0, 9.071147352221454, 1.851640199545103, 0.0, 5.345224838248489, -1.209486313629527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.272792206135779, -6.260990336999449, 0.0, 3.8340579025361414, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.039230484541329, 0.0, 3.162277660168365, -0.447213595499961, 0.0, 0.0, 0.0, 5.891883036371791, -0.5345224838248448, 0.07559289460184586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.89999999999999, 0.0, 1.4605934866803583, 1.4200938936093819, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786952, -0.6982972487551772, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.734846922834953, 0.0, -6.260990336999394, 2.2135943621178726, 0.0, 0.0, 0.0, 0.0, 10.583005244258366, 2.993325909419166, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 5.715767664977288, 0.0, 0.0, -4.695742752749563, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110028, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } } };
    static const double coefficients0[1][20] = { { 0.028867513459481377, 0.01304101327393252, 0.007529232524210424, 0.005323971374999493, 0.01829812636778498, 0.014173667737846016, 0.011572751247156891, 0.008183170883849705, 0.006681531047810616, 0.004724555912615332, -0.028347335475692043, -0.023957871187497756, -0.020748125068968316, -0.01855768722395226, -0.016071428571428573, -0.013122266479195604, -0.010714285714285692, -0.009278843611976116, -0.007576144084141579, -0.00535714285714285 } };
    static const double coefficients1[1][20] = { { 0.028867513459481454, -0.01304101327393248, 0.007529232524210435, 0.005323971374999493, 0.018298126367784984, -0.014173667737846004, -0.011572751247156891, 0.008183170883849717, 0.0066815310478106045, 0.004724555912615337, 0.028347335475692036, -0.02395787118749775, -0.020748125068968302, 0.01855768722395226, 0.01607142857142858, 0.013122266479195593, -0.010714285714285723, -0.00927884361197613, -0.00757614408414158, -0.005357142857142854 } };
    static const double coefficients2[1][20] = { { 0.028867513459481187, 0.0, -0.015058465048420894, 0.005323971374999505, 0.0, 0.0, 0.0, 0.02454951265154915, -0.01336306209562124, 0.004724555912615356, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.042857142857142844, -0.027836530835928387, 0.015152288168283172, -0.005357142857142867 } };
    static const double coefficients3[1][20] = { { 0.028867513459481315, 0.0, 0.0, -0.01597191412499849, 0.0, 0.0, 0.0, 0.0, 0.0, 0.028347335475692043, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.053571428571428575 } };
    static const double coefficients4[1][20] = { { 0.0, 0.0, 0.11293848786315637, -0.06388765649999399, 0.0, 0.0, 0.0, 0.0736485379546474, 0.026726124191242418, -0.023622779563076728, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06495190528383286, -0.06060915267313264, 0.026785714285714298 } };
    static const double coefficients5[1][20] = { { 0.0, 0.0, -0.022587697572631307, 0.12777531299998807, 0.0, 0.0, 0.0, 0.0, 0.06681531047810609, 0.0472455591261534, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07576144084141581, -0.05357142857142859 } };
    static const double coefficients6[1][20] = { { 0.0, 0.0978075995544939, -0.05646924393157821, -0.06388765649999403, 0.054894379103355, -0.04252100321353805, 0.02314550249431374, 0.02454951265154913, -0.013363062095621204, -0.023622779563076717, 0.0, 0.0, 0.04841229182759272, 0.0, -0.03749999999999999, -0.052489065916782374, 0.0, 0.02165063509461096, 0.030304576336566334, 0.026785714285714305 } };
    static const double coefficients7[1][20] = { { 0.0, -0.019561519910898818, 0.011293848786315647, 0.12777531299998807, 0.0, 0.0, 0.05786375623578448, 0.0, -0.03340765523905306, 0.04724555912615341, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06561133239597798, 0.0, 0.0, -0.03788072042070791, -0.053571428571428596 } };
    static const double coefficients8[1][20] = { { 0.0, 0.09780759955449396, -0.07905694150420949, -0.031943828249996996, 0.05489437910335498, 0.01417366773784601, -0.046291004988627586, -0.02454951265154915, 0.013363062095621228, 0.023622779563076703, 0.0, 0.04791574237499548, -0.006916041689656098, -0.0618589574131742, -0.016071428571428566, 0.008748177652797052, 0.04285714285714287, 0.015464739353293547, 0.0, -0.005357142857142856 } };
    static const double coefficients9[1][20] = { { 0.0, -0.019561519910898842, 0.12423233664947204, -0.031943828249996996, 0.0, 0.05669467095138407, -0.011572751247156909, 0.024549512651549147, -0.046770717334674285, 0.023622779563076696, 0.0, 0.0, 0.0, 0.061858957413174195, -0.02142857142857144, 0.00437408882639853, -0.0642857142857143, 0.009278843611976128, 0.007576144084141588, -0.005357142857142859 } };
    static const double coefficients10[1][20] = { { 0.0, -0.09780759955449397, -0.05646924393157825, -0.06388765649999402, 0.054894379103355005, 0.04252100321353805, -0.0231455024943138, 0.024549512651549157, -0.013363062095621242, -0.023622779563076693, 0.0, 0.0, 0.04841229182759272, 0.0, 0.03749999999999999, 0.05248906591678238, 0.0, 0.02165063509461097, 0.030304576336566337, 0.026785714285714288 } };
    static const double coefficients11[1][20] = { { 0.0, 0.019561519910898825, 0.011293848786315641, 0.12777531299998804, 0.0, 0.0, -0.057863756235784464, 0.0, -0.03340765523905305, 0.047245559126153386, 0.0, 0.0, 0.0, 0.0, 0.0, -0.06561133239597798, 0.0, 0.0, -0.037880720420707906, -0.05357142857142858 } };
    static const double coefficients12[1][20] = { { 0.0, -0.09780759955449392, -0.07905694150420953, -0.031943828249996975, 0.054894379103355005, -0.014173667737845985, 0.04629100498862756, -0.02454951265154914, 0.013363062095621214, 0.02362277956307672, 0.0, 0.04791574237499549, -0.006916041689656096, 0.0618589574131742, 0.016071428571428563, -0.008748177652797059, 0.04285714285714286, 0.015464739353293537, 0.0, -0.005357142857142868 } };
    static const double coefficients13[1][20] = { { 0.0, 0.019561519910898776, 0.12423233664947204, -0.031943828249996996, 0.0, -0.0566946709513841, 0.0115727512471569, 0.024549512651549157, -0.04677071733467428, 0.023622779563076696, 0.0, 0.0, 0.0, -0.0618589574131742, 0.021428571428571446, -0.004374088826398529, -0.0642857142857143, 0.00927884361197614, 0.007576144084141581, -0.005357142857142856 } };
    static const double coefficients14[1][20] = { { 0.0, -0.11736911946539277, -0.04517539514526254, -0.03194382824999702, -0.01829812636778497, 0.04252100321353806, 0.03471825374147069, 0.040915854419248575, 0.03340765523905304, 0.023622779563076717, 0.08504200642707613, 0.023957871187497745, 0.02074812506896832, -0.006185895741317411, -0.005357142857142858, -0.004374088826398521, -0.01071428571428572, -0.009278843611976124, -0.007576144084141591, -0.00535714285714286 } };
    static const double coefficients15[1][20] = { { 0.0, 0.11736911946539276, -0.04517539514526255, -0.03194382824999698, -0.018298126367784988, -0.04252100321353805, -0.03471825374147069, 0.04091585441924858, 0.033407655239053057, 0.023622779563076693, -0.08504200642707613, 0.02395787118749776, 0.02074812506896831, 0.006185895741317411, 0.005357142857142859, 0.004374088826398524, -0.01071428571428572, -0.009278843611976131, -0.007576144084141586, -0.0053571428571428555 } };
    static const double coefficients16[1][20] = { { 0.2598076211353317, 0.11736911946539266, 0.06776309271789384, 0.0479157423749955, 0.0, 0.0850420064270761, 0.06943650748294135, -0.07364853795464742, 0.04008918628686366, -0.09921567416492216, 0.0, 0.0, 0.0, 0.0, 0.07500000000000001, -0.026244532958391176, 0.0, -0.06495190528383289, -0.015152288168283167, 0.02678571428571429 } };
    static const double coefficients17[1][20] = { { 0.2598076211353316, -0.11736911946539272, 0.0677630927178939, 0.047915742374995435, 0.0, -0.08504200642707613, -0.06943650748294138, -0.0736485379546474, 0.04008918628686368, -0.09921567416492216, 0.0, 0.0, 0.0, 0.0, -0.07500000000000001, 0.02624453295839119, 0.0, -0.06495190528383286, -0.015152288168283169, 0.02678571428571431 } };
    static const double coefficients18[1][20] = { { 0.2598076211353315, 0.0, -0.1355261854357876, 0.04791574237499552, -0.10978875820671, 0.0, 0.0, 0.024549512651549112, -0.08017837257372729, -0.09921567416492215, 0.0, 0.0, -0.09682458365518544, 0.0, 0.0, 0.0, 0.0, 0.02165063509461095, 0.03030457633656631, 0.026785714285714277 } };
    static const double coefficients19[1][20] = { { 0.2598076211353317, 0.0, 0.0, -0.14374722712498647, -0.10978875820671001, 0.0, 0.0, -0.12274756325774572, 0.0, 0.042521003213538064, 0.0, -0.095831484749991, 0.013832083379312196, 0.0, 0.0, 0.0, 0.042857142857142864, 0.015464739353293549, 0.0, -0.005357142857142852 } };
    const std::size_t reference_offset[60] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2 };
    const std::size_t num_components[60] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    // Precomputed combinations
    const std::size_t combinations[3][27][3] =
        { { { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 } },
          { { 0, 0, 0 },
            { 0, 1, 0 },
            { 0, 2, 0 },
            { 1, 0, 0 },
            { 1, 1, 0 },
            { 1, 2, 0 },
            { 2, 0, 0 },
            { 2, 1, 0 },
            { 2, 2, 0 },
            { 0, 0, 0 },
            { 0, 1, 0 },
            { 0, 2, 0 },
            { 1, 0, 0 },
            { 1, 1, 0 },
            { 1, 2, 0 },
            { 2, 0, 0 },
            { 2, 1, 0 },
            { 2, 2, 0 },
            { 0, 0, 0 },
            { 0, 1, 0 },
            { 0, 2, 0 },
            { 1, 0, 0 },
            { 1, 1, 0 },
            { 1, 2, 0 },
            { 2, 0, 0 },
            { 2, 1, 0 },
            { 2, 2, 0 } },
          { { 0, 0, 0 },
            { 0, 0, 1 },
            { 0, 0, 2 },
            { 0, 1, 0 },
            { 0, 1, 1 },
            { 0, 1, 2 },
            { 0, 2, 0 },
            { 0, 2, 1 },
            { 0, 2, 2 },
            { 1, 0, 0 },
            { 1, 0, 1 },
            { 1, 0, 2 },
            { 1, 1, 0 },
            { 1, 1, 1 },
            { 1, 1, 2 },
            { 1, 2, 0 },
            { 1, 2, 1 },
            { 1, 2, 2 },
            { 2, 0, 0 },
            { 2, 0, 1 },
            { 2, 0, 2 },
            { 2, 1, 0 },
            { 2, 1, 1 },
            { 2, 1, 2 },
            { 2, 2, 0 },
            { 2, 2, 1 },
            { 2, 2, 2 } } };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[3] = { 2.0 * X[ip * 3] - 1.0, 2.0 * X[ip * 3 + 1] - 1.0, 2.0 * X[ip * 3 + 2] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues3[20] = {};
        basisvalues3[0] = 1.0;
        const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
        basisvalues3[1] = tmp1_3;
        const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
        basisvalues3[4] = 1.5 * tmp1_3 * basisvalues3[1] - 0.5 * tmp2_3 * basisvalues3[0];
        basisvalues3[10] = 1.6666666666666667 * tmp1_3 * basisvalues3[4] - 0.6666666666666666 * tmp2_3 * basisvalues3[1];
        basisvalues3[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues3[0];
        basisvalues3[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues3[1];
        basisvalues3[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues3[4];
        const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
        const double tmp4_3 = 0.5 * (1.0 - Y[2]);
        const double tmp5_3 = tmp4_3 * tmp4_3;
        basisvalues3[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues3[2] - 0.5555555555555556 * tmp5_3 * basisvalues3[0];
        basisvalues3[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues3[7] - 0.7 * tmp5_3 * basisvalues3[2];
        basisvalues3[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues3[5] - 0.56 * tmp5_3 * basisvalues3[1];
        basisvalues3[3] = (2.0 * Y[2] + 1.0) * basisvalues3[0];
        basisvalues3[8] = (3.0 * Y[2] + 2.0) * basisvalues3[2];
        basisvalues3[17] = (4.0 * Y[2] + 3.0) * basisvalues3[7];
        basisvalues3[6] = (3.0 * Y[2] + 2.0) * basisvalues3[1];
        basisvalues3[14] = (4.0 * Y[2] + 3.0) * basisvalues3[5];
        basisvalues3[12] = (4.0 * Y[2] + 3.0) * basisvalues3[4];
        basisvalues3[9] = (0.3125 + 1.875 * Y[2]) * basisvalues3[3] - 0.5625 * basisvalues3[0];
        basisvalues3[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues3[9] - 0.7111111111111111 * basisvalues3[3];
        basisvalues3[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues3[8] - 0.5555555555555556 * basisvalues3[2];
        basisvalues3[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues3[6] - 0.5555555555555556 * basisvalues3[1];
        basisvalues3[0] *= std::sqrt(0.75);
        basisvalues3[3] *= std::sqrt(1.25);
        basisvalues3[9] *= std::sqrt(1.75);
        basisvalues3[19] *= std::sqrt(2.25);
        basisvalues3[2] *= std::sqrt(2.5);
        basisvalues3[8] *= std::sqrt(3.5);
        basisvalues3[18] *= std::sqrt(4.5);
        basisvalues3[7] *= std::sqrt(5.25);
        basisvalues3[17] *= std::sqrt(6.75);
        basisvalues3[16] *= std::sqrt(9.0);
        basisvalues3[1] *= std::sqrt(7.5);
        basisvalues3[6] *= std::sqrt(10.5);
        basisvalues3[15] *= std::sqrt(13.5);
        basisvalues3[5] *= std::sqrt(15.75);
        basisvalues3[14] *= std::sqrt(20.25);
        basisvalues3[13] *= std::sqrt(27.0);
        basisvalues3[4] *= std::sqrt(26.25);
        basisvalues3[12] *= std::sqrt(33.75);
        basisvalues3[11] *= std::sqrt(45.0);
        basisvalues3[10] *= std::sqrt(63.0);
        // Loop over all dofs
        for (std::size_t i = 0; i < 60; ++i)
        {
            double derivatives[27] = {};
            switch (i)
            {
            case 0:
                // Compute reference derivatives for dof 0.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 1:
                // Compute reference derivatives for dof 1.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 2:
                // Compute reference derivatives for dof 2.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 3:
                // Compute reference derivatives for dof 3.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients3[0][s] * aux[s];
                }
                break;
            case 4:
                // Compute reference derivatives for dof 4.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients4[0][s] * aux[s];
                }
                break;
            case 5:
                // Compute reference derivatives for dof 5.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients5[0][s] * aux[s];
                }
                break;
            case 6:
                // Compute reference derivatives for dof 6.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients6[0][s] * aux[s];
                }
                break;
            case 7:
                // Compute reference derivatives for dof 7.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients7[0][s] * aux[s];
                }
                break;
            case 8:
                // Compute reference derivatives for dof 8.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients8[0][s] * aux[s];
                }
                break;
            case 9:
                // Compute reference derivatives for dof 9.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients9[0][s] * aux[s];
                }
                break;
            case 10:
                // Compute reference derivatives for dof 10.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients10[0][s] * aux[s];
                }
                break;
            case 11:
                // Compute reference derivatives for dof 11.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients11[0][s] * aux[s];
                }
                break;
            case 12:
                // Compute reference derivatives for dof 12.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients12[0][s] * aux[s];
                }
                break;
            case 13:
                // Compute reference derivatives for dof 13.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients13[0][s] * aux[s];
                }
                break;
            case 14:
                // Compute reference derivatives for dof 14.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients14[0][s] * aux[s];
                }
                break;
            case 15:
                // Compute reference derivatives for dof 15.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients15[0][s] * aux[s];
                }
                break;
            case 16:
                // Compute reference derivatives for dof 16.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients16[0][s] * aux[s];
                }
                break;
            case 17:
                // Compute reference derivatives for dof 17.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients17[0][s] * aux[s];
                }
                break;
            case 18:
                // Compute reference derivatives for dof 18.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients18[0][s] * aux[s];
                }
                break;
            case 19:
                // Compute reference derivatives for dof 19.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients19[0][s] * aux[s];
                }
                break;
            case 20:
                // Compute reference derivatives for dof 20.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 21:
                // Compute reference derivatives for dof 21.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 22:
                // Compute reference derivatives for dof 22.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 23:
                // Compute reference derivatives for dof 23.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients3[0][s] * aux[s];
                }
                break;
            case 24:
                // Compute reference derivatives for dof 24.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients4[0][s] * aux[s];
                }
                break;
            case 25:
                // Compute reference derivatives for dof 25.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients5[0][s] * aux[s];
                }
                break;
            case 26:
                // Compute reference derivatives for dof 26.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients6[0][s] * aux[s];
                }
                break;
            case 27:
                // Compute reference derivatives for dof 27.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients7[0][s] * aux[s];
                }
                break;
            case 28:
                // Compute reference derivatives for dof 28.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients8[0][s] * aux[s];
                }
                break;
            case 29:
                // Compute reference derivatives for dof 29.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients9[0][s] * aux[s];
                }
                break;
            case 30:
                // Compute reference derivatives for dof 30.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients10[0][s] * aux[s];
                }
                break;
            case 31:
                // Compute reference derivatives for dof 31.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients11[0][s] * aux[s];
                }
                break;
            case 32:
                // Compute reference derivatives for dof 32.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients12[0][s] * aux[s];
                }
                break;
            case 33:
                // Compute reference derivatives for dof 33.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients13[0][s] * aux[s];
                }
                break;
            case 34:
                // Compute reference derivatives for dof 34.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients14[0][s] * aux[s];
                }
                break;
            case 35:
                // Compute reference derivatives for dof 35.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients15[0][s] * aux[s];
                }
                break;
            case 36:
                // Compute reference derivatives for dof 36.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients16[0][s] * aux[s];
                }
                break;
            case 37:
                // Compute reference derivatives for dof 37.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients17[0][s] * aux[s];
                }
                break;
            case 38:
                // Compute reference derivatives for dof 38.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients18[0][s] * aux[s];
                }
                break;
            case 39:
                // Compute reference derivatives for dof 39.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients19[0][s] * aux[s];
                }
                break;
            case 40:
                // Compute reference derivatives for dof 40.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 41:
                // Compute reference derivatives for dof 41.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 42:
                // Compute reference derivatives for dof 42.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 43:
                // Compute reference derivatives for dof 43.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients3[0][s] * aux[s];
                }
                break;
            case 44:
                // Compute reference derivatives for dof 44.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients4[0][s] * aux[s];
                }
                break;
            case 45:
                // Compute reference derivatives for dof 45.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients5[0][s] * aux[s];
                }
                break;
            case 46:
                // Compute reference derivatives for dof 46.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients6[0][s] * aux[s];
                }
                break;
            case 47:
                // Compute reference derivatives for dof 47.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients7[0][s] * aux[s];
                }
                break;
            case 48:
                // Compute reference derivatives for dof 48.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients8[0][s] * aux[s];
                }
                break;
            case 49:
                // Compute reference derivatives for dof 49.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients9[0][s] * aux[s];
                }
                break;
            case 50:
                // Compute reference derivatives for dof 50.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients10[0][s] * aux[s];
                }
                break;
            case 51:
                // Compute reference derivatives for dof 51.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients11[0][s] * aux[s];
                }
                break;
            case 52:
                // Compute reference derivatives for dof 52.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients12[0][s] * aux[s];
                }
                break;
            case 53:
                // Compute reference derivatives for dof 53.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients13[0][s] * aux[s];
                }
                break;
            case 54:
                // Compute reference derivatives for dof 54.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients14[0][s] * aux[s];
                }
                break;
            case 55:
                // Compute reference derivatives for dof 55.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients15[0][s] * aux[s];
                }
                break;
            case 56:
                // Compute reference derivatives for dof 56.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients16[0][s] * aux[s];
                }
                break;
            case 57:
                // Compute reference derivatives for dof 57.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients17[0][s] * aux[s];
                }
                break;
            case 58:
                // Compute reference derivatives for dof 58.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients18[0][s] * aux[s];
                }
                break;
            case 59:
                // Compute reference derivatives for dof 59.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients19[0][s] * aux[s];
                }
                break;
            }
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t c = 0; c < num_components[i]; ++c)
                    reference_values[60 * (num_derivatives * 3) * ip + num_derivatives * 3 * i + 3 * r + (reference_offset[i] + c)] = derivatives[num_derivatives * c + r];
        }
    }
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    const std::size_t num_derivatives = std::pow(3, order);
    // Precomputed combinations
    const std::size_t combinations[3][27][3] =
        { { { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 } },
          { { 0, 0, 0 },
            { 0, 1, 0 },
            { 0, 2, 0 },
            { 1, 0, 0 },
            { 1, 1, 0 },
            { 1, 2, 0 },
            { 2, 0, 0 },
            { 2, 1, 0 },
            { 2, 2, 0 },
            { 0, 0, 0 },
            { 0, 1, 0 },
            { 0, 2, 0 },
            { 1, 0, 0 },
            { 1, 1, 0 },
            { 1, 2, 0 },
            { 2, 0, 0 },
            { 2, 1, 0 },
            { 2, 2, 0 },
            { 0, 0, 0 },
            { 0, 1, 0 },
            { 0, 2, 0 },
            { 1, 0, 0 },
            { 1, 1, 0 },
            { 1, 2, 0 },
            { 2, 0, 0 },
            { 2, 1, 0 },
            { 2, 2, 0 } },
          { { 0, 0, 0 },
            { 0, 0, 1 },
            { 0, 0, 2 },
            { 0, 1, 0 },
            { 0, 1, 1 },
            { 0, 1, 2 },
            { 0, 2, 0 },
            { 0, 2, 1 },
            { 0, 2, 2 },
            { 1, 0, 0 },
            { 1, 0, 1 },
            { 1, 0, 2 },
            { 1, 1, 0 },
            { 1, 1, 1 },
            { 1, 1, 2 },
            { 1, 2, 0 },
            { 1, 2, 1 },
            { 1, 2, 2 },
            { 2, 0, 0 },
            { 2, 0, 1 },
            { 2, 0, 2 },
            { 2, 1, 0 },
            { 2, 1, 1 },
            { 2, 1, 2 },
            { 2, 2, 0 },
            { 2, 2, 1 },
            { 2, 2, 2 } } };
    std::fill_n(values, num_points * 60 * num_derivatives * 3, 0.0);
    const std::size_t reference_offsets[60] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2 };
    const std::size_t physical_offsets[60] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2 };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[27][27];
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                transform[r][s] = 1.0;
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                for (std::size_t k = 0; k < order; ++k)
                    transform[r][s] *= K[3 * 3 * ip + 3 * combinations[order - 1][s][k] + combinations[order - 1][r][k]];
        for (std::size_t d = 0; d < 60; ++d)
        {
            for (std::size_t s = 0; s < num_derivatives; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[60 * (num_derivatives * 3) * ip + num_derivatives * 3 * d + 3 * s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < num_derivatives; ++r)
                        values[60 * (num_derivatives * 3) * ip + num_derivatives * 3 * d + 3 * r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    double X[3] = {};
    double J[9];
    double detJ;
    double K[9];
    if (cm)
    {
        cm->compute_reference_geometry(X, J, &detJ, K, 1, x, coordinate_dofs, cell_orientation);
    }
    else
    {
        compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
        compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
        // Compute constants
        const double C0 = coordinate_dofs[9] + coordinate_dofs[6] + coordinate_dofs[3] - coordinate_dofs[0];
        const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4] - coordinate_dofs[1];
        const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5] - coordinate_dofs[2];
        // Compute subdeterminants
        const double d[9] = { J[4] * J[8] - J[5] * J[7], J[5] * J[6] - J[3] * J[8], J[3] * J[7] - J[4] * J[6], J[2] * J[7] - J[1] * J[8], J[0] * J[8] - J[2] * J[6], J[1] * J[6] - J[0] * J[7], J[1] * J[5] - J[2] * J[4], J[2] * J[3] - J[0] * J[5], J[0] * J[4] - J[1] * J[3] };
        // Get coordinates and map to the reference (FIAT) element
        double Y[3] = { (d[0] * (2.0 * x[0] - C0) + d[3] * (2.0 * x[1] - C1) + d[6] * (2.0 * x[2] - C2)) / detJ, (d[1] * (2.0 * x[0] - C0) + d[4] * (2.0 * x[1] - C1) + d[7] * (2.0 * x[2] - C2)) / detJ, (d[2] * (2.0 * x[0] - C0) + d[5] * (2.0 * x[1] - C1) + d[8] * (2.0 * x[2] - C2)) / detJ };
        // Map to FFC reference coordinate
        for (std::size_t k = 0; k < 3; ++k)
            X[k] = (Y[k] + 1.0) / 2.0;
    }
    // Evaluate basis on reference element
    double ref_values[180];
    evaluate_reference_basis(ref_values, 1, X);
    // Push forward
    double physical_values[180];
    transform_reference_basis_derivatives(physical_values, 0, 1, ref_values, X, J, &detJ, K, cell_orientation);
    for (std::size_t k = 0; k < 3; ++k)
        values[k] = physical_values[3 * i + k];
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    // Helper variable to hold values of a single dof.
    double dof_values[3] = {};
    // Loop dofs and call evaluate_basis
    for (std::size_t r = 0; r < 60; ++r)
    {
        evaluate_basis(r, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < 3; ++s)
            values[r * 3 + s] = dof_values[s];
    }
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::size_t num_derivatives = std::pow(3, n);
    std::fill_n(values, 3 * num_derivatives, 0.0);
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
        return;
    }
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 3)
        return;
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    // Compute Inverse Jacobian and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    // Compute constants
    const double C0 = coordinate_dofs[9] + coordinate_dofs[6] + coordinate_dofs[3] - coordinate_dofs[0];
    const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4] - coordinate_dofs[1];
    const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5] - coordinate_dofs[2];
    // Compute subdeterminants
    const double d[9] = { J[4] * J[8] - J[5] * J[7], J[5] * J[6] - J[3] * J[8], J[3] * J[7] - J[4] * J[6], J[2] * J[7] - J[1] * J[8], J[0] * J[8] - J[2] * J[6], J[1] * J[6] - J[0] * J[7], J[1] * J[5] - J[2] * J[4], J[2] * J[3] - J[0] * J[5], J[0] * J[4] - J[1] * J[3] };
    // Get coordinates and map to the reference (FIAT) element
    double Y[3] = { (d[0] * (2.0 * x[0] - C0) + d[3] * (2.0 * x[1] - C1) + d[6] * (2.0 * x[2] - C2)) / detJ, (d[1] * (2.0 * x[0] - C0) + d[4] * (2.0 * x[1] - C1) + d[7] * (2.0 * x[2] - C2)) / detJ, (d[2] * (2.0 * x[0] - C0) + d[5] * (2.0 * x[1] - C1) + d[8] * (2.0 * x[2] - C2)) / detJ };
    // Precomputed combinations
    const std::size_t combinations[3][27][3] =
        { { { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 } },
          { { 0, 0, 0 },
            { 0, 1, 0 },
            { 0, 2, 0 },
            { 1, 0, 0 },
            { 1, 1, 0 },
            { 1, 2, 0 },
            { 2, 0, 0 },
            { 2, 1, 0 },
            { 2, 2, 0 },
            { 0, 0, 0 },
            { 0, 1, 0 },
            { 0, 2, 0 },
            { 1, 0, 0 },
            { 1, 1, 0 },
            { 1, 2, 0 },
            { 2, 0, 0 },
            { 2, 1, 0 },
            { 2, 2, 0 },
            { 0, 0, 0 },
            { 0, 1, 0 },
            { 0, 2, 0 },
            { 1, 0, 0 },
            { 1, 1, 0 },
            { 1, 2, 0 },
            { 2, 0, 0 },
            { 2, 1, 0 },
            { 2, 2, 0 } },
          { { 0, 0, 0 },
            { 0, 0, 1 },
            { 0, 0, 2 },
            { 0, 1, 0 },
            { 0, 1, 1 },
            { 0, 1, 2 },
            { 0, 2, 0 },
            { 0, 2, 1 },
            { 0, 2, 2 },
            { 1, 0, 0 },
            { 1, 0, 1 },
            { 1, 0, 2 },
            { 1, 1, 0 },
            { 1, 1, 1 },
            { 1, 1, 2 },
            { 1, 2, 0 },
            { 1, 2, 1 },
            { 1, 2, 2 },
            { 2, 0, 0 },
            { 2, 0, 1 },
            { 2, 0, 2 },
            { 2, 1, 0 },
            { 2, 1, 1 },
            { 2, 1, 2 },
            { 2, 2, 0 },
            { 2, 2, 1 },
            { 2, 2, 2 } } };
    // Declare transformation matrix
    double transform[27][27] =
        { { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 } };
    // Construct transformation matrix
    for (std::size_t row = 0; row < num_derivatives; ++row)
        for (std::size_t col = 0; col < num_derivatives; ++col)
            for (std::size_t k = 0; k < n; ++k)
                transform[row][col] *= K[3 * combinations[n - 1][col][k] + combinations[n - 1][row][k]];
    switch (i)
    {
    case 0:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.028867513459481377, 0.01304101327393252, 0.007529232524210424, 0.005323971374999493, 0.01829812636778498, 0.014173667737846016, 0.011572751247156891, 0.008183170883849705, 0.006681531047810616, 0.004724555912615332, -0.028347335475692043, -0.023957871187497756, -0.020748125068968316, -0.01855768722395226, -0.016071428571428573, -0.013122266479195604, -0.010714285714285692, -0.009278843611976116, -0.007576144084141579, -0.00535714285714285 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336762, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321832, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955858, 0.0, 8.366600265340768, -1.18321595661993, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739498, 0.0, 0.0, 8.694826047713665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947011, -3.3935649046180636e-14, -3.346640106136308, -2.3664319132398495, 15.491933384829666, 0.0, 0.0, 0.6928203230275537, 0.5656854249492373, 0.39999999999999886, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.8989794855663495, 0.0, 0.0, 0.0, 14.198591479439074, -0.828078671210824, 1.2098624933629525e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0884716495130443e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 0.0, 0.0, 0.0, 14.342743312012727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000134, 0.0, 8.763560920082679, -1.549193338482974, 0.0, 0.0, 0.0, 9.524704719832533, -1.4813121596360834, 0.26186146828319146, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1176914536239795, 0.0, 3.162277660168379, 4.919349550499535, 0.0, 0.0, 0.0, 0.0, 10.690449676496982, -2.418972627259056, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5455844122715585, 0.0, 0.0, 7.66811580507228, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051666, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477958, 7.245688373094727, 4.1833001326703805, -0.5916079783099749, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869749, 0.0, 0.0, 4.3474130238568325, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646285, 0.0, 9.66091783079296, 0.6831300510639867, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.2403703492039373, 0.0, 0.0, 7.529940238806683, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244578, 2.449489742783181, 2.828427124746206, -1.0000000000000095, 9.165151389911685, 7.099295739719534, -0.41403933560541256, -2.049390153191928, -0.47809144373376167, 0.16903085094570522, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.1213203435596397, -0.40824829046386346, 3.1754264805429355, 0.0, 0.0, 7.171371656006364, 0.0, -1.380131118684709, -1.5614401167176546, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.80000000000001, -5.692099788303113, 4.381780460041349, -0.7745966692414907, 0.0, 10.998181667893988, 0.9621404708847333, 4.762352359916273, -0.7406560798180437, 0.1309307341415961, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119917, 2.7386127875258306, 1.5811388300841904, 2.4596747752497663, 0.0, 0.0, 9.258200997725515, 0.0, 5.345224838248491, -1.2094863136295253, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357735, 0.0, 0.0, 3.8340579025361397, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706658, 0.0, -3.162277660168412, -2.2360679774998027, 0.0, 0.0, 0.0, 13.747727084867515, 0.5345224838248532, 0.3779644730092276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999887, 0.0, 3.6514837167010707, -2.840187787218764, 0.0, 0.0, 0.0, 0.0, 12.344267996967348, 1.396594497510348, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048555, 0.0, 0.0, 6.640783086353614, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505551, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189435, 4.183300132670375, -0.5916079783099615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387008, 7.099295739719542, 0.0, 4.347413023856828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323076, 0.0, 3.864367132317193, -0.3415650255319911, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.080123449734629, 0.0, 7.099295739719546, 2.509980079602214, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299173, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724463, 2.4494897427831743, 2.828427124746207, -1.000000000000009, 1.309307341415954, 7.099295739719537, -0.4140393356054117, -2.049390153191927, -0.4780914437337623, 0.16903085094570483, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498075, 2.121320343559647, -0.40824829046386685, 3.1754264805429337, 9.071147352221455, 0.0, 7.171371656006362, 0.0, -1.3801311186847083, -1.5614401167176528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000009, 0.6324555320336753, 4.381780460041344, -0.7745966692414884, 0.0, 3.142337619398289, -0.10690449676496958, 4.76235235991627, -0.7406560798180428, 0.13093073414159664, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119886, 0.5477225575051662, 1.5811388300841966, 2.4596747752497654, 0.0, 9.071147352221454, 1.851640199545103, 0.0, 5.345224838248489, -1.209486313629527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135779, -6.260990336999449, 0.0, 3.8340579025361414, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.039230484541329, 0.0, 3.162277660168365, -0.447213595499961, 0.0, 0.0, 0.0, 5.891883036371791, -0.5345224838248448, 0.07559289460184586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.89999999999999, 0.0, 1.4605934866803583, 1.4200938936093819, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786952, -0.6982972487551772, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.260990336999394, 2.2135943621178726, 0.0, 0.0, 0.0, 0.0, 10.583005244258366, 2.993325909419166, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977288, 0.0, 0.0, -4.695742752749563, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110028, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 1:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.028867513459481454, -0.01304101327393248, 0.007529232524210435, 0.005323971374999493, 0.018298126367784984, -0.014173667737846004, -0.011572751247156891, 0.008183170883849717, 0.0066815310478106045, 0.004724555912615337, 0.028347335475692036, -0.02395787118749775, -0.020748125068968302, 0.01855768722395226, 0.01607142857142858, 0.013122266479195593, -0.010714285714285723, -0.00927884361197613, -0.00757614408414158, -0.005357142857142854 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336762, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321832, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955858, 0.0, 8.366600265340768, -1.18321595661993, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739498, 0.0, 0.0, 8.694826047713665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947011, -3.3935649046180636e-14, -3.346640106136308, -2.3664319132398495, 15.491933384829666, 0.0, 0.0, 0.6928203230275537, 0.5656854249492373, 0.39999999999999886, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.8989794855663495, 0.0, 0.0, 0.0, 14.198591479439074, -0.828078671210824, 1.2098624933629525e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0884716495130443e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 0.0, 0.0, 0.0, 14.342743312012727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000134, 0.0, 8.763560920082679, -1.549193338482974, 0.0, 0.0, 0.0, 9.524704719832533, -1.4813121596360834, 0.26186146828319146, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1176914536239795, 0.0, 3.162277660168379, 4.919349550499535, 0.0, 0.0, 0.0, 0.0, 10.690449676496982, -2.418972627259056, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5455844122715585, 0.0, 0.0, 7.66811580507228, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051666, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477958, 7.245688373094727, 4.1833001326703805, -0.5916079783099749, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869749, 0.0, 0.0, 4.3474130238568325, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646285, 0.0, 9.66091783079296, 0.6831300510639867, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.2403703492039373, 0.0, 0.0, 7.529940238806683, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244578, 2.449489742783181, 2.828427124746206, -1.0000000000000095, 9.165151389911685, 7.099295739719534, -0.41403933560541256, -2.049390153191928, -0.47809144373376167, 0.16903085094570522, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.1213203435596397, -0.40824829046386346, 3.1754264805429355, 0.0, 0.0, 7.171371656006364, 0.0, -1.380131118684709, -1.5614401167176546, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.80000000000001, -5.692099788303113, 4.381780460041349, -0.7745966692414907, 0.0, 10.998181667893988, 0.9621404708847333, 4.762352359916273, -0.7406560798180437, 0.1309307341415961, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119917, 2.7386127875258306, 1.5811388300841904, 2.4596747752497663, 0.0, 0.0, 9.258200997725515, 0.0, 5.345224838248491, -1.2094863136295253, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357735, 0.0, 0.0, 3.8340579025361397, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706658, 0.0, -3.162277660168412, -2.2360679774998027, 0.0, 0.0, 0.0, 13.747727084867515, 0.5345224838248532, 0.3779644730092276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999887, 0.0, 3.6514837167010707, -2.840187787218764, 0.0, 0.0, 0.0, 0.0, 12.344267996967348, 1.396594497510348, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048555, 0.0, 0.0, 6.640783086353614, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505551, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189435, 4.183300132670375, -0.5916079783099615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387008, 7.099295739719542, 0.0, 4.347413023856828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323076, 0.0, 3.864367132317193, -0.3415650255319911, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.080123449734629, 0.0, 7.099295739719546, 2.509980079602214, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299173, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724463, 2.4494897427831743, 2.828427124746207, -1.000000000000009, 1.309307341415954, 7.099295739719537, -0.4140393356054117, -2.049390153191927, -0.4780914437337623, 0.16903085094570483, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498075, 2.121320343559647, -0.40824829046386685, 3.1754264805429337, 9.071147352221455, 0.0, 7.171371656006362, 0.0, -1.3801311186847083, -1.5614401167176528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000009, 0.6324555320336753, 4.381780460041344, -0.7745966692414884, 0.0, 3.142337619398289, -0.10690449676496958, 4.76235235991627, -0.7406560798180428, 0.13093073414159664, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119886, 0.5477225575051662, 1.5811388300841966, 2.4596747752497654, 0.0, 9.071147352221454, 1.851640199545103, 0.0, 5.345224838248489, -1.209486313629527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135779, -6.260990336999449, 0.0, 3.8340579025361414, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.039230484541329, 0.0, 3.162277660168365, -0.447213595499961, 0.0, 0.0, 0.0, 5.891883036371791, -0.5345224838248448, 0.07559289460184586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.89999999999999, 0.0, 1.4605934866803583, 1.4200938936093819, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786952, -0.6982972487551772, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.260990336999394, 2.2135943621178726, 0.0, 0.0, 0.0, 0.0, 10.583005244258366, 2.993325909419166, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977288, 0.0, 0.0, -4.695742752749563, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110028, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 2:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.028867513459481187, 0.0, -0.015058465048420894, 0.005323971374999505, 0.0, 0.0, 0.0, 0.02454951265154915, -0.01336306209562124, 0.004724555912615356, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.042857142857142844, -0.027836530835928387, 0.015152288168283172, -0.005357142857142867 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336762, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321832, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955858, 0.0, 8.366600265340768, -1.18321595661993, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739498, 0.0, 0.0, 8.694826047713665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947011, -3.3935649046180636e-14, -3.346640106136308, -2.3664319132398495, 15.491933384829666, 0.0, 0.0, 0.6928203230275537, 0.5656854249492373, 0.39999999999999886, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.8989794855663495, 0.0, 0.0, 0.0, 14.198591479439074, -0.828078671210824, 1.2098624933629525e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0884716495130443e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 0.0, 0.0, 0.0, 14.342743312012727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000134, 0.0, 8.763560920082679, -1.549193338482974, 0.0, 0.0, 0.0, 9.524704719832533, -1.4813121596360834, 0.26186146828319146, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1176914536239795, 0.0, 3.162277660168379, 4.919349550499535, 0.0, 0.0, 0.0, 0.0, 10.690449676496982, -2.418972627259056, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5455844122715585, 0.0, 0.0, 7.66811580507228, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051666, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477958, 7.245688373094727, 4.1833001326703805, -0.5916079783099749, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869749, 0.0, 0.0, 4.3474130238568325, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646285, 0.0, 9.66091783079296, 0.6831300510639867, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.2403703492039373, 0.0, 0.0, 7.529940238806683, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244578, 2.449489742783181, 2.828427124746206, -1.0000000000000095, 9.165151389911685, 7.099295739719534, -0.41403933560541256, -2.049390153191928, -0.47809144373376167, 0.16903085094570522, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.1213203435596397, -0.40824829046386346, 3.1754264805429355, 0.0, 0.0, 7.171371656006364, 0.0, -1.380131118684709, -1.5614401167176546, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.80000000000001, -5.692099788303113, 4.381780460041349, -0.7745966692414907, 0.0, 10.998181667893988, 0.9621404708847333, 4.762352359916273, -0.7406560798180437, 0.1309307341415961, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119917, 2.7386127875258306, 1.5811388300841904, 2.4596747752497663, 0.0, 0.0, 9.258200997725515, 0.0, 5.345224838248491, -1.2094863136295253, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357735, 0.0, 0.0, 3.8340579025361397, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706658, 0.0, -3.162277660168412, -2.2360679774998027, 0.0, 0.0, 0.0, 13.747727084867515, 0.5345224838248532, 0.3779644730092276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999887, 0.0, 3.6514837167010707, -2.840187787218764, 0.0, 0.0, 0.0, 0.0, 12.344267996967348, 1.396594497510348, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048555, 0.0, 0.0, 6.640783086353614, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505551, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189435, 4.183300132670375, -0.5916079783099615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387008, 7.099295739719542, 0.0, 4.347413023856828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323076, 0.0, 3.864367132317193, -0.3415650255319911, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.080123449734629, 0.0, 7.099295739719546, 2.509980079602214, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299173, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724463, 2.4494897427831743, 2.828427124746207, -1.000000000000009, 1.309307341415954, 7.099295739719537, -0.4140393356054117, -2.049390153191927, -0.4780914437337623, 0.16903085094570483, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498075, 2.121320343559647, -0.40824829046386685, 3.1754264805429337, 9.071147352221455, 0.0, 7.171371656006362, 0.0, -1.3801311186847083, -1.5614401167176528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000009, 0.6324555320336753, 4.381780460041344, -0.7745966692414884, 0.0, 3.142337619398289, -0.10690449676496958, 4.76235235991627, -0.7406560798180428, 0.13093073414159664, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119886, 0.5477225575051662, 1.5811388300841966, 2.4596747752497654, 0.0, 9.071147352221454, 1.851640199545103, 0.0, 5.345224838248489, -1.209486313629527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135779, -6.260990336999449, 0.0, 3.8340579025361414, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.039230484541329, 0.0, 3.162277660168365, -0.447213595499961, 0.0, 0.0, 0.0, 5.891883036371791, -0.5345224838248448, 0.07559289460184586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.89999999999999, 0.0, 1.4605934866803583, 1.4200938936093819, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786952, -0.6982972487551772, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.260990336999394, 2.2135943621178726, 0.0, 0.0, 0.0, 0.0, 10.583005244258366, 2.993325909419166, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977288, 0.0, 0.0, -4.695742752749563, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110028, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 3:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.028867513459481315, 0.0, 0.0, -0.01597191412499849, 0.0, 0.0, 0.0, 0.0, 0.0, 0.028347335475692043, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.053571428571428575 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336762, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321832, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955858, 0.0, 8.366600265340768, -1.18321595661993, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739498, 0.0, 0.0, 8.694826047713665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947011, -3.3935649046180636e-14, -3.346640106136308, -2.3664319132398495, 15.491933384829666, 0.0, 0.0, 0.6928203230275537, 0.5656854249492373, 0.39999999999999886, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.8989794855663495, 0.0, 0.0, 0.0, 14.198591479439074, -0.828078671210824, 1.2098624933629525e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0884716495130443e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 0.0, 0.0, 0.0, 14.342743312012727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000134, 0.0, 8.763560920082679, -1.549193338482974, 0.0, 0.0, 0.0, 9.524704719832533, -1.4813121596360834, 0.26186146828319146, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1176914536239795, 0.0, 3.162277660168379, 4.919349550499535, 0.0, 0.0, 0.0, 0.0, 10.690449676496982, -2.418972627259056, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5455844122715585, 0.0, 0.0, 7.66811580507228, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051666, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477958, 7.245688373094727, 4.1833001326703805, -0.5916079783099749, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869749, 0.0, 0.0, 4.3474130238568325, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646285, 0.0, 9.66091783079296, 0.6831300510639867, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.2403703492039373, 0.0, 0.0, 7.529940238806683, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244578, 2.449489742783181, 2.828427124746206, -1.0000000000000095, 9.165151389911685, 7.099295739719534, -0.41403933560541256, -2.049390153191928, -0.47809144373376167, 0.16903085094570522, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.1213203435596397, -0.40824829046386346, 3.1754264805429355, 0.0, 0.0, 7.171371656006364, 0.0, -1.380131118684709, -1.5614401167176546, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.80000000000001, -5.692099788303113, 4.381780460041349, -0.7745966692414907, 0.0, 10.998181667893988, 0.9621404708847333, 4.762352359916273, -0.7406560798180437, 0.1309307341415961, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119917, 2.7386127875258306, 1.5811388300841904, 2.4596747752497663, 0.0, 0.0, 9.258200997725515, 0.0, 5.345224838248491, -1.2094863136295253, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357735, 0.0, 0.0, 3.8340579025361397, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706658, 0.0, -3.162277660168412, -2.2360679774998027, 0.0, 0.0, 0.0, 13.747727084867515, 0.5345224838248532, 0.3779644730092276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999887, 0.0, 3.6514837167010707, -2.840187787218764, 0.0, 0.0, 0.0, 0.0, 12.344267996967348, 1.396594497510348, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048555, 0.0, 0.0, 6.640783086353614, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505551, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189435, 4.183300132670375, -0.5916079783099615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387008, 7.099295739719542, 0.0, 4.347413023856828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323076, 0.0, 3.864367132317193, -0.3415650255319911, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.080123449734629, 0.0, 7.099295739719546, 2.509980079602214, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299173, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724463, 2.4494897427831743, 2.828427124746207, -1.000000000000009, 1.309307341415954, 7.099295739719537, -0.4140393356054117, -2.049390153191927, -0.4780914437337623, 0.16903085094570483, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498075, 2.121320343559647, -0.40824829046386685, 3.1754264805429337, 9.071147352221455, 0.0, 7.171371656006362, 0.0, -1.3801311186847083, -1.5614401167176528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000009, 0.6324555320336753, 4.381780460041344, -0.7745966692414884, 0.0, 3.142337619398289, -0.10690449676496958, 4.76235235991627, -0.7406560798180428, 0.13093073414159664, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119886, 0.5477225575051662, 1.5811388300841966, 2.4596747752497654, 0.0, 9.071147352221454, 1.851640199545103, 0.0, 5.345224838248489, -1.209486313629527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135779, -6.260990336999449, 0.0, 3.8340579025361414, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.039230484541329, 0.0, 3.162277660168365, -0.447213595499961, 0.0, 0.0, 0.0, 5.891883036371791, -0.5345224838248448, 0.07559289460184586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.89999999999999, 0.0, 1.4605934866803583, 1.4200938936093819, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786952, -0.6982972487551772, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.260990336999394, 2.2135943621178726, 0.0, 0.0, 0.0, 0.0, 10.583005244258366, 2.993325909419166, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977288, 0.0, 0.0, -4.695742752749563, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110028, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 4:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, 0.0, 0.11293848786315637, -0.06388765649999399, 0.0, 0.0, 0.0, 0.0736485379546474, 0.026726124191242418, -0.023622779563076728, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06495190528383286, -0.06060915267313264, 0.026785714285714298 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336762, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321832, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955858, 0.0, 8.366600265340768, -1.18321595661993, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739498, 0.0, 0.0, 8.694826047713665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947011, -3.3935649046180636e-14, -3.346640106136308, -2.3664319132398495, 15.491933384829666, 0.0, 0.0, 0.6928203230275537, 0.5656854249492373, 0.39999999999999886, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.8989794855663495, 0.0, 0.0, 0.0, 14.198591479439074, -0.828078671210824, 1.2098624933629525e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0884716495130443e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 0.0, 0.0, 0.0, 14.342743312012727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000134, 0.0, 8.763560920082679, -1.549193338482974, 0.0, 0.0, 0.0, 9.524704719832533, -1.4813121596360834, 0.26186146828319146, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1176914536239795, 0.0, 3.162277660168379, 4.919349550499535, 0.0, 0.0, 0.0, 0.0, 10.690449676496982, -2.418972627259056, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5455844122715585, 0.0, 0.0, 7.66811580507228, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051666, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477958, 7.245688373094727, 4.1833001326703805, -0.5916079783099749, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869749, 0.0, 0.0, 4.3474130238568325, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646285, 0.0, 9.66091783079296, 0.6831300510639867, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.2403703492039373, 0.0, 0.0, 7.529940238806683, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244578, 2.449489742783181, 2.828427124746206, -1.0000000000000095, 9.165151389911685, 7.099295739719534, -0.41403933560541256, -2.049390153191928, -0.47809144373376167, 0.16903085094570522, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.1213203435596397, -0.40824829046386346, 3.1754264805429355, 0.0, 0.0, 7.171371656006364, 0.0, -1.380131118684709, -1.5614401167176546, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.80000000000001, -5.692099788303113, 4.381780460041349, -0.7745966692414907, 0.0, 10.998181667893988, 0.9621404708847333, 4.762352359916273, -0.7406560798180437, 0.1309307341415961, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119917, 2.7386127875258306, 1.5811388300841904, 2.4596747752497663, 0.0, 0.0, 9.258200997725515, 0.0, 5.345224838248491, -1.2094863136295253, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357735, 0.0, 0.0, 3.8340579025361397, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706658, 0.0, -3.162277660168412, -2.2360679774998027, 0.0, 0.0, 0.0, 13.747727084867515, 0.5345224838248532, 0.3779644730092276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999887, 0.0, 3.6514837167010707, -2.840187787218764, 0.0, 0.0, 0.0, 0.0, 12.344267996967348, 1.396594497510348, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048555, 0.0, 0.0, 6.640783086353614, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505551, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189435, 4.183300132670375, -0.5916079783099615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387008, 7.099295739719542, 0.0, 4.347413023856828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323076, 0.0, 3.864367132317193, -0.3415650255319911, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.080123449734629, 0.0, 7.099295739719546, 2.509980079602214, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299173, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724463, 2.4494897427831743, 2.828427124746207, -1.000000000000009, 1.309307341415954, 7.099295739719537, -0.4140393356054117, -2.049390153191927, -0.4780914437337623, 0.16903085094570483, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498075, 2.121320343559647, -0.40824829046386685, 3.1754264805429337, 9.071147352221455, 0.0, 7.171371656006362, 0.0, -1.3801311186847083, -1.5614401167176528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000009, 0.6324555320336753, 4.381780460041344, -0.7745966692414884, 0.0, 3.142337619398289, -0.10690449676496958, 4.76235235991627, -0.7406560798180428, 0.13093073414159664, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119886, 0.5477225575051662, 1.5811388300841966, 2.4596747752497654, 0.0, 9.071147352221454, 1.851640199545103, 0.0, 5.345224838248489, -1.209486313629527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135779, -6.260990336999449, 0.0, 3.8340579025361414, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.039230484541329, 0.0, 3.162277660168365, -0.447213595499961, 0.0, 0.0, 0.0, 5.891883036371791, -0.5345224838248448, 0.07559289460184586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.89999999999999, 0.0, 1.4605934866803583, 1.4200938936093819, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786952, -0.6982972487551772, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.260990336999394, 2.2135943621178726, 0.0, 0.0, 0.0, 0.0, 10.583005244258366, 2.993325909419166, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977288, 0.0, 0.0, -4.695742752749563, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110028, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 5:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, 0.0, -0.022587697572631307, 0.12777531299998807, 0.0, 0.0, 0.0, 0.0, 0.06681531047810609, 0.0472455591261534, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07576144084141581, -0.05357142857142859 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336762, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321832, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955858, 0.0, 8.366600265340768, -1.18321595661993, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739498, 0.0, 0.0, 8.694826047713665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947011, -3.3935649046180636e-14, -3.346640106136308, -2.3664319132398495, 15.491933384829666, 0.0, 0.0, 0.6928203230275537, 0.5656854249492373, 0.39999999999999886, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.8989794855663495, 0.0, 0.0, 0.0, 14.198591479439074, -0.828078671210824, 1.2098624933629525e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0884716495130443e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 0.0, 0.0, 0.0, 14.342743312012727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000134, 0.0, 8.763560920082679, -1.549193338482974, 0.0, 0.0, 0.0, 9.524704719832533, -1.4813121596360834, 0.26186146828319146, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1176914536239795, 0.0, 3.162277660168379, 4.919349550499535, 0.0, 0.0, 0.0, 0.0, 10.690449676496982, -2.418972627259056, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5455844122715585, 0.0, 0.0, 7.66811580507228, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051666, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477958, 7.245688373094727, 4.1833001326703805, -0.5916079783099749, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869749, 0.0, 0.0, 4.3474130238568325, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646285, 0.0, 9.66091783079296, 0.6831300510639867, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.2403703492039373, 0.0, 0.0, 7.529940238806683, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244578, 2.449489742783181, 2.828427124746206, -1.0000000000000095, 9.165151389911685, 7.099295739719534, -0.41403933560541256, -2.049390153191928, -0.47809144373376167, 0.16903085094570522, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.1213203435596397, -0.40824829046386346, 3.1754264805429355, 0.0, 0.0, 7.171371656006364, 0.0, -1.380131118684709, -1.5614401167176546, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.80000000000001, -5.692099788303113, 4.381780460041349, -0.7745966692414907, 0.0, 10.998181667893988, 0.9621404708847333, 4.762352359916273, -0.7406560798180437, 0.1309307341415961, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119917, 2.7386127875258306, 1.5811388300841904, 2.4596747752497663, 0.0, 0.0, 9.258200997725515, 0.0, 5.345224838248491, -1.2094863136295253, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357735, 0.0, 0.0, 3.8340579025361397, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706658, 0.0, -3.162277660168412, -2.2360679774998027, 0.0, 0.0, 0.0, 13.747727084867515, 0.5345224838248532, 0.3779644730092276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999887, 0.0, 3.6514837167010707, -2.840187787218764, 0.0, 0.0, 0.0, 0.0, 12.344267996967348, 1.396594497510348, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048555, 0.0, 0.0, 6.640783086353614, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505551, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189435, 4.183300132670375, -0.5916079783099615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387008, 7.099295739719542, 0.0, 4.347413023856828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323076, 0.0, 3.864367132317193, -0.3415650255319911, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.080123449734629, 0.0, 7.099295739719546, 2.509980079602214, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299173, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724463, 2.4494897427831743, 2.828427124746207, -1.000000000000009, 1.309307341415954, 7.099295739719537, -0.4140393356054117, -2.049390153191927, -0.4780914437337623, 0.16903085094570483, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498075, 2.121320343559647, -0.40824829046386685, 3.1754264805429337, 9.071147352221455, 0.0, 7.171371656006362, 0.0, -1.3801311186847083, -1.5614401167176528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000009, 0.6324555320336753, 4.381780460041344, -0.7745966692414884, 0.0, 3.142337619398289, -0.10690449676496958, 4.76235235991627, -0.7406560798180428, 0.13093073414159664, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119886, 0.5477225575051662, 1.5811388300841966, 2.4596747752497654, 0.0, 9.071147352221454, 1.851640199545103, 0.0, 5.345224838248489, -1.209486313629527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135779, -6.260990336999449, 0.0, 3.8340579025361414, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.039230484541329, 0.0, 3.162277660168365, -0.447213595499961, 0.0, 0.0, 0.0, 5.891883036371791, -0.5345224838248448, 0.07559289460184586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.89999999999999, 0.0, 1.4605934866803583, 1.4200938936093819, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786952, -0.6982972487551772, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.260990336999394, 2.2135943621178726, 0.0, 0.0, 0.0, 0.0, 10.583005244258366, 2.993325909419166, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977288, 0.0, 0.0, -4.695742752749563, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110028, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 6:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, 0.0978075995544939, -0.05646924393157821, -0.06388765649999403, 0.054894379103355, -0.04252100321353805, 0.02314550249431374, 0.02454951265154913, -0.013363062095621204, -0.023622779563076717, 0.0, 0.0, 0.04841229182759272, 0.0, -0.03749999999999999, -0.052489065916782374, 0.0, 0.02165063509461096, 0.030304576336566334, 0.026785714285714305 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336762, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321832, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955858, 0.0, 8.366600265340768, -1.18321595661993, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739498, 0.0, 0.0, 8.694826047713665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947011, -3.3935649046180636e-14, -3.346640106136308, -2.3664319132398495, 15.491933384829666, 0.0, 0.0, 0.6928203230275537, 0.5656854249492373, 0.39999999999999886, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.8989794855663495, 0.0, 0.0, 0.0, 14.198591479439074, -0.828078671210824, 1.2098624933629525e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0884716495130443e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 0.0, 0.0, 0.0, 14.342743312012727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000134, 0.0, 8.763560920082679, -1.549193338482974, 0.0, 0.0, 0.0, 9.524704719832533, -1.4813121596360834, 0.26186146828319146, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1176914536239795, 0.0, 3.162277660168379, 4.919349550499535, 0.0, 0.0, 0.0, 0.0, 10.690449676496982, -2.418972627259056, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5455844122715585, 0.0, 0.0, 7.66811580507228, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051666, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477958, 7.245688373094727, 4.1833001326703805, -0.5916079783099749, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869749, 0.0, 0.0, 4.3474130238568325, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646285, 0.0, 9.66091783079296, 0.6831300510639867, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.2403703492039373, 0.0, 0.0, 7.529940238806683, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244578, 2.449489742783181, 2.828427124746206, -1.0000000000000095, 9.165151389911685, 7.099295739719534, -0.41403933560541256, -2.049390153191928, -0.47809144373376167, 0.16903085094570522, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.1213203435596397, -0.40824829046386346, 3.1754264805429355, 0.0, 0.0, 7.171371656006364, 0.0, -1.380131118684709, -1.5614401167176546, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.80000000000001, -5.692099788303113, 4.381780460041349, -0.7745966692414907, 0.0, 10.998181667893988, 0.9621404708847333, 4.762352359916273, -0.7406560798180437, 0.1309307341415961, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119917, 2.7386127875258306, 1.5811388300841904, 2.4596747752497663, 0.0, 0.0, 9.258200997725515, 0.0, 5.345224838248491, -1.2094863136295253, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357735, 0.0, 0.0, 3.8340579025361397, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706658, 0.0, -3.162277660168412, -2.2360679774998027, 0.0, 0.0, 0.0, 13.747727084867515, 0.5345224838248532, 0.3779644730092276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999887, 0.0, 3.6514837167010707, -2.840187787218764, 0.0, 0.0, 0.0, 0.0, 12.344267996967348, 1.396594497510348, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048555, 0.0, 0.0, 6.640783086353614, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505551, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189435, 4.183300132670375, -0.5916079783099615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387008, 7.099295739719542, 0.0, 4.347413023856828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323076, 0.0, 3.864367132317193, -0.3415650255319911, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.080123449734629, 0.0, 7.099295739719546, 2.509980079602214, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299173, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724463, 2.4494897427831743, 2.828427124746207, -1.000000000000009, 1.309307341415954, 7.099295739719537, -0.4140393356054117, -2.049390153191927, -0.4780914437337623, 0.16903085094570483, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498075, 2.121320343559647, -0.40824829046386685, 3.1754264805429337, 9.071147352221455, 0.0, 7.171371656006362, 0.0, -1.3801311186847083, -1.5614401167176528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000009, 0.6324555320336753, 4.381780460041344, -0.7745966692414884, 0.0, 3.142337619398289, -0.10690449676496958, 4.76235235991627, -0.7406560798180428, 0.13093073414159664, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119886, 0.5477225575051662, 1.5811388300841966, 2.4596747752497654, 0.0, 9.071147352221454, 1.851640199545103, 0.0, 5.345224838248489, -1.209486313629527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135779, -6.260990336999449, 0.0, 3.8340579025361414, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.039230484541329, 0.0, 3.162277660168365, -0.447213595499961, 0.0, 0.0, 0.0, 5.891883036371791, -0.5345224838248448, 0.07559289460184586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.89999999999999, 0.0, 1.4605934866803583, 1.4200938936093819, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786952, -0.6982972487551772, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.260990336999394, 2.2135943621178726, 0.0, 0.0, 0.0, 0.0, 10.583005244258366, 2.993325909419166, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977288, 0.0, 0.0, -4.695742752749563, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110028, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 7:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, -0.019561519910898818, 0.011293848786315647, 0.12777531299998807, 0.0, 0.0, 0.05786375623578448, 0.0, -0.03340765523905306, 0.04724555912615341, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06561133239597798, 0.0, 0.0, -0.03788072042070791, -0.053571428571428596 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336762, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321832, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955858, 0.0, 8.366600265340768, -1.18321595661993, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739498, 0.0, 0.0, 8.694826047713665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947011, -3.3935649046180636e-14, -3.346640106136308, -2.3664319132398495, 15.491933384829666, 0.0, 0.0, 0.6928203230275537, 0.5656854249492373, 0.39999999999999886, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.8989794855663495, 0.0, 0.0, 0.0, 14.198591479439074, -0.828078671210824, 1.2098624933629525e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0884716495130443e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 0.0, 0.0, 0.0, 14.342743312012727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000134, 0.0, 8.763560920082679, -1.549193338482974, 0.0, 0.0, 0.0, 9.524704719832533, -1.4813121596360834, 0.26186146828319146, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1176914536239795, 0.0, 3.162277660168379, 4.919349550499535, 0.0, 0.0, 0.0, 0.0, 10.690449676496982, -2.418972627259056, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5455844122715585, 0.0, 0.0, 7.66811580507228, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051666, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477958, 7.245688373094727, 4.1833001326703805, -0.5916079783099749, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869749, 0.0, 0.0, 4.3474130238568325, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646285, 0.0, 9.66091783079296, 0.6831300510639867, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.2403703492039373, 0.0, 0.0, 7.529940238806683, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244578, 2.449489742783181, 2.828427124746206, -1.0000000000000095, 9.165151389911685, 7.099295739719534, -0.41403933560541256, -2.049390153191928, -0.47809144373376167, 0.16903085094570522, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.1213203435596397, -0.40824829046386346, 3.1754264805429355, 0.0, 0.0, 7.171371656006364, 0.0, -1.380131118684709, -1.5614401167176546, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.80000000000001, -5.692099788303113, 4.381780460041349, -0.7745966692414907, 0.0, 10.998181667893988, 0.9621404708847333, 4.762352359916273, -0.7406560798180437, 0.1309307341415961, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119917, 2.7386127875258306, 1.5811388300841904, 2.4596747752497663, 0.0, 0.0, 9.258200997725515, 0.0, 5.345224838248491, -1.2094863136295253, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357735, 0.0, 0.0, 3.8340579025361397, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706658, 0.0, -3.162277660168412, -2.2360679774998027, 0.0, 0.0, 0.0, 13.747727084867515, 0.5345224838248532, 0.3779644730092276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999887, 0.0, 3.6514837167010707, -2.840187787218764, 0.0, 0.0, 0.0, 0.0, 12.344267996967348, 1.396594497510348, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048555, 0.0, 0.0, 6.640783086353614, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505551, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189435, 4.183300132670375, -0.5916079783099615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387008, 7.099295739719542, 0.0, 4.347413023856828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323076, 0.0, 3.864367132317193, -0.3415650255319911, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.080123449734629, 0.0, 7.099295739719546, 2.509980079602214, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299173, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724463, 2.4494897427831743, 2.828427124746207, -1.000000000000009, 1.309307341415954, 7.099295739719537, -0.4140393356054117, -2.049390153191927, -0.4780914437337623, 0.16903085094570483, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498075, 2.121320343559647, -0.40824829046386685, 3.1754264805429337, 9.071147352221455, 0.0, 7.171371656006362, 0.0, -1.3801311186847083, -1.5614401167176528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000009, 0.6324555320336753, 4.381780460041344, -0.7745966692414884, 0.0, 3.142337619398289, -0.10690449676496958, 4.76235235991627, -0.7406560798180428, 0.13093073414159664, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119886, 0.5477225575051662, 1.5811388300841966, 2.4596747752497654, 0.0, 9.071147352221454, 1.851640199545103, 0.0, 5.345224838248489, -1.209486313629527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135779, -6.260990336999449, 0.0, 3.8340579025361414, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.039230484541329, 0.0, 3.162277660168365, -0.447213595499961, 0.0, 0.0, 0.0, 5.891883036371791, -0.5345224838248448, 0.07559289460184586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.89999999999999, 0.0, 1.4605934866803583, 1.4200938936093819, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786952, -0.6982972487551772, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.260990336999394, 2.2135943621178726, 0.0, 0.0, 0.0, 0.0, 10.583005244258366, 2.993325909419166, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977288, 0.0, 0.0, -4.695742752749563, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110028, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 8:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, 0.09780759955449396, -0.07905694150420949, -0.031943828249996996, 0.05489437910335498, 0.01417366773784601, -0.046291004988627586, -0.02454951265154915, 0.013363062095621228, 0.023622779563076703, 0.0, 0.04791574237499548, -0.006916041689656098, -0.0618589574131742, -0.016071428571428566, 0.008748177652797052, 0.04285714285714287, 0.015464739353293547, 0.0, -0.005357142857142856 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336762, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321832, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955858, 0.0, 8.366600265340768, -1.18321595661993, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739498, 0.0, 0.0, 8.694826047713665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947011, -3.3935649046180636e-14, -3.346640106136308, -2.3664319132398495, 15.491933384829666, 0.0, 0.0, 0.6928203230275537, 0.5656854249492373, 0.39999999999999886, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.8989794855663495, 0.0, 0.0, 0.0, 14.198591479439074, -0.828078671210824, 1.2098624933629525e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0884716495130443e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 0.0, 0.0, 0.0, 14.342743312012727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000134, 0.0, 8.763560920082679, -1.549193338482974, 0.0, 0.0, 0.0, 9.524704719832533, -1.4813121596360834, 0.26186146828319146, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1176914536239795, 0.0, 3.162277660168379, 4.919349550499535, 0.0, 0.0, 0.0, 0.0, 10.690449676496982, -2.418972627259056, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5455844122715585, 0.0, 0.0, 7.66811580507228, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051666, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477958, 7.245688373094727, 4.1833001326703805, -0.5916079783099749, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869749, 0.0, 0.0, 4.3474130238568325, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646285, 0.0, 9.66091783079296, 0.6831300510639867, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.2403703492039373, 0.0, 0.0, 7.529940238806683, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244578, 2.449489742783181, 2.828427124746206, -1.0000000000000095, 9.165151389911685, 7.099295739719534, -0.41403933560541256, -2.049390153191928, -0.47809144373376167, 0.16903085094570522, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.1213203435596397, -0.40824829046386346, 3.1754264805429355, 0.0, 0.0, 7.171371656006364, 0.0, -1.380131118684709, -1.5614401167176546, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.80000000000001, -5.692099788303113, 4.381780460041349, -0.7745966692414907, 0.0, 10.998181667893988, 0.9621404708847333, 4.762352359916273, -0.7406560798180437, 0.1309307341415961, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119917, 2.7386127875258306, 1.5811388300841904, 2.4596747752497663, 0.0, 0.0, 9.258200997725515, 0.0, 5.345224838248491, -1.2094863136295253, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357735, 0.0, 0.0, 3.8340579025361397, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706658, 0.0, -3.162277660168412, -2.2360679774998027, 0.0, 0.0, 0.0, 13.747727084867515, 0.5345224838248532, 0.3779644730092276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999887, 0.0, 3.6514837167010707, -2.840187787218764, 0.0, 0.0, 0.0, 0.0, 12.344267996967348, 1.396594497510348, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048555, 0.0, 0.0, 6.640783086353614, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505551, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189435, 4.183300132670375, -0.5916079783099615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387008, 7.099295739719542, 0.0, 4.347413023856828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323076, 0.0, 3.864367132317193, -0.3415650255319911, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.080123449734629, 0.0, 7.099295739719546, 2.509980079602214, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299173, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724463, 2.4494897427831743, 2.828427124746207, -1.000000000000009, 1.309307341415954, 7.099295739719537, -0.4140393356054117, -2.049390153191927, -0.4780914437337623, 0.16903085094570483, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498075, 2.121320343559647, -0.40824829046386685, 3.1754264805429337, 9.071147352221455, 0.0, 7.171371656006362, 0.0, -1.3801311186847083, -1.5614401167176528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000009, 0.6324555320336753, 4.381780460041344, -0.7745966692414884, 0.0, 3.142337619398289, -0.10690449676496958, 4.76235235991627, -0.7406560798180428, 0.13093073414159664, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119886, 0.5477225575051662, 1.5811388300841966, 2.4596747752497654, 0.0, 9.071147352221454, 1.851640199545103, 0.0, 5.345224838248489, -1.209486313629527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135779, -6.260990336999449, 0.0, 3.8340579025361414, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.039230484541329, 0.0, 3.162277660168365, -0.447213595499961, 0.0, 0.0, 0.0, 5.891883036371791, -0.5345224838248448, 0.07559289460184586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.89999999999999, 0.0, 1.4605934866803583, 1.4200938936093819, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786952, -0.6982972487551772, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.260990336999394, 2.2135943621178726, 0.0, 0.0, 0.0, 0.0, 10.583005244258366, 2.993325909419166, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977288, 0.0, 0.0, -4.695742752749563, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110028, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 9:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, -0.019561519910898842, 0.12423233664947204, -0.031943828249996996, 0.0, 0.05669467095138407, -0.011572751247156909, 0.024549512651549147, -0.046770717334674285, 0.023622779563076696, 0.0, 0.0, 0.0, 0.061858957413174195, -0.02142857142857144, 0.00437408882639853, -0.0642857142857143, 0.009278843611976128, 0.007576144084141588, -0.005357142857142859 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336762, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321832, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955858, 0.0, 8.366600265340768, -1.18321595661993, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739498, 0.0, 0.0, 8.694826047713665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947011, -3.3935649046180636e-14, -3.346640106136308, -2.3664319132398495, 15.491933384829666, 0.0, 0.0, 0.6928203230275537, 0.5656854249492373, 0.39999999999999886, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.8989794855663495, 0.0, 0.0, 0.0, 14.198591479439074, -0.828078671210824, 1.2098624933629525e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0884716495130443e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 0.0, 0.0, 0.0, 14.342743312012727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000134, 0.0, 8.763560920082679, -1.549193338482974, 0.0, 0.0, 0.0, 9.524704719832533, -1.4813121596360834, 0.26186146828319146, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1176914536239795, 0.0, 3.162277660168379, 4.919349550499535, 0.0, 0.0, 0.0, 0.0, 10.690449676496982, -2.418972627259056, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5455844122715585, 0.0, 0.0, 7.66811580507228, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051666, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477958, 7.245688373094727, 4.1833001326703805, -0.5916079783099749, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869749, 0.0, 0.0, 4.3474130238568325, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646285, 0.0, 9.66091783079296, 0.6831300510639867, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.2403703492039373, 0.0, 0.0, 7.529940238806683, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244578, 2.449489742783181, 2.828427124746206, -1.0000000000000095, 9.165151389911685, 7.099295739719534, -0.41403933560541256, -2.049390153191928, -0.47809144373376167, 0.16903085094570522, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.1213203435596397, -0.40824829046386346, 3.1754264805429355, 0.0, 0.0, 7.171371656006364, 0.0, -1.380131118684709, -1.5614401167176546, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.80000000000001, -5.692099788303113, 4.381780460041349, -0.7745966692414907, 0.0, 10.998181667893988, 0.9621404708847333, 4.762352359916273, -0.7406560798180437, 0.1309307341415961, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119917, 2.7386127875258306, 1.5811388300841904, 2.4596747752497663, 0.0, 0.0, 9.258200997725515, 0.0, 5.345224838248491, -1.2094863136295253, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357735, 0.0, 0.0, 3.8340579025361397, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706658, 0.0, -3.162277660168412, -2.2360679774998027, 0.0, 0.0, 0.0, 13.747727084867515, 0.5345224838248532, 0.3779644730092276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999887, 0.0, 3.6514837167010707, -2.840187787218764, 0.0, 0.0, 0.0, 0.0, 12.344267996967348, 1.396594497510348, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048555, 0.0, 0.0, 6.640783086353614, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505551, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189435, 4.183300132670375, -0.5916079783099615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387008, 7.099295739719542, 0.0, 4.347413023856828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323076, 0.0, 3.864367132317193, -0.3415650255319911, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.080123449734629, 0.0, 7.099295739719546, 2.509980079602214, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299173, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724463, 2.4494897427831743, 2.828427124746207, -1.000000000000009, 1.309307341415954, 7.099295739719537, -0.4140393356054117, -2.049390153191927, -0.4780914437337623, 0.16903085094570483, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498075, 2.121320343559647, -0.40824829046386685, 3.1754264805429337, 9.071147352221455, 0.0, 7.171371656006362, 0.0, -1.3801311186847083, -1.5614401167176528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000009, 0.6324555320336753, 4.381780460041344, -0.7745966692414884, 0.0, 3.142337619398289, -0.10690449676496958, 4.76235235991627, -0.7406560798180428, 0.13093073414159664, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119886, 0.5477225575051662, 1.5811388300841966, 2.4596747752497654, 0.0, 9.071147352221454, 1.851640199545103, 0.0, 5.345224838248489, -1.209486313629527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135779, -6.260990336999449, 0.0, 3.8340579025361414, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.039230484541329, 0.0, 3.162277660168365, -0.447213595499961, 0.0, 0.0, 0.0, 5.891883036371791, -0.5345224838248448, 0.07559289460184586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.89999999999999, 0.0, 1.4605934866803583, 1.4200938936093819, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786952, -0.6982972487551772, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.260990336999394, 2.2135943621178726, 0.0, 0.0, 0.0, 0.0, 10.583005244258366, 2.993325909419166, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977288, 0.0, 0.0, -4.695742752749563, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110028, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 10:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, -0.09780759955449397, -0.05646924393157825, -0.06388765649999402, 0.054894379103355005, 0.04252100321353805, -0.0231455024943138, 0.024549512651549157, -0.013363062095621242, -0.023622779563076693, 0.0, 0.0, 0.04841229182759272, 0.0, 0.03749999999999999, 0.05248906591678238, 0.0, 0.02165063509461097, 0.030304576336566337, 0.026785714285714288 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336762, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321832, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955858, 0.0, 8.366600265340768, -1.18321595661993, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739498, 0.0, 0.0, 8.694826047713665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947011, -3.3935649046180636e-14, -3.346640106136308, -2.3664319132398495, 15.491933384829666, 0.0, 0.0, 0.6928203230275537, 0.5656854249492373, 0.39999999999999886, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.8989794855663495, 0.0, 0.0, 0.0, 14.198591479439074, -0.828078671210824, 1.2098624933629525e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0884716495130443e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 0.0, 0.0, 0.0, 14.342743312012727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000134, 0.0, 8.763560920082679, -1.549193338482974, 0.0, 0.0, 0.0, 9.524704719832533, -1.4813121596360834, 0.26186146828319146, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1176914536239795, 0.0, 3.162277660168379, 4.919349550499535, 0.0, 0.0, 0.0, 0.0, 10.690449676496982, -2.418972627259056, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5455844122715585, 0.0, 0.0, 7.66811580507228, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051666, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477958, 7.245688373094727, 4.1833001326703805, -0.5916079783099749, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869749, 0.0, 0.0, 4.3474130238568325, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646285, 0.0, 9.66091783079296, 0.6831300510639867, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.2403703492039373, 0.0, 0.0, 7.529940238806683, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244578, 2.449489742783181, 2.828427124746206, -1.0000000000000095, 9.165151389911685, 7.099295739719534, -0.41403933560541256, -2.049390153191928, -0.47809144373376167, 0.16903085094570522, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.1213203435596397, -0.40824829046386346, 3.1754264805429355, 0.0, 0.0, 7.171371656006364, 0.0, -1.380131118684709, -1.5614401167176546, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.80000000000001, -5.692099788303113, 4.381780460041349, -0.7745966692414907, 0.0, 10.998181667893988, 0.9621404708847333, 4.762352359916273, -0.7406560798180437, 0.1309307341415961, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119917, 2.7386127875258306, 1.5811388300841904, 2.4596747752497663, 0.0, 0.0, 9.258200997725515, 0.0, 5.345224838248491, -1.2094863136295253, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357735, 0.0, 0.0, 3.8340579025361397, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706658, 0.0, -3.162277660168412, -2.2360679774998027, 0.0, 0.0, 0.0, 13.747727084867515, 0.5345224838248532, 0.3779644730092276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999887, 0.0, 3.6514837167010707, -2.840187787218764, 0.0, 0.0, 0.0, 0.0, 12.344267996967348, 1.396594497510348, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048555, 0.0, 0.0, 6.640783086353614, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505551, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189435, 4.183300132670375, -0.5916079783099615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387008, 7.099295739719542, 0.0, 4.347413023856828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323076, 0.0, 3.864367132317193, -0.3415650255319911, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.080123449734629, 0.0, 7.099295739719546, 2.509980079602214, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299173, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724463, 2.4494897427831743, 2.828427124746207, -1.000000000000009, 1.309307341415954, 7.099295739719537, -0.4140393356054117, -2.049390153191927, -0.4780914437337623, 0.16903085094570483, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498075, 2.121320343559647, -0.40824829046386685, 3.1754264805429337, 9.071147352221455, 0.0, 7.171371656006362, 0.0, -1.3801311186847083, -1.5614401167176528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000009, 0.6324555320336753, 4.381780460041344, -0.7745966692414884, 0.0, 3.142337619398289, -0.10690449676496958, 4.76235235991627, -0.7406560798180428, 0.13093073414159664, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119886, 0.5477225575051662, 1.5811388300841966, 2.4596747752497654, 0.0, 9.071147352221454, 1.851640199545103, 0.0, 5.345224838248489, -1.209486313629527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135779, -6.260990336999449, 0.0, 3.8340579025361414, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.039230484541329, 0.0, 3.162277660168365, -0.447213595499961, 0.0, 0.0, 0.0, 5.891883036371791, -0.5345224838248448, 0.07559289460184586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.89999999999999, 0.0, 1.4605934866803583, 1.4200938936093819, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786952, -0.6982972487551772, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.260990336999394, 2.2135943621178726, 0.0, 0.0, 0.0, 0.0, 10.583005244258366, 2.993325909419166, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977288, 0.0, 0.0, -4.695742752749563, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110028, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 11:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, 0.019561519910898825, 0.011293848786315641, 0.12777531299998804, 0.0, 0.0, -0.057863756235784464, 0.0, -0.03340765523905305, 0.047245559126153386, 0.0, 0.0, 0.0, 0.0, 0.0, -0.06561133239597798, 0.0, 0.0, -0.037880720420707906, -0.05357142857142858 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336762, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321832, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955858, 0.0, 8.366600265340768, -1.18321595661993, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739498, 0.0, 0.0, 8.694826047713665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947011, -3.3935649046180636e-14, -3.346640106136308, -2.3664319132398495, 15.491933384829666, 0.0, 0.0, 0.6928203230275537, 0.5656854249492373, 0.39999999999999886, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.8989794855663495, 0.0, 0.0, 0.0, 14.198591479439074, -0.828078671210824, 1.2098624933629525e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0884716495130443e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 0.0, 0.0, 0.0, 14.342743312012727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000134, 0.0, 8.763560920082679, -1.549193338482974, 0.0, 0.0, 0.0, 9.524704719832533, -1.4813121596360834, 0.26186146828319146, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1176914536239795, 0.0, 3.162277660168379, 4.919349550499535, 0.0, 0.0, 0.0, 0.0, 10.690449676496982, -2.418972627259056, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5455844122715585, 0.0, 0.0, 7.66811580507228, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051666, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477958, 7.245688373094727, 4.1833001326703805, -0.5916079783099749, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869749, 0.0, 0.0, 4.3474130238568325, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646285, 0.0, 9.66091783079296, 0.6831300510639867, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.2403703492039373, 0.0, 0.0, 7.529940238806683, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244578, 2.449489742783181, 2.828427124746206, -1.0000000000000095, 9.165151389911685, 7.099295739719534, -0.41403933560541256, -2.049390153191928, -0.47809144373376167, 0.16903085094570522, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.1213203435596397, -0.40824829046386346, 3.1754264805429355, 0.0, 0.0, 7.171371656006364, 0.0, -1.380131118684709, -1.5614401167176546, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.80000000000001, -5.692099788303113, 4.381780460041349, -0.7745966692414907, 0.0, 10.998181667893988, 0.9621404708847333, 4.762352359916273, -0.7406560798180437, 0.1309307341415961, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119917, 2.7386127875258306, 1.5811388300841904, 2.4596747752497663, 0.0, 0.0, 9.258200997725515, 0.0, 5.345224838248491, -1.2094863136295253, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357735, 0.0, 0.0, 3.8340579025361397, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706658, 0.0, -3.162277660168412, -2.2360679774998027, 0.0, 0.0, 0.0, 13.747727084867515, 0.5345224838248532, 0.3779644730092276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999887, 0.0, 3.6514837167010707, -2.840187787218764, 0.0, 0.0, 0.0, 0.0, 12.344267996967348, 1.396594497510348, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048555, 0.0, 0.0, 6.640783086353614, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505551, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189435, 4.183300132670375, -0.5916079783099615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387008, 7.099295739719542, 0.0, 4.347413023856828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323076, 0.0, 3.864367132317193, -0.3415650255319911, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.080123449734629, 0.0, 7.099295739719546, 2.509980079602214, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299173, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724463, 2.4494897427831743, 2.828427124746207, -1.000000000000009, 1.309307341415954, 7.099295739719537, -0.4140393356054117, -2.049390153191927, -0.4780914437337623, 0.16903085094570483, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498075, 2.121320343559647, -0.40824829046386685, 3.1754264805429337, 9.071147352221455, 0.0, 7.171371656006362, 0.0, -1.3801311186847083, -1.5614401167176528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000009, 0.6324555320336753, 4.381780460041344, -0.7745966692414884, 0.0, 3.142337619398289, -0.10690449676496958, 4.76235235991627, -0.7406560798180428, 0.13093073414159664, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119886, 0.5477225575051662, 1.5811388300841966, 2.4596747752497654, 0.0, 9.071147352221454, 1.851640199545103, 0.0, 5.345224838248489, -1.209486313629527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135779, -6.260990336999449, 0.0, 3.8340579025361414, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.039230484541329, 0.0, 3.162277660168365, -0.447213595499961, 0.0, 0.0, 0.0, 5.891883036371791, -0.5345224838248448, 0.07559289460184586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.89999999999999, 0.0, 1.4605934866803583, 1.4200938936093819, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786952, -0.6982972487551772, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.260990336999394, 2.2135943621178726, 0.0, 0.0, 0.0, 0.0, 10.583005244258366, 2.993325909419166, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977288, 0.0, 0.0, -4.695742752749563, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110028, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 12:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, -0.09780759955449392, -0.07905694150420953, -0.031943828249996975, 0.054894379103355005, -0.014173667737845985, 0.04629100498862756, -0.02454951265154914, 0.013363062095621214, 0.02362277956307672, 0.0, 0.04791574237499549, -0.006916041689656096, 0.0618589574131742, 0.016071428571428563, -0.008748177652797059, 0.04285714285714286, 0.015464739353293537, 0.0, -0.005357142857142868 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336762, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321832, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955858, 0.0, 8.366600265340768, -1.18321595661993, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739498, 0.0, 0.0, 8.694826047713665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947011, -3.3935649046180636e-14, -3.346640106136308, -2.3664319132398495, 15.491933384829666, 0.0, 0.0, 0.6928203230275537, 0.5656854249492373, 0.39999999999999886, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.8989794855663495, 0.0, 0.0, 0.0, 14.198591479439074, -0.828078671210824, 1.2098624933629525e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0884716495130443e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 0.0, 0.0, 0.0, 14.342743312012727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000134, 0.0, 8.763560920082679, -1.549193338482974, 0.0, 0.0, 0.0, 9.524704719832533, -1.4813121596360834, 0.26186146828319146, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1176914536239795, 0.0, 3.162277660168379, 4.919349550499535, 0.0, 0.0, 0.0, 0.0, 10.690449676496982, -2.418972627259056, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5455844122715585, 0.0, 0.0, 7.66811580507228, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051666, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477958, 7.245688373094727, 4.1833001326703805, -0.5916079783099749, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869749, 0.0, 0.0, 4.3474130238568325, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646285, 0.0, 9.66091783079296, 0.6831300510639867, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.2403703492039373, 0.0, 0.0, 7.529940238806683, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244578, 2.449489742783181, 2.828427124746206, -1.0000000000000095, 9.165151389911685, 7.099295739719534, -0.41403933560541256, -2.049390153191928, -0.47809144373376167, 0.16903085094570522, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.1213203435596397, -0.40824829046386346, 3.1754264805429355, 0.0, 0.0, 7.171371656006364, 0.0, -1.380131118684709, -1.5614401167176546, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.80000000000001, -5.692099788303113, 4.381780460041349, -0.7745966692414907, 0.0, 10.998181667893988, 0.9621404708847333, 4.762352359916273, -0.7406560798180437, 0.1309307341415961, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119917, 2.7386127875258306, 1.5811388300841904, 2.4596747752497663, 0.0, 0.0, 9.258200997725515, 0.0, 5.345224838248491, -1.2094863136295253, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357735, 0.0, 0.0, 3.8340579025361397, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706658, 0.0, -3.162277660168412, -2.2360679774998027, 0.0, 0.0, 0.0, 13.747727084867515, 0.5345224838248532, 0.3779644730092276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999887, 0.0, 3.6514837167010707, -2.840187787218764, 0.0, 0.0, 0.0, 0.0, 12.344267996967348, 1.396594497510348, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048555, 0.0, 0.0, 6.640783086353614, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505551, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189435, 4.183300132670375, -0.5916079783099615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387008, 7.099295739719542, 0.0, 4.347413023856828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323076, 0.0, 3.864367132317193, -0.3415650255319911, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.080123449734629, 0.0, 7.099295739719546, 2.509980079602214, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299173, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724463, 2.4494897427831743, 2.828427124746207, -1.000000000000009, 1.309307341415954, 7.099295739719537, -0.4140393356054117, -2.049390153191927, -0.4780914437337623, 0.16903085094570483, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498075, 2.121320343559647, -0.40824829046386685, 3.1754264805429337, 9.071147352221455, 0.0, 7.171371656006362, 0.0, -1.3801311186847083, -1.5614401167176528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000009, 0.6324555320336753, 4.381780460041344, -0.7745966692414884, 0.0, 3.142337619398289, -0.10690449676496958, 4.76235235991627, -0.7406560798180428, 0.13093073414159664, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119886, 0.5477225575051662, 1.5811388300841966, 2.4596747752497654, 0.0, 9.071147352221454, 1.851640199545103, 0.0, 5.345224838248489, -1.209486313629527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135779, -6.260990336999449, 0.0, 3.8340579025361414, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.039230484541329, 0.0, 3.162277660168365, -0.447213595499961, 0.0, 0.0, 0.0, 5.891883036371791, -0.5345224838248448, 0.07559289460184586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.89999999999999, 0.0, 1.4605934866803583, 1.4200938936093819, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786952, -0.6982972487551772, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.260990336999394, 2.2135943621178726, 0.0, 0.0, 0.0, 0.0, 10.583005244258366, 2.993325909419166, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977288, 0.0, 0.0, -4.695742752749563, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110028, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 13:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, 0.019561519910898776, 0.12423233664947204, -0.031943828249996996, 0.0, -0.0566946709513841, 0.0115727512471569, 0.024549512651549157, -0.04677071733467428, 0.023622779563076696, 0.0, 0.0, 0.0, -0.0618589574131742, 0.021428571428571446, -0.004374088826398529, -0.0642857142857143, 0.00927884361197614, 0.007576144084141581, -0.005357142857142856 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336762, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321832, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955858, 0.0, 8.366600265340768, -1.18321595661993, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739498, 0.0, 0.0, 8.694826047713665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947011, -3.3935649046180636e-14, -3.346640106136308, -2.3664319132398495, 15.491933384829666, 0.0, 0.0, 0.6928203230275537, 0.5656854249492373, 0.39999999999999886, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.8989794855663495, 0.0, 0.0, 0.0, 14.198591479439074, -0.828078671210824, 1.2098624933629525e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0884716495130443e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 0.0, 0.0, 0.0, 14.342743312012727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000134, 0.0, 8.763560920082679, -1.549193338482974, 0.0, 0.0, 0.0, 9.524704719832533, -1.4813121596360834, 0.26186146828319146, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1176914536239795, 0.0, 3.162277660168379, 4.919349550499535, 0.0, 0.0, 0.0, 0.0, 10.690449676496982, -2.418972627259056, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5455844122715585, 0.0, 0.0, 7.66811580507228, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051666, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477958, 7.245688373094727, 4.1833001326703805, -0.5916079783099749, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869749, 0.0, 0.0, 4.3474130238568325, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646285, 0.0, 9.66091783079296, 0.6831300510639867, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.2403703492039373, 0.0, 0.0, 7.529940238806683, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244578, 2.449489742783181, 2.828427124746206, -1.0000000000000095, 9.165151389911685, 7.099295739719534, -0.41403933560541256, -2.049390153191928, -0.47809144373376167, 0.16903085094570522, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.1213203435596397, -0.40824829046386346, 3.1754264805429355, 0.0, 0.0, 7.171371656006364, 0.0, -1.380131118684709, -1.5614401167176546, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.80000000000001, -5.692099788303113, 4.381780460041349, -0.7745966692414907, 0.0, 10.998181667893988, 0.9621404708847333, 4.762352359916273, -0.7406560798180437, 0.1309307341415961, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119917, 2.7386127875258306, 1.5811388300841904, 2.4596747752497663, 0.0, 0.0, 9.258200997725515, 0.0, 5.345224838248491, -1.2094863136295253, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357735, 0.0, 0.0, 3.8340579025361397, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706658, 0.0, -3.162277660168412, -2.2360679774998027, 0.0, 0.0, 0.0, 13.747727084867515, 0.5345224838248532, 0.3779644730092276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999887, 0.0, 3.6514837167010707, -2.840187787218764, 0.0, 0.0, 0.0, 0.0, 12.344267996967348, 1.396594497510348, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048555, 0.0, 0.0, 6.640783086353614, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505551, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189435, 4.183300132670375, -0.5916079783099615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387008, 7.099295739719542, 0.0, 4.347413023856828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323076, 0.0, 3.864367132317193, -0.3415650255319911, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.080123449734629, 0.0, 7.099295739719546, 2.509980079602214, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299173, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724463, 2.4494897427831743, 2.828427124746207, -1.000000000000009, 1.309307341415954, 7.099295739719537, -0.4140393356054117, -2.049390153191927, -0.4780914437337623, 0.16903085094570483, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498075, 2.121320343559647, -0.40824829046386685, 3.1754264805429337, 9.071147352221455, 0.0, 7.171371656006362, 0.0, -1.3801311186847083, -1.5614401167176528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000009, 0.6324555320336753, 4.381780460041344, -0.7745966692414884, 0.0, 3.142337619398289, -0.10690449676496958, 4.76235235991627, -0.7406560798180428, 0.13093073414159664, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119886, 0.5477225575051662, 1.5811388300841966, 2.4596747752497654, 0.0, 9.071147352221454, 1.851640199545103, 0.0, 5.345224838248489, -1.209486313629527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135779, -6.260990336999449, 0.0, 3.8340579025361414, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.039230484541329, 0.0, 3.162277660168365, -0.447213595499961, 0.0, 0.0, 0.0, 5.891883036371791, -0.5345224838248448, 0.07559289460184586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.89999999999999, 0.0, 1.4605934866803583, 1.4200938936093819, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786952, -0.6982972487551772, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.260990336999394, 2.2135943621178726, 0.0, 0.0, 0.0, 0.0, 10.583005244258366, 2.993325909419166, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977288, 0.0, 0.0, -4.695742752749563, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110028, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 14:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, -0.11736911946539277, -0.04517539514526254, -0.03194382824999702, -0.01829812636778497, 0.04252100321353806, 0.03471825374147069, 0.040915854419248575, 0.03340765523905304, 0.023622779563076717, 0.08504200642707613, 0.023957871187497745, 0.02074812506896832, -0.006185895741317411, -0.005357142857142858, -0.004374088826398521, -0.01071428571428572, -0.009278843611976124, -0.007576144084141591, -0.00535714285714286 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336762, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321832, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955858, 0.0, 8.366600265340768, -1.18321595661993, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739498, 0.0, 0.0, 8.694826047713665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947011, -3.3935649046180636e-14, -3.346640106136308, -2.3664319132398495, 15.491933384829666, 0.0, 0.0, 0.6928203230275537, 0.5656854249492373, 0.39999999999999886, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.8989794855663495, 0.0, 0.0, 0.0, 14.198591479439074, -0.828078671210824, 1.2098624933629525e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0884716495130443e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 0.0, 0.0, 0.0, 14.342743312012727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000134, 0.0, 8.763560920082679, -1.549193338482974, 0.0, 0.0, 0.0, 9.524704719832533, -1.4813121596360834, 0.26186146828319146, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1176914536239795, 0.0, 3.162277660168379, 4.919349550499535, 0.0, 0.0, 0.0, 0.0, 10.690449676496982, -2.418972627259056, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5455844122715585, 0.0, 0.0, 7.66811580507228, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051666, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477958, 7.245688373094727, 4.1833001326703805, -0.5916079783099749, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869749, 0.0, 0.0, 4.3474130238568325, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646285, 0.0, 9.66091783079296, 0.6831300510639867, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.2403703492039373, 0.0, 0.0, 7.529940238806683, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244578, 2.449489742783181, 2.828427124746206, -1.0000000000000095, 9.165151389911685, 7.099295739719534, -0.41403933560541256, -2.049390153191928, -0.47809144373376167, 0.16903085094570522, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.1213203435596397, -0.40824829046386346, 3.1754264805429355, 0.0, 0.0, 7.171371656006364, 0.0, -1.380131118684709, -1.5614401167176546, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.80000000000001, -5.692099788303113, 4.381780460041349, -0.7745966692414907, 0.0, 10.998181667893988, 0.9621404708847333, 4.762352359916273, -0.7406560798180437, 0.1309307341415961, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119917, 2.7386127875258306, 1.5811388300841904, 2.4596747752497663, 0.0, 0.0, 9.258200997725515, 0.0, 5.345224838248491, -1.2094863136295253, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357735, 0.0, 0.0, 3.8340579025361397, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706658, 0.0, -3.162277660168412, -2.2360679774998027, 0.0, 0.0, 0.0, 13.747727084867515, 0.5345224838248532, 0.3779644730092276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999887, 0.0, 3.6514837167010707, -2.840187787218764, 0.0, 0.0, 0.0, 0.0, 12.344267996967348, 1.396594497510348, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048555, 0.0, 0.0, 6.640783086353614, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505551, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189435, 4.183300132670375, -0.5916079783099615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387008, 7.099295739719542, 0.0, 4.347413023856828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323076, 0.0, 3.864367132317193, -0.3415650255319911, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.080123449734629, 0.0, 7.099295739719546, 2.509980079602214, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299173, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724463, 2.4494897427831743, 2.828427124746207, -1.000000000000009, 1.309307341415954, 7.099295739719537, -0.4140393356054117, -2.049390153191927, -0.4780914437337623, 0.16903085094570483, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498075, 2.121320343559647, -0.40824829046386685, 3.1754264805429337, 9.071147352221455, 0.0, 7.171371656006362, 0.0, -1.3801311186847083, -1.5614401167176528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000009, 0.6324555320336753, 4.381780460041344, -0.7745966692414884, 0.0, 3.142337619398289, -0.10690449676496958, 4.76235235991627, -0.7406560798180428, 0.13093073414159664, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119886, 0.5477225575051662, 1.5811388300841966, 2.4596747752497654, 0.0, 9.071147352221454, 1.851640199545103, 0.0, 5.345224838248489, -1.209486313629527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135779, -6.260990336999449, 0.0, 3.8340579025361414, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.039230484541329, 0.0, 3.162277660168365, -0.447213595499961, 0.0, 0.0, 0.0, 5.891883036371791, -0.5345224838248448, 0.07559289460184586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.89999999999999, 0.0, 1.4605934866803583, 1.4200938936093819, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786952, -0.6982972487551772, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.260990336999394, 2.2135943621178726, 0.0, 0.0, 0.0, 0.0, 10.583005244258366, 2.993325909419166, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977288, 0.0, 0.0, -4.695742752749563, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110028, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 15:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, 0.11736911946539276, -0.04517539514526255, -0.03194382824999698, -0.018298126367784988, -0.04252100321353805, -0.03471825374147069, 0.04091585441924858, 0.033407655239053057, 0.023622779563076693, -0.08504200642707613, 0.02395787118749776, 0.02074812506896831, 0.006185895741317411, 0.005357142857142859, 0.004374088826398524, -0.01071428571428572, -0.009278843611976131, -0.007576144084141586, -0.0053571428571428555 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336762, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321832, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955858, 0.0, 8.366600265340768, -1.18321595661993, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739498, 0.0, 0.0, 8.694826047713665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947011, -3.3935649046180636e-14, -3.346640106136308, -2.3664319132398495, 15.491933384829666, 0.0, 0.0, 0.6928203230275537, 0.5656854249492373, 0.39999999999999886, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.8989794855663495, 0.0, 0.0, 0.0, 14.198591479439074, -0.828078671210824, 1.2098624933629525e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0884716495130443e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 0.0, 0.0, 0.0, 14.342743312012727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000134, 0.0, 8.763560920082679, -1.549193338482974, 0.0, 0.0, 0.0, 9.524704719832533, -1.4813121596360834, 0.26186146828319146, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1176914536239795, 0.0, 3.162277660168379, 4.919349550499535, 0.0, 0.0, 0.0, 0.0, 10.690449676496982, -2.418972627259056, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5455844122715585, 0.0, 0.0, 7.66811580507228, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051666, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477958, 7.245688373094727, 4.1833001326703805, -0.5916079783099749, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869749, 0.0, 0.0, 4.3474130238568325, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646285, 0.0, 9.66091783079296, 0.6831300510639867, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.2403703492039373, 0.0, 0.0, 7.529940238806683, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244578, 2.449489742783181, 2.828427124746206, -1.0000000000000095, 9.165151389911685, 7.099295739719534, -0.41403933560541256, -2.049390153191928, -0.47809144373376167, 0.16903085094570522, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.1213203435596397, -0.40824829046386346, 3.1754264805429355, 0.0, 0.0, 7.171371656006364, 0.0, -1.380131118684709, -1.5614401167176546, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.80000000000001, -5.692099788303113, 4.381780460041349, -0.7745966692414907, 0.0, 10.998181667893988, 0.9621404708847333, 4.762352359916273, -0.7406560798180437, 0.1309307341415961, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119917, 2.7386127875258306, 1.5811388300841904, 2.4596747752497663, 0.0, 0.0, 9.258200997725515, 0.0, 5.345224838248491, -1.2094863136295253, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357735, 0.0, 0.0, 3.8340579025361397, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706658, 0.0, -3.162277660168412, -2.2360679774998027, 0.0, 0.0, 0.0, 13.747727084867515, 0.5345224838248532, 0.3779644730092276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999887, 0.0, 3.6514837167010707, -2.840187787218764, 0.0, 0.0, 0.0, 0.0, 12.344267996967348, 1.396594497510348, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048555, 0.0, 0.0, 6.640783086353614, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505551, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189435, 4.183300132670375, -0.5916079783099615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387008, 7.099295739719542, 0.0, 4.347413023856828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323076, 0.0, 3.864367132317193, -0.3415650255319911, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.080123449734629, 0.0, 7.099295739719546, 2.509980079602214, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299173, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724463, 2.4494897427831743, 2.828427124746207, -1.000000000000009, 1.309307341415954, 7.099295739719537, -0.4140393356054117, -2.049390153191927, -0.4780914437337623, 0.16903085094570483, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498075, 2.121320343559647, -0.40824829046386685, 3.1754264805429337, 9.071147352221455, 0.0, 7.171371656006362, 0.0, -1.3801311186847083, -1.5614401167176528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000009, 0.6324555320336753, 4.381780460041344, -0.7745966692414884, 0.0, 3.142337619398289, -0.10690449676496958, 4.76235235991627, -0.7406560798180428, 0.13093073414159664, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119886, 0.5477225575051662, 1.5811388300841966, 2.4596747752497654, 0.0, 9.071147352221454, 1.851640199545103, 0.0, 5.345224838248489, -1.209486313629527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135779, -6.260990336999449, 0.0, 3.8340579025361414, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.039230484541329, 0.0, 3.162277660168365, -0.447213595499961, 0.0, 0.0, 0.0, 5.891883036371791, -0.5345224838248448, 0.07559289460184586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.89999999999999, 0.0, 1.4605934866803583, 1.4200938936093819, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786952, -0.6982972487551772, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.260990336999394, 2.2135943621178726, 0.0, 0.0, 0.0, 0.0, 10.583005244258366, 2.993325909419166, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977288, 0.0, 0.0, -4.695742752749563, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110028, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 16:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.2598076211353317, 0.11736911946539266, 0.06776309271789384, 0.0479157423749955, 0.0, 0.0850420064270761, 0.06943650748294135, -0.07364853795464742, 0.04008918628686366, -0.09921567416492216, 0.0, 0.0, 0.0, 0.0, 0.07500000000000001, -0.026244532958391176, 0.0, -0.06495190528383289, -0.015152288168283167, 0.02678571428571429 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336762, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321832, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955858, 0.0, 8.366600265340768, -1.18321595661993, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739498, 0.0, 0.0, 8.694826047713665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947011, -3.3935649046180636e-14, -3.346640106136308, -2.3664319132398495, 15.491933384829666, 0.0, 0.0, 0.6928203230275537, 0.5656854249492373, 0.39999999999999886, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.8989794855663495, 0.0, 0.0, 0.0, 14.198591479439074, -0.828078671210824, 1.2098624933629525e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0884716495130443e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 0.0, 0.0, 0.0, 14.342743312012727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000134, 0.0, 8.763560920082679, -1.549193338482974, 0.0, 0.0, 0.0, 9.524704719832533, -1.4813121596360834, 0.26186146828319146, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1176914536239795, 0.0, 3.162277660168379, 4.919349550499535, 0.0, 0.0, 0.0, 0.0, 10.690449676496982, -2.418972627259056, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5455844122715585, 0.0, 0.0, 7.66811580507228, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051666, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477958, 7.245688373094727, 4.1833001326703805, -0.5916079783099749, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869749, 0.0, 0.0, 4.3474130238568325, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646285, 0.0, 9.66091783079296, 0.6831300510639867, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.2403703492039373, 0.0, 0.0, 7.529940238806683, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244578, 2.449489742783181, 2.828427124746206, -1.0000000000000095, 9.165151389911685, 7.099295739719534, -0.41403933560541256, -2.049390153191928, -0.47809144373376167, 0.16903085094570522, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.1213203435596397, -0.40824829046386346, 3.1754264805429355, 0.0, 0.0, 7.171371656006364, 0.0, -1.380131118684709, -1.5614401167176546, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.80000000000001, -5.692099788303113, 4.381780460041349, -0.7745966692414907, 0.0, 10.998181667893988, 0.9621404708847333, 4.762352359916273, -0.7406560798180437, 0.1309307341415961, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119917, 2.7386127875258306, 1.5811388300841904, 2.4596747752497663, 0.0, 0.0, 9.258200997725515, 0.0, 5.345224838248491, -1.2094863136295253, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357735, 0.0, 0.0, 3.8340579025361397, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706658, 0.0, -3.162277660168412, -2.2360679774998027, 0.0, 0.0, 0.0, 13.747727084867515, 0.5345224838248532, 0.3779644730092276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999887, 0.0, 3.6514837167010707, -2.840187787218764, 0.0, 0.0, 0.0, 0.0, 12.344267996967348, 1.396594497510348, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048555, 0.0, 0.0, 6.640783086353614, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505551, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189435, 4.183300132670375, -0.5916079783099615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387008, 7.099295739719542, 0.0, 4.347413023856828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323076, 0.0, 3.864367132317193, -0.3415650255319911, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.080123449734629, 0.0, 7.099295739719546, 2.509980079602214, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299173, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724463, 2.4494897427831743, 2.828427124746207, -1.000000000000009, 1.309307341415954, 7.099295739719537, -0.4140393356054117, -2.049390153191927, -0.4780914437337623, 0.16903085094570483, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498075, 2.121320343559647, -0.40824829046386685, 3.1754264805429337, 9.071147352221455, 0.0, 7.171371656006362, 0.0, -1.3801311186847083, -1.5614401167176528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000009, 0.6324555320336753, 4.381780460041344, -0.7745966692414884, 0.0, 3.142337619398289, -0.10690449676496958, 4.76235235991627, -0.7406560798180428, 0.13093073414159664, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119886, 0.5477225575051662, 1.5811388300841966, 2.4596747752497654, 0.0, 9.071147352221454, 1.851640199545103, 0.0, 5.345224838248489, -1.209486313629527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135779, -6.260990336999449, 0.0, 3.8340579025361414, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.039230484541329, 0.0, 3.162277660168365, -0.447213595499961, 0.0, 0.0, 0.0, 5.891883036371791, -0.5345224838248448, 0.07559289460184586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.89999999999999, 0.0, 1.4605934866803583, 1.4200938936093819, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786952, -0.6982972487551772, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.260990336999394, 2.2135943621178726, 0.0, 0.0, 0.0, 0.0, 10.583005244258366, 2.993325909419166, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977288, 0.0, 0.0, -4.695742752749563, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110028, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 17:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.2598076211353316, -0.11736911946539272, 0.0677630927178939, 0.047915742374995435, 0.0, -0.08504200642707613, -0.06943650748294138, -0.0736485379546474, 0.04008918628686368, -0.09921567416492216, 0.0, 0.0, 0.0, 0.0, -0.07500000000000001, 0.02624453295839119, 0.0, -0.06495190528383286, -0.015152288168283169, 0.02678571428571431 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336762, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321832, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955858, 0.0, 8.366600265340768, -1.18321595661993, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739498, 0.0, 0.0, 8.694826047713665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947011, -3.3935649046180636e-14, -3.346640106136308, -2.3664319132398495, 15.491933384829666, 0.0, 0.0, 0.6928203230275537, 0.5656854249492373, 0.39999999999999886, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.8989794855663495, 0.0, 0.0, 0.0, 14.198591479439074, -0.828078671210824, 1.2098624933629525e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0884716495130443e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 0.0, 0.0, 0.0, 14.342743312012727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000134, 0.0, 8.763560920082679, -1.549193338482974, 0.0, 0.0, 0.0, 9.524704719832533, -1.4813121596360834, 0.26186146828319146, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1176914536239795, 0.0, 3.162277660168379, 4.919349550499535, 0.0, 0.0, 0.0, 0.0, 10.690449676496982, -2.418972627259056, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5455844122715585, 0.0, 0.0, 7.66811580507228, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051666, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477958, 7.245688373094727, 4.1833001326703805, -0.5916079783099749, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869749, 0.0, 0.0, 4.3474130238568325, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646285, 0.0, 9.66091783079296, 0.6831300510639867, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.2403703492039373, 0.0, 0.0, 7.529940238806683, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244578, 2.449489742783181, 2.828427124746206, -1.0000000000000095, 9.165151389911685, 7.099295739719534, -0.41403933560541256, -2.049390153191928, -0.47809144373376167, 0.16903085094570522, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.1213203435596397, -0.40824829046386346, 3.1754264805429355, 0.0, 0.0, 7.171371656006364, 0.0, -1.380131118684709, -1.5614401167176546, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.80000000000001, -5.692099788303113, 4.381780460041349, -0.7745966692414907, 0.0, 10.998181667893988, 0.9621404708847333, 4.762352359916273, -0.7406560798180437, 0.1309307341415961, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119917, 2.7386127875258306, 1.5811388300841904, 2.4596747752497663, 0.0, 0.0, 9.258200997725515, 0.0, 5.345224838248491, -1.2094863136295253, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357735, 0.0, 0.0, 3.8340579025361397, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706658, 0.0, -3.162277660168412, -2.2360679774998027, 0.0, 0.0, 0.0, 13.747727084867515, 0.5345224838248532, 0.3779644730092276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999887, 0.0, 3.6514837167010707, -2.840187787218764, 0.0, 0.0, 0.0, 0.0, 12.344267996967348, 1.396594497510348, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048555, 0.0, 0.0, 6.640783086353614, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505551, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189435, 4.183300132670375, -0.5916079783099615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387008, 7.099295739719542, 0.0, 4.347413023856828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323076, 0.0, 3.864367132317193, -0.3415650255319911, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.080123449734629, 0.0, 7.099295739719546, 2.509980079602214, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299173, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724463, 2.4494897427831743, 2.828427124746207, -1.000000000000009, 1.309307341415954, 7.099295739719537, -0.4140393356054117, -2.049390153191927, -0.4780914437337623, 0.16903085094570483, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498075, 2.121320343559647, -0.40824829046386685, 3.1754264805429337, 9.071147352221455, 0.0, 7.171371656006362, 0.0, -1.3801311186847083, -1.5614401167176528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000009, 0.6324555320336753, 4.381780460041344, -0.7745966692414884, 0.0, 3.142337619398289, -0.10690449676496958, 4.76235235991627, -0.7406560798180428, 0.13093073414159664, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119886, 0.5477225575051662, 1.5811388300841966, 2.4596747752497654, 0.0, 9.071147352221454, 1.851640199545103, 0.0, 5.345224838248489, -1.209486313629527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135779, -6.260990336999449, 0.0, 3.8340579025361414, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.039230484541329, 0.0, 3.162277660168365, -0.447213595499961, 0.0, 0.0, 0.0, 5.891883036371791, -0.5345224838248448, 0.07559289460184586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.89999999999999, 0.0, 1.4605934866803583, 1.4200938936093819, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786952, -0.6982972487551772, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.260990336999394, 2.2135943621178726, 0.0, 0.0, 0.0, 0.0, 10.583005244258366, 2.993325909419166, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977288, 0.0, 0.0, -4.695742752749563, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110028, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 18:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.2598076211353315, 0.0, -0.1355261854357876, 0.04791574237499552, -0.10978875820671, 0.0, 0.0, 0.024549512651549112, -0.08017837257372729, -0.09921567416492215, 0.0, 0.0, -0.09682458365518544, 0.0, 0.0, 0.0, 0.0, 0.02165063509461095, 0.03030457633656631, 0.026785714285714277 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336762, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321832, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955858, 0.0, 8.366600265340768, -1.18321595661993, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739498, 0.0, 0.0, 8.694826047713665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947011, -3.3935649046180636e-14, -3.346640106136308, -2.3664319132398495, 15.491933384829666, 0.0, 0.0, 0.6928203230275537, 0.5656854249492373, 0.39999999999999886, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.8989794855663495, 0.0, 0.0, 0.0, 14.198591479439074, -0.828078671210824, 1.2098624933629525e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0884716495130443e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 0.0, 0.0, 0.0, 14.342743312012727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000134, 0.0, 8.763560920082679, -1.549193338482974, 0.0, 0.0, 0.0, 9.524704719832533, -1.4813121596360834, 0.26186146828319146, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1176914536239795, 0.0, 3.162277660168379, 4.919349550499535, 0.0, 0.0, 0.0, 0.0, 10.690449676496982, -2.418972627259056, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5455844122715585, 0.0, 0.0, 7.66811580507228, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051666, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477958, 7.245688373094727, 4.1833001326703805, -0.5916079783099749, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869749, 0.0, 0.0, 4.3474130238568325, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646285, 0.0, 9.66091783079296, 0.6831300510639867, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.2403703492039373, 0.0, 0.0, 7.529940238806683, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244578, 2.449489742783181, 2.828427124746206, -1.0000000000000095, 9.165151389911685, 7.099295739719534, -0.41403933560541256, -2.049390153191928, -0.47809144373376167, 0.16903085094570522, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.1213203435596397, -0.40824829046386346, 3.1754264805429355, 0.0, 0.0, 7.171371656006364, 0.0, -1.380131118684709, -1.5614401167176546, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.80000000000001, -5.692099788303113, 4.381780460041349, -0.7745966692414907, 0.0, 10.998181667893988, 0.9621404708847333, 4.762352359916273, -0.7406560798180437, 0.1309307341415961, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119917, 2.7386127875258306, 1.5811388300841904, 2.4596747752497663, 0.0, 0.0, 9.258200997725515, 0.0, 5.345224838248491, -1.2094863136295253, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357735, 0.0, 0.0, 3.8340579025361397, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706658, 0.0, -3.162277660168412, -2.2360679774998027, 0.0, 0.0, 0.0, 13.747727084867515, 0.5345224838248532, 0.3779644730092276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999887, 0.0, 3.6514837167010707, -2.840187787218764, 0.0, 0.0, 0.0, 0.0, 12.344267996967348, 1.396594497510348, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048555, 0.0, 0.0, 6.640783086353614, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505551, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189435, 4.183300132670375, -0.5916079783099615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387008, 7.099295739719542, 0.0, 4.347413023856828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323076, 0.0, 3.864367132317193, -0.3415650255319911, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.080123449734629, 0.0, 7.099295739719546, 2.509980079602214, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299173, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724463, 2.4494897427831743, 2.828427124746207, -1.000000000000009, 1.309307341415954, 7.099295739719537, -0.4140393356054117, -2.049390153191927, -0.4780914437337623, 0.16903085094570483, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498075, 2.121320343559647, -0.40824829046386685, 3.1754264805429337, 9.071147352221455, 0.0, 7.171371656006362, 0.0, -1.3801311186847083, -1.5614401167176528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000009, 0.6324555320336753, 4.381780460041344, -0.7745966692414884, 0.0, 3.142337619398289, -0.10690449676496958, 4.76235235991627, -0.7406560798180428, 0.13093073414159664, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119886, 0.5477225575051662, 1.5811388300841966, 2.4596747752497654, 0.0, 9.071147352221454, 1.851640199545103, 0.0, 5.345224838248489, -1.209486313629527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135779, -6.260990336999449, 0.0, 3.8340579025361414, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.039230484541329, 0.0, 3.162277660168365, -0.447213595499961, 0.0, 0.0, 0.0, 5.891883036371791, -0.5345224838248448, 0.07559289460184586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.89999999999999, 0.0, 1.4605934866803583, 1.4200938936093819, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786952, -0.6982972487551772, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.260990336999394, 2.2135943621178726, 0.0, 0.0, 0.0, 0.0, 10.583005244258366, 2.993325909419166, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977288, 0.0, 0.0, -4.695742752749563, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110028, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 19:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.2598076211353317, 0.0, 0.0, -0.14374722712498647, -0.10978875820671001, 0.0, 0.0, -0.12274756325774572, 0.0, 0.042521003213538064, 0.0, -0.095831484749991, 0.013832083379312196, 0.0, 0.0, 0.0, 0.042857142857142864, 0.015464739353293549, 0.0, -0.005357142857142852 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336762, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321832, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955858, 0.0, 8.366600265340768, -1.18321595661993, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739498, 0.0, 0.0, 8.694826047713665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947011, -3.3935649046180636e-14, -3.346640106136308, -2.3664319132398495, 15.491933384829666, 0.0, 0.0, 0.6928203230275537, 0.5656854249492373, 0.39999999999999886, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.8989794855663495, 0.0, 0.0, 0.0, 14.198591479439074, -0.828078671210824, 1.2098624933629525e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0884716495130443e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 0.0, 0.0, 0.0, 14.342743312012727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000134, 0.0, 8.763560920082679, -1.549193338482974, 0.0, 0.0, 0.0, 9.524704719832533, -1.4813121596360834, 0.26186146828319146, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1176914536239795, 0.0, 3.162277660168379, 4.919349550499535, 0.0, 0.0, 0.0, 0.0, 10.690449676496982, -2.418972627259056, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5455844122715585, 0.0, 0.0, 7.66811580507228, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051666, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477958, 7.245688373094727, 4.1833001326703805, -0.5916079783099749, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869749, 0.0, 0.0, 4.3474130238568325, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646285, 0.0, 9.66091783079296, 0.6831300510639867, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.2403703492039373, 0.0, 0.0, 7.529940238806683, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244578, 2.449489742783181, 2.828427124746206, -1.0000000000000095, 9.165151389911685, 7.099295739719534, -0.41403933560541256, -2.049390153191928, -0.47809144373376167, 0.16903085094570522, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.1213203435596397, -0.40824829046386346, 3.1754264805429355, 0.0, 0.0, 7.171371656006364, 0.0, -1.380131118684709, -1.5614401167176546, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.80000000000001, -5.692099788303113, 4.381780460041349, -0.7745966692414907, 0.0, 10.998181667893988, 0.9621404708847333, 4.762352359916273, -0.7406560798180437, 0.1309307341415961, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119917, 2.7386127875258306, 1.5811388300841904, 2.4596747752497663, 0.0, 0.0, 9.258200997725515, 0.0, 5.345224838248491, -1.2094863136295253, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357735, 0.0, 0.0, 3.8340579025361397, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706658, 0.0, -3.162277660168412, -2.2360679774998027, 0.0, 0.0, 0.0, 13.747727084867515, 0.5345224838248532, 0.3779644730092276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999887, 0.0, 3.6514837167010707, -2.840187787218764, 0.0, 0.0, 0.0, 0.0, 12.344267996967348, 1.396594497510348, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048555, 0.0, 0.0, 6.640783086353614, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505551, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189435, 4.183300132670375, -0.5916079783099615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387008, 7.099295739719542, 0.0, 4.347413023856828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323076, 0.0, 3.864367132317193, -0.3415650255319911, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.080123449734629, 0.0, 7.099295739719546, 2.509980079602214, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299173, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724463, 2.4494897427831743, 2.828427124746207, -1.000000000000009, 1.309307341415954, 7.099295739719537, -0.4140393356054117, -2.049390153191927, -0.4780914437337623, 0.16903085094570483, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498075, 2.121320343559647, -0.40824829046386685, 3.1754264805429337, 9.071147352221455, 0.0, 7.171371656006362, 0.0, -1.3801311186847083, -1.5614401167176528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000009, 0.6324555320336753, 4.381780460041344, -0.7745966692414884, 0.0, 3.142337619398289, -0.10690449676496958, 4.76235235991627, -0.7406560798180428, 0.13093073414159664, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119886, 0.5477225575051662, 1.5811388300841966, 2.4596747752497654, 0.0, 9.071147352221454, 1.851640199545103, 0.0, 5.345224838248489, -1.209486313629527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135779, -6.260990336999449, 0.0, 3.8340579025361414, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.039230484541329, 0.0, 3.162277660168365, -0.447213595499961, 0.0, 0.0, 0.0, 5.891883036371791, -0.5345224838248448, 0.07559289460184586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.89999999999999, 0.0, 1.4605934866803583, 1.4200938936093819, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786952, -0.6982972487551772, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.260990336999394, 2.2135943621178726, 0.0, 0.0, 0.0, 0.0, 10.583005244258366, 2.993325909419166, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977288, 0.0, 0.0, -4.695742752749563, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110028, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 20:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.028867513459481377, 0.01304101327393252, 0.007529232524210424, 0.005323971374999493, 0.01829812636778498, 0.014173667737846016, 0.011572751247156891, 0.008183170883849705, 0.006681531047810616, 0.004724555912615332, -0.028347335475692043, -0.023957871187497756, -0.020748125068968316, -0.01855768722395226, -0.016071428571428573, -0.013122266479195604, -0.010714285714285692, -0.009278843611976116, -0.007576144084141579, -0.00535714285714285 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336762, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321832, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955858, 0.0, 8.366600265340768, -1.18321595661993, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739498, 0.0, 0.0, 8.694826047713665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947011, -3.3935649046180636e-14, -3.346640106136308, -2.3664319132398495, 15.491933384829666, 0.0, 0.0, 0.6928203230275537, 0.5656854249492373, 0.39999999999999886, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.8989794855663495, 0.0, 0.0, 0.0, 14.198591479439074, -0.828078671210824, 1.2098624933629525e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0884716495130443e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 0.0, 0.0, 0.0, 14.342743312012727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000134, 0.0, 8.763560920082679, -1.549193338482974, 0.0, 0.0, 0.0, 9.524704719832533, -1.4813121596360834, 0.26186146828319146, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1176914536239795, 0.0, 3.162277660168379, 4.919349550499535, 0.0, 0.0, 0.0, 0.0, 10.690449676496982, -2.418972627259056, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5455844122715585, 0.0, 0.0, 7.66811580507228, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051666, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477958, 7.245688373094727, 4.1833001326703805, -0.5916079783099749, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869749, 0.0, 0.0, 4.3474130238568325, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646285, 0.0, 9.66091783079296, 0.6831300510639867, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.2403703492039373, 0.0, 0.0, 7.529940238806683, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244578, 2.449489742783181, 2.828427124746206, -1.0000000000000095, 9.165151389911685, 7.099295739719534, -0.41403933560541256, -2.049390153191928, -0.47809144373376167, 0.16903085094570522, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.1213203435596397, -0.40824829046386346, 3.1754264805429355, 0.0, 0.0, 7.171371656006364, 0.0, -1.380131118684709, -1.5614401167176546, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.80000000000001, -5.692099788303113, 4.381780460041349, -0.7745966692414907, 0.0, 10.998181667893988, 0.9621404708847333, 4.762352359916273, -0.7406560798180437, 0.1309307341415961, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119917, 2.7386127875258306, 1.5811388300841904, 2.4596747752497663, 0.0, 0.0, 9.258200997725515, 0.0, 5.345224838248491, -1.2094863136295253, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357735, 0.0, 0.0, 3.8340579025361397, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706658, 0.0, -3.162277660168412, -2.2360679774998027, 0.0, 0.0, 0.0, 13.747727084867515, 0.5345224838248532, 0.3779644730092276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999887, 0.0, 3.6514837167010707, -2.840187787218764, 0.0, 0.0, 0.0, 0.0, 12.344267996967348, 1.396594497510348, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048555, 0.0, 0.0, 6.640783086353614, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505551, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189435, 4.183300132670375, -0.5916079783099615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387008, 7.099295739719542, 0.0, 4.347413023856828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323076, 0.0, 3.864367132317193, -0.3415650255319911, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.080123449734629, 0.0, 7.099295739719546, 2.509980079602214, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299173, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724463, 2.4494897427831743, 2.828427124746207, -1.000000000000009, 1.309307341415954, 7.099295739719537, -0.4140393356054117, -2.049390153191927, -0.4780914437337623, 0.16903085094570483, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498075, 2.121320343559647, -0.40824829046386685, 3.1754264805429337, 9.071147352221455, 0.0, 7.171371656006362, 0.0, -1.3801311186847083, -1.5614401167176528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000009, 0.6324555320336753, 4.381780460041344, -0.7745966692414884, 0.0, 3.142337619398289, -0.10690449676496958, 4.76235235991627, -0.7406560798180428, 0.13093073414159664, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119886, 0.5477225575051662, 1.5811388300841966, 2.4596747752497654, 0.0, 9.071147352221454, 1.851640199545103, 0.0, 5.345224838248489, -1.209486313629527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135779, -6.260990336999449, 0.0, 3.8340579025361414, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.039230484541329, 0.0, 3.162277660168365, -0.447213595499961, 0.0, 0.0, 0.0, 5.891883036371791, -0.5345224838248448, 0.07559289460184586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.89999999999999, 0.0, 1.4605934866803583, 1.4200938936093819, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786952, -0.6982972487551772, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.260990336999394, 2.2135943621178726, 0.0, 0.0, 0.0, 0.0, 10.583005244258366, 2.993325909419166, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977288, 0.0, 0.0, -4.695742752749563, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110028, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 21:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.028867513459481454, -0.01304101327393248, 0.007529232524210435, 0.005323971374999493, 0.018298126367784984, -0.014173667737846004, -0.011572751247156891, 0.008183170883849717, 0.0066815310478106045, 0.004724555912615337, 0.028347335475692036, -0.02395787118749775, -0.020748125068968302, 0.01855768722395226, 0.01607142857142858, 0.013122266479195593, -0.010714285714285723, -0.00927884361197613, -0.00757614408414158, -0.005357142857142854 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336762, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321832, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955858, 0.0, 8.366600265340768, -1.18321595661993, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739498, 0.0, 0.0, 8.694826047713665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947011, -3.3935649046180636e-14, -3.346640106136308, -2.3664319132398495, 15.491933384829666, 0.0, 0.0, 0.6928203230275537, 0.5656854249492373, 0.39999999999999886, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.8989794855663495, 0.0, 0.0, 0.0, 14.198591479439074, -0.828078671210824, 1.2098624933629525e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0884716495130443e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 0.0, 0.0, 0.0, 14.342743312012727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000134, 0.0, 8.763560920082679, -1.549193338482974, 0.0, 0.0, 0.0, 9.524704719832533, -1.4813121596360834, 0.26186146828319146, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1176914536239795, 0.0, 3.162277660168379, 4.919349550499535, 0.0, 0.0, 0.0, 0.0, 10.690449676496982, -2.418972627259056, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5455844122715585, 0.0, 0.0, 7.66811580507228, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051666, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477958, 7.245688373094727, 4.1833001326703805, -0.5916079783099749, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869749, 0.0, 0.0, 4.3474130238568325, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646285, 0.0, 9.66091783079296, 0.6831300510639867, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.2403703492039373, 0.0, 0.0, 7.529940238806683, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244578, 2.449489742783181, 2.828427124746206, -1.0000000000000095, 9.165151389911685, 7.099295739719534, -0.41403933560541256, -2.049390153191928, -0.47809144373376167, 0.16903085094570522, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.1213203435596397, -0.40824829046386346, 3.1754264805429355, 0.0, 0.0, 7.171371656006364, 0.0, -1.380131118684709, -1.5614401167176546, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.80000000000001, -5.692099788303113, 4.381780460041349, -0.7745966692414907, 0.0, 10.998181667893988, 0.9621404708847333, 4.762352359916273, -0.7406560798180437, 0.1309307341415961, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119917, 2.7386127875258306, 1.5811388300841904, 2.4596747752497663, 0.0, 0.0, 9.258200997725515, 0.0, 5.345224838248491, -1.2094863136295253, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357735, 0.0, 0.0, 3.8340579025361397, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706658, 0.0, -3.162277660168412, -2.2360679774998027, 0.0, 0.0, 0.0, 13.747727084867515, 0.5345224838248532, 0.3779644730092276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999887, 0.0, 3.6514837167010707, -2.840187787218764, 0.0, 0.0, 0.0, 0.0, 12.344267996967348, 1.396594497510348, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048555, 0.0, 0.0, 6.640783086353614, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505551, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189435, 4.183300132670375, -0.5916079783099615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387008, 7.099295739719542, 0.0, 4.347413023856828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323076, 0.0, 3.864367132317193, -0.3415650255319911, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.080123449734629, 0.0, 7.099295739719546, 2.509980079602214, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299173, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724463, 2.4494897427831743, 2.828427124746207, -1.000000000000009, 1.309307341415954, 7.099295739719537, -0.4140393356054117, -2.049390153191927, -0.4780914437337623, 0.16903085094570483, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498075, 2.121320343559647, -0.40824829046386685, 3.1754264805429337, 9.071147352221455, 0.0, 7.171371656006362, 0.0, -1.3801311186847083, -1.5614401167176528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000009, 0.6324555320336753, 4.381780460041344, -0.7745966692414884, 0.0, 3.142337619398289, -0.10690449676496958, 4.76235235991627, -0.7406560798180428, 0.13093073414159664, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119886, 0.5477225575051662, 1.5811388300841966, 2.4596747752497654, 0.0, 9.071147352221454, 1.851640199545103, 0.0, 5.345224838248489, -1.209486313629527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135779, -6.260990336999449, 0.0, 3.8340579025361414, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.039230484541329, 0.0, 3.162277660168365, -0.447213595499961, 0.0, 0.0, 0.0, 5.891883036371791, -0.5345224838248448, 0.07559289460184586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.89999999999999, 0.0, 1.4605934866803583, 1.4200938936093819, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786952, -0.6982972487551772, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.260990336999394, 2.2135943621178726, 0.0, 0.0, 0.0, 0.0, 10.583005244258366, 2.993325909419166, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977288, 0.0, 0.0, -4.695742752749563, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110028, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 22:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.028867513459481187, 0.0, -0.015058465048420894, 0.005323971374999505, 0.0, 0.0, 0.0, 0.02454951265154915, -0.01336306209562124, 0.004724555912615356, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.042857142857142844, -0.027836530835928387, 0.015152288168283172, -0.005357142857142867 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336762, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321832, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955858, 0.0, 8.366600265340768, -1.18321595661993, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739498, 0.0, 0.0, 8.694826047713665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947011, -3.3935649046180636e-14, -3.346640106136308, -2.3664319132398495, 15.491933384829666, 0.0, 0.0, 0.6928203230275537, 0.5656854249492373, 0.39999999999999886, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.8989794855663495, 0.0, 0.0, 0.0, 14.198591479439074, -0.828078671210824, 1.2098624933629525e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0884716495130443e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 0.0, 0.0, 0.0, 14.342743312012727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000134, 0.0, 8.763560920082679, -1.549193338482974, 0.0, 0.0, 0.0, 9.524704719832533, -1.4813121596360834, 0.26186146828319146, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1176914536239795, 0.0, 3.162277660168379, 4.919349550499535, 0.0, 0.0, 0.0, 0.0, 10.690449676496982, -2.418972627259056, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5455844122715585, 0.0, 0.0, 7.66811580507228, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051666, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477958, 7.245688373094727, 4.1833001326703805, -0.5916079783099749, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869749, 0.0, 0.0, 4.3474130238568325, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646285, 0.0, 9.66091783079296, 0.6831300510639867, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.2403703492039373, 0.0, 0.0, 7.529940238806683, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244578, 2.449489742783181, 2.828427124746206, -1.0000000000000095, 9.165151389911685, 7.099295739719534, -0.41403933560541256, -2.049390153191928, -0.47809144373376167, 0.16903085094570522, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.1213203435596397, -0.40824829046386346, 3.1754264805429355, 0.0, 0.0, 7.171371656006364, 0.0, -1.380131118684709, -1.5614401167176546, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.80000000000001, -5.692099788303113, 4.381780460041349, -0.7745966692414907, 0.0, 10.998181667893988, 0.9621404708847333, 4.762352359916273, -0.7406560798180437, 0.1309307341415961, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119917, 2.7386127875258306, 1.5811388300841904, 2.4596747752497663, 0.0, 0.0, 9.258200997725515, 0.0, 5.345224838248491, -1.2094863136295253, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357735, 0.0, 0.0, 3.8340579025361397, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706658, 0.0, -3.162277660168412, -2.2360679774998027, 0.0, 0.0, 0.0, 13.747727084867515, 0.5345224838248532, 0.3779644730092276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999887, 0.0, 3.6514837167010707, -2.840187787218764, 0.0, 0.0, 0.0, 0.0, 12.344267996967348, 1.396594497510348, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048555, 0.0, 0.0, 6.640783086353614, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505551, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189435, 4.183300132670375, -0.5916079783099615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387008, 7.099295739719542, 0.0, 4.347413023856828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323076, 0.0, 3.864367132317193, -0.3415650255319911, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.080123449734629, 0.0, 7.099295739719546, 2.509980079602214, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299173, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724463, 2.4494897427831743, 2.828427124746207, -1.000000000000009, 1.309307341415954, 7.099295739719537, -0.4140393356054117, -2.049390153191927, -0.4780914437337623, 0.16903085094570483, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498075, 2.121320343559647, -0.40824829046386685, 3.1754264805429337, 9.071147352221455, 0.0, 7.171371656006362, 0.0, -1.3801311186847083, -1.5614401167176528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000009, 0.6324555320336753, 4.381780460041344, -0.7745966692414884, 0.0, 3.142337619398289, -0.10690449676496958, 4.76235235991627, -0.7406560798180428, 0.13093073414159664, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119886, 0.5477225575051662, 1.5811388300841966, 2.4596747752497654, 0.0, 9.071147352221454, 1.851640199545103, 0.0, 5.345224838248489, -1.209486313629527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135779, -6.260990336999449, 0.0, 3.8340579025361414, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.039230484541329, 0.0, 3.162277660168365, -0.447213595499961, 0.0, 0.0, 0.0, 5.891883036371791, -0.5345224838248448, 0.07559289460184586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.89999999999999, 0.0, 1.4605934866803583, 1.4200938936093819, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786952, -0.6982972487551772, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.260990336999394, 2.2135943621178726, 0.0, 0.0, 0.0, 0.0, 10.583005244258366, 2.993325909419166, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977288, 0.0, 0.0, -4.695742752749563, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110028, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 23:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.028867513459481315, 0.0, 0.0, -0.01597191412499849, 0.0, 0.0, 0.0, 0.0, 0.0, 0.028347335475692043, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.053571428571428575 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336762, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321832, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955858, 0.0, 8.366600265340768, -1.18321595661993, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739498, 0.0, 0.0, 8.694826047713665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947011, -3.3935649046180636e-14, -3.346640106136308, -2.3664319132398495, 15.491933384829666, 0.0, 0.0, 0.6928203230275537, 0.5656854249492373, 0.39999999999999886, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.8989794855663495, 0.0, 0.0, 0.0, 14.198591479439074, -0.828078671210824, 1.2098624933629525e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0884716495130443e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 0.0, 0.0, 0.0, 14.342743312012727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000134, 0.0, 8.763560920082679, -1.549193338482974, 0.0, 0.0, 0.0, 9.524704719832533, -1.4813121596360834, 0.26186146828319146, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1176914536239795, 0.0, 3.162277660168379, 4.919349550499535, 0.0, 0.0, 0.0, 0.0, 10.690449676496982, -2.418972627259056, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5455844122715585, 0.0, 0.0, 7.66811580507228, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051666, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477958, 7.245688373094727, 4.1833001326703805, -0.5916079783099749, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869749, 0.0, 0.0, 4.3474130238568325, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646285, 0.0, 9.66091783079296, 0.6831300510639867, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.2403703492039373, 0.0, 0.0, 7.529940238806683, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244578, 2.449489742783181, 2.828427124746206, -1.0000000000000095, 9.165151389911685, 7.099295739719534, -0.41403933560541256, -2.049390153191928, -0.47809144373376167, 0.16903085094570522, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.1213203435596397, -0.40824829046386346, 3.1754264805429355, 0.0, 0.0, 7.171371656006364, 0.0, -1.380131118684709, -1.5614401167176546, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.80000000000001, -5.692099788303113, 4.381780460041349, -0.7745966692414907, 0.0, 10.998181667893988, 0.9621404708847333, 4.762352359916273, -0.7406560798180437, 0.1309307341415961, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119917, 2.7386127875258306, 1.5811388300841904, 2.4596747752497663, 0.0, 0.0, 9.258200997725515, 0.0, 5.345224838248491, -1.2094863136295253, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357735, 0.0, 0.0, 3.8340579025361397, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706658, 0.0, -3.162277660168412, -2.2360679774998027, 0.0, 0.0, 0.0, 13.747727084867515, 0.5345224838248532, 0.3779644730092276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999887, 0.0, 3.6514837167010707, -2.840187787218764, 0.0, 0.0, 0.0, 0.0, 12.344267996967348, 1.396594497510348, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048555, 0.0, 0.0, 6.640783086353614, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505551, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189435, 4.183300132670375, -0.5916079783099615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387008, 7.099295739719542, 0.0, 4.347413023856828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323076, 0.0, 3.864367132317193, -0.3415650255319911, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.080123449734629, 0.0, 7.099295739719546, 2.509980079602214, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299173, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724463, 2.4494897427831743, 2.828427124746207, -1.000000000000009, 1.309307341415954, 7.099295739719537, -0.4140393356054117, -2.049390153191927, -0.4780914437337623, 0.16903085094570483, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498075, 2.121320343559647, -0.40824829046386685, 3.1754264805429337, 9.071147352221455, 0.0, 7.171371656006362, 0.0, -1.3801311186847083, -1.5614401167176528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000009, 0.6324555320336753, 4.381780460041344, -0.7745966692414884, 0.0, 3.142337619398289, -0.10690449676496958, 4.76235235991627, -0.7406560798180428, 0.13093073414159664, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119886, 0.5477225575051662, 1.5811388300841966, 2.4596747752497654, 0.0, 9.071147352221454, 1.851640199545103, 0.0, 5.345224838248489, -1.209486313629527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135779, -6.260990336999449, 0.0, 3.8340579025361414, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.039230484541329, 0.0, 3.162277660168365, -0.447213595499961, 0.0, 0.0, 0.0, 5.891883036371791, -0.5345224838248448, 0.07559289460184586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.89999999999999, 0.0, 1.4605934866803583, 1.4200938936093819, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786952, -0.6982972487551772, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.260990336999394, 2.2135943621178726, 0.0, 0.0, 0.0, 0.0, 10.583005244258366, 2.993325909419166, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977288, 0.0, 0.0, -4.695742752749563, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110028, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 24:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, 0.0, 0.11293848786315637, -0.06388765649999399, 0.0, 0.0, 0.0, 0.0736485379546474, 0.026726124191242418, -0.023622779563076728, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06495190528383286, -0.06060915267313264, 0.026785714285714298 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336762, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321832, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955858, 0.0, 8.366600265340768, -1.18321595661993, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739498, 0.0, 0.0, 8.694826047713665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947011, -3.3935649046180636e-14, -3.346640106136308, -2.3664319132398495, 15.491933384829666, 0.0, 0.0, 0.6928203230275537, 0.5656854249492373, 0.39999999999999886, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.8989794855663495, 0.0, 0.0, 0.0, 14.198591479439074, -0.828078671210824, 1.2098624933629525e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0884716495130443e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 0.0, 0.0, 0.0, 14.342743312012727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000134, 0.0, 8.763560920082679, -1.549193338482974, 0.0, 0.0, 0.0, 9.524704719832533, -1.4813121596360834, 0.26186146828319146, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1176914536239795, 0.0, 3.162277660168379, 4.919349550499535, 0.0, 0.0, 0.0, 0.0, 10.690449676496982, -2.418972627259056, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5455844122715585, 0.0, 0.0, 7.66811580507228, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051666, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477958, 7.245688373094727, 4.1833001326703805, -0.5916079783099749, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869749, 0.0, 0.0, 4.3474130238568325, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646285, 0.0, 9.66091783079296, 0.6831300510639867, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.2403703492039373, 0.0, 0.0, 7.529940238806683, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244578, 2.449489742783181, 2.828427124746206, -1.0000000000000095, 9.165151389911685, 7.099295739719534, -0.41403933560541256, -2.049390153191928, -0.47809144373376167, 0.16903085094570522, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.1213203435596397, -0.40824829046386346, 3.1754264805429355, 0.0, 0.0, 7.171371656006364, 0.0, -1.380131118684709, -1.5614401167176546, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.80000000000001, -5.692099788303113, 4.381780460041349, -0.7745966692414907, 0.0, 10.998181667893988, 0.9621404708847333, 4.762352359916273, -0.7406560798180437, 0.1309307341415961, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119917, 2.7386127875258306, 1.5811388300841904, 2.4596747752497663, 0.0, 0.0, 9.258200997725515, 0.0, 5.345224838248491, -1.2094863136295253, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357735, 0.0, 0.0, 3.8340579025361397, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706658, 0.0, -3.162277660168412, -2.2360679774998027, 0.0, 0.0, 0.0, 13.747727084867515, 0.5345224838248532, 0.3779644730092276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999887, 0.0, 3.6514837167010707, -2.840187787218764, 0.0, 0.0, 0.0, 0.0, 12.344267996967348, 1.396594497510348, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048555, 0.0, 0.0, 6.640783086353614, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505551, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189435, 4.183300132670375, -0.5916079783099615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387008, 7.099295739719542, 0.0, 4.347413023856828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323076, 0.0, 3.864367132317193, -0.3415650255319911, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.080123449734629, 0.0, 7.099295739719546, 2.509980079602214, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299173, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724463, 2.4494897427831743, 2.828427124746207, -1.000000000000009, 1.309307341415954, 7.099295739719537, -0.4140393356054117, -2.049390153191927, -0.4780914437337623, 0.16903085094570483, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498075, 2.121320343559647, -0.40824829046386685, 3.1754264805429337, 9.071147352221455, 0.0, 7.171371656006362, 0.0, -1.3801311186847083, -1.5614401167176528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000009, 0.6324555320336753, 4.381780460041344, -0.7745966692414884, 0.0, 3.142337619398289, -0.10690449676496958, 4.76235235991627, -0.7406560798180428, 0.13093073414159664, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119886, 0.5477225575051662, 1.5811388300841966, 2.4596747752497654, 0.0, 9.071147352221454, 1.851640199545103, 0.0, 5.345224838248489, -1.209486313629527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135779, -6.260990336999449, 0.0, 3.8340579025361414, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.039230484541329, 0.0, 3.162277660168365, -0.447213595499961, 0.0, 0.0, 0.0, 5.891883036371791, -0.5345224838248448, 0.07559289460184586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.89999999999999, 0.0, 1.4605934866803583, 1.4200938936093819, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786952, -0.6982972487551772, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.260990336999394, 2.2135943621178726, 0.0, 0.0, 0.0, 0.0, 10.583005244258366, 2.993325909419166, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977288, 0.0, 0.0, -4.695742752749563, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110028, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 25:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, 0.0, -0.022587697572631307, 0.12777531299998807, 0.0, 0.0, 0.0, 0.0, 0.06681531047810609, 0.0472455591261534, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07576144084141581, -0.05357142857142859 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336762, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321832, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955858, 0.0, 8.366600265340768, -1.18321595661993, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739498, 0.0, 0.0, 8.694826047713665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947011, -3.3935649046180636e-14, -3.346640106136308, -2.3664319132398495, 15.491933384829666, 0.0, 0.0, 0.6928203230275537, 0.5656854249492373, 0.39999999999999886, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.8989794855663495, 0.0, 0.0, 0.0, 14.198591479439074, -0.828078671210824, 1.2098624933629525e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0884716495130443e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 0.0, 0.0, 0.0, 14.342743312012727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000134, 0.0, 8.763560920082679, -1.549193338482974, 0.0, 0.0, 0.0, 9.524704719832533, -1.4813121596360834, 0.26186146828319146, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1176914536239795, 0.0, 3.162277660168379, 4.919349550499535, 0.0, 0.0, 0.0, 0.0, 10.690449676496982, -2.418972627259056, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5455844122715585, 0.0, 0.0, 7.66811580507228, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051666, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477958, 7.245688373094727, 4.1833001326703805, -0.5916079783099749, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869749, 0.0, 0.0, 4.3474130238568325, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646285, 0.0, 9.66091783079296, 0.6831300510639867, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.2403703492039373, 0.0, 0.0, 7.529940238806683, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244578, 2.449489742783181, 2.828427124746206, -1.0000000000000095, 9.165151389911685, 7.099295739719534, -0.41403933560541256, -2.049390153191928, -0.47809144373376167, 0.16903085094570522, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.1213203435596397, -0.40824829046386346, 3.1754264805429355, 0.0, 0.0, 7.171371656006364, 0.0, -1.380131118684709, -1.5614401167176546, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.80000000000001, -5.692099788303113, 4.381780460041349, -0.7745966692414907, 0.0, 10.998181667893988, 0.9621404708847333, 4.762352359916273, -0.7406560798180437, 0.1309307341415961, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119917, 2.7386127875258306, 1.5811388300841904, 2.4596747752497663, 0.0, 0.0, 9.258200997725515, 0.0, 5.345224838248491, -1.2094863136295253, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357735, 0.0, 0.0, 3.8340579025361397, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706658, 0.0, -3.162277660168412, -2.2360679774998027, 0.0, 0.0, 0.0, 13.747727084867515, 0.5345224838248532, 0.3779644730092276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999887, 0.0, 3.6514837167010707, -2.840187787218764, 0.0, 0.0, 0.0, 0.0, 12.344267996967348, 1.396594497510348, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048555, 0.0, 0.0, 6.640783086353614, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505551, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189435, 4.183300132670375, -0.5916079783099615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387008, 7.099295739719542, 0.0, 4.347413023856828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323076, 0.0, 3.864367132317193, -0.3415650255319911, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.080123449734629, 0.0, 7.099295739719546, 2.509980079602214, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299173, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724463, 2.4494897427831743, 2.828427124746207, -1.000000000000009, 1.309307341415954, 7.099295739719537, -0.4140393356054117, -2.049390153191927, -0.4780914437337623, 0.16903085094570483, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498075, 2.121320343559647, -0.40824829046386685, 3.1754264805429337, 9.071147352221455, 0.0, 7.171371656006362, 0.0, -1.3801311186847083, -1.5614401167176528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000009, 0.6324555320336753, 4.381780460041344, -0.7745966692414884, 0.0, 3.142337619398289, -0.10690449676496958, 4.76235235991627, -0.7406560798180428, 0.13093073414159664, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119886, 0.5477225575051662, 1.5811388300841966, 2.4596747752497654, 0.0, 9.071147352221454, 1.851640199545103, 0.0, 5.345224838248489, -1.209486313629527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135779, -6.260990336999449, 0.0, 3.8340579025361414, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.039230484541329, 0.0, 3.162277660168365, -0.447213595499961, 0.0, 0.0, 0.0, 5.891883036371791, -0.5345224838248448, 0.07559289460184586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.89999999999999, 0.0, 1.4605934866803583, 1.4200938936093819, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786952, -0.6982972487551772, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.260990336999394, 2.2135943621178726, 0.0, 0.0, 0.0, 0.0, 10.583005244258366, 2.993325909419166, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977288, 0.0, 0.0, -4.695742752749563, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110028, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 26:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, 0.0978075995544939, -0.05646924393157821, -0.06388765649999403, 0.054894379103355, -0.04252100321353805, 0.02314550249431374, 0.02454951265154913, -0.013363062095621204, -0.023622779563076717, 0.0, 0.0, 0.04841229182759272, 0.0, -0.03749999999999999, -0.052489065916782374, 0.0, 0.02165063509461096, 0.030304576336566334, 0.026785714285714305 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336762, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321832, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955858, 0.0, 8.366600265340768, -1.18321595661993, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739498, 0.0, 0.0, 8.694826047713665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947011, -3.3935649046180636e-14, -3.346640106136308, -2.3664319132398495, 15.491933384829666, 0.0, 0.0, 0.6928203230275537, 0.5656854249492373, 0.39999999999999886, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.8989794855663495, 0.0, 0.0, 0.0, 14.198591479439074, -0.828078671210824, 1.2098624933629525e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0884716495130443e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 0.0, 0.0, 0.0, 14.342743312012727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000134, 0.0, 8.763560920082679, -1.549193338482974, 0.0, 0.0, 0.0, 9.524704719832533, -1.4813121596360834, 0.26186146828319146, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1176914536239795, 0.0, 3.162277660168379, 4.919349550499535, 0.0, 0.0, 0.0, 0.0, 10.690449676496982, -2.418972627259056, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5455844122715585, 0.0, 0.0, 7.66811580507228, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051666, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477958, 7.245688373094727, 4.1833001326703805, -0.5916079783099749, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869749, 0.0, 0.0, 4.3474130238568325, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646285, 0.0, 9.66091783079296, 0.6831300510639867, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.2403703492039373, 0.0, 0.0, 7.529940238806683, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244578, 2.449489742783181, 2.828427124746206, -1.0000000000000095, 9.165151389911685, 7.099295739719534, -0.41403933560541256, -2.049390153191928, -0.47809144373376167, 0.16903085094570522, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.1213203435596397, -0.40824829046386346, 3.1754264805429355, 0.0, 0.0, 7.171371656006364, 0.0, -1.380131118684709, -1.5614401167176546, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.80000000000001, -5.692099788303113, 4.381780460041349, -0.7745966692414907, 0.0, 10.998181667893988, 0.9621404708847333, 4.762352359916273, -0.7406560798180437, 0.1309307341415961, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119917, 2.7386127875258306, 1.5811388300841904, 2.4596747752497663, 0.0, 0.0, 9.258200997725515, 0.0, 5.345224838248491, -1.2094863136295253, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357735, 0.0, 0.0, 3.8340579025361397, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706658, 0.0, -3.162277660168412, -2.2360679774998027, 0.0, 0.0, 0.0, 13.747727084867515, 0.5345224838248532, 0.3779644730092276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999887, 0.0, 3.6514837167010707, -2.840187787218764, 0.0, 0.0, 0.0, 0.0, 12.344267996967348, 1.396594497510348, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048555, 0.0, 0.0, 6.640783086353614, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505551, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189435, 4.183300132670375, -0.5916079783099615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387008, 7.099295739719542, 0.0, 4.347413023856828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323076, 0.0, 3.864367132317193, -0.3415650255319911, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.080123449734629, 0.0, 7.099295739719546, 2.509980079602214, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299173, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724463, 2.4494897427831743, 2.828427124746207, -1.000000000000009, 1.309307341415954, 7.099295739719537, -0.4140393356054117, -2.049390153191927, -0.4780914437337623, 0.16903085094570483, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498075, 2.121320343559647, -0.40824829046386685, 3.1754264805429337, 9.071147352221455, 0.0, 7.171371656006362, 0.0, -1.3801311186847083, -1.5614401167176528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000009, 0.6324555320336753, 4.381780460041344, -0.7745966692414884, 0.0, 3.142337619398289, -0.10690449676496958, 4.76235235991627, -0.7406560798180428, 0.13093073414159664, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119886, 0.5477225575051662, 1.5811388300841966, 2.4596747752497654, 0.0, 9.071147352221454, 1.851640199545103, 0.0, 5.345224838248489, -1.209486313629527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135779, -6.260990336999449, 0.0, 3.8340579025361414, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.039230484541329, 0.0, 3.162277660168365, -0.447213595499961, 0.0, 0.0, 0.0, 5.891883036371791, -0.5345224838248448, 0.07559289460184586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.89999999999999, 0.0, 1.4605934866803583, 1.4200938936093819, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786952, -0.6982972487551772, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.260990336999394, 2.2135943621178726, 0.0, 0.0, 0.0, 0.0, 10.583005244258366, 2.993325909419166, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977288, 0.0, 0.0, -4.695742752749563, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110028, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 27:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, -0.019561519910898818, 0.011293848786315647, 0.12777531299998807, 0.0, 0.0, 0.05786375623578448, 0.0, -0.03340765523905306, 0.04724555912615341, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06561133239597798, 0.0, 0.0, -0.03788072042070791, -0.053571428571428596 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336762, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321832, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955858, 0.0, 8.366600265340768, -1.18321595661993, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739498, 0.0, 0.0, 8.694826047713665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947011, -3.3935649046180636e-14, -3.346640106136308, -2.3664319132398495, 15.491933384829666, 0.0, 0.0, 0.6928203230275537, 0.5656854249492373, 0.39999999999999886, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.8989794855663495, 0.0, 0.0, 0.0, 14.198591479439074, -0.828078671210824, 1.2098624933629525e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0884716495130443e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 0.0, 0.0, 0.0, 14.342743312012727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000134, 0.0, 8.763560920082679, -1.549193338482974, 0.0, 0.0, 0.0, 9.524704719832533, -1.4813121596360834, 0.26186146828319146, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1176914536239795, 0.0, 3.162277660168379, 4.919349550499535, 0.0, 0.0, 0.0, 0.0, 10.690449676496982, -2.418972627259056, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5455844122715585, 0.0, 0.0, 7.66811580507228, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051666, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477958, 7.245688373094727, 4.1833001326703805, -0.5916079783099749, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869749, 0.0, 0.0, 4.3474130238568325, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646285, 0.0, 9.66091783079296, 0.6831300510639867, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.2403703492039373, 0.0, 0.0, 7.529940238806683, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244578, 2.449489742783181, 2.828427124746206, -1.0000000000000095, 9.165151389911685, 7.099295739719534, -0.41403933560541256, -2.049390153191928, -0.47809144373376167, 0.16903085094570522, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.1213203435596397, -0.40824829046386346, 3.1754264805429355, 0.0, 0.0, 7.171371656006364, 0.0, -1.380131118684709, -1.5614401167176546, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.80000000000001, -5.692099788303113, 4.381780460041349, -0.7745966692414907, 0.0, 10.998181667893988, 0.9621404708847333, 4.762352359916273, -0.7406560798180437, 0.1309307341415961, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119917, 2.7386127875258306, 1.5811388300841904, 2.4596747752497663, 0.0, 0.0, 9.258200997725515, 0.0, 5.345224838248491, -1.2094863136295253, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357735, 0.0, 0.0, 3.8340579025361397, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706658, 0.0, -3.162277660168412, -2.2360679774998027, 0.0, 0.0, 0.0, 13.747727084867515, 0.5345224838248532, 0.3779644730092276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999887, 0.0, 3.6514837167010707, -2.840187787218764, 0.0, 0.0, 0.0, 0.0, 12.344267996967348, 1.396594497510348, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048555, 0.0, 0.0, 6.640783086353614, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505551, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189435, 4.183300132670375, -0.5916079783099615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387008, 7.099295739719542, 0.0, 4.347413023856828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323076, 0.0, 3.864367132317193, -0.3415650255319911, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.080123449734629, 0.0, 7.099295739719546, 2.509980079602214, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299173, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724463, 2.4494897427831743, 2.828427124746207, -1.000000000000009, 1.309307341415954, 7.099295739719537, -0.4140393356054117, -2.049390153191927, -0.4780914437337623, 0.16903085094570483, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498075, 2.121320343559647, -0.40824829046386685, 3.1754264805429337, 9.071147352221455, 0.0, 7.171371656006362, 0.0, -1.3801311186847083, -1.5614401167176528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000009, 0.6324555320336753, 4.381780460041344, -0.7745966692414884, 0.0, 3.142337619398289, -0.10690449676496958, 4.76235235991627, -0.7406560798180428, 0.13093073414159664, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119886, 0.5477225575051662, 1.5811388300841966, 2.4596747752497654, 0.0, 9.071147352221454, 1.851640199545103, 0.0, 5.345224838248489, -1.209486313629527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135779, -6.260990336999449, 0.0, 3.8340579025361414, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.039230484541329, 0.0, 3.162277660168365, -0.447213595499961, 0.0, 0.0, 0.0, 5.891883036371791, -0.5345224838248448, 0.07559289460184586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.89999999999999, 0.0, 1.4605934866803583, 1.4200938936093819, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786952, -0.6982972487551772, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.260990336999394, 2.2135943621178726, 0.0, 0.0, 0.0, 0.0, 10.583005244258366, 2.993325909419166, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977288, 0.0, 0.0, -4.695742752749563, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110028, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 28:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, 0.09780759955449396, -0.07905694150420949, -0.031943828249996996, 0.05489437910335498, 0.01417366773784601, -0.046291004988627586, -0.02454951265154915, 0.013363062095621228, 0.023622779563076703, 0.0, 0.04791574237499548, -0.006916041689656098, -0.0618589574131742, -0.016071428571428566, 0.008748177652797052, 0.04285714285714287, 0.015464739353293547, 0.0, -0.005357142857142856 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336762, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321832, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955858, 0.0, 8.366600265340768, -1.18321595661993, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739498, 0.0, 0.0, 8.694826047713665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947011, -3.3935649046180636e-14, -3.346640106136308, -2.3664319132398495, 15.491933384829666, 0.0, 0.0, 0.6928203230275537, 0.5656854249492373, 0.39999999999999886, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.8989794855663495, 0.0, 0.0, 0.0, 14.198591479439074, -0.828078671210824, 1.2098624933629525e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0884716495130443e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 0.0, 0.0, 0.0, 14.342743312012727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000134, 0.0, 8.763560920082679, -1.549193338482974, 0.0, 0.0, 0.0, 9.524704719832533, -1.4813121596360834, 0.26186146828319146, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1176914536239795, 0.0, 3.162277660168379, 4.919349550499535, 0.0, 0.0, 0.0, 0.0, 10.690449676496982, -2.418972627259056, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5455844122715585, 0.0, 0.0, 7.66811580507228, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051666, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477958, 7.245688373094727, 4.1833001326703805, -0.5916079783099749, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869749, 0.0, 0.0, 4.3474130238568325, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646285, 0.0, 9.66091783079296, 0.6831300510639867, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.2403703492039373, 0.0, 0.0, 7.529940238806683, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244578, 2.449489742783181, 2.828427124746206, -1.0000000000000095, 9.165151389911685, 7.099295739719534, -0.41403933560541256, -2.049390153191928, -0.47809144373376167, 0.16903085094570522, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.1213203435596397, -0.40824829046386346, 3.1754264805429355, 0.0, 0.0, 7.171371656006364, 0.0, -1.380131118684709, -1.5614401167176546, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.80000000000001, -5.692099788303113, 4.381780460041349, -0.7745966692414907, 0.0, 10.998181667893988, 0.9621404708847333, 4.762352359916273, -0.7406560798180437, 0.1309307341415961, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119917, 2.7386127875258306, 1.5811388300841904, 2.4596747752497663, 0.0, 0.0, 9.258200997725515, 0.0, 5.345224838248491, -1.2094863136295253, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357735, 0.0, 0.0, 3.8340579025361397, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706658, 0.0, -3.162277660168412, -2.2360679774998027, 0.0, 0.0, 0.0, 13.747727084867515, 0.5345224838248532, 0.3779644730092276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999887, 0.0, 3.6514837167010707, -2.840187787218764, 0.0, 0.0, 0.0, 0.0, 12.344267996967348, 1.396594497510348, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048555, 0.0, 0.0, 6.640783086353614, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505551, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189435, 4.183300132670375, -0.5916079783099615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387008, 7.099295739719542, 0.0, 4.347413023856828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323076, 0.0, 3.864367132317193, -0.3415650255319911, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.080123449734629, 0.0, 7.099295739719546, 2.509980079602214, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299173, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724463, 2.4494897427831743, 2.828427124746207, -1.000000000000009, 1.309307341415954, 7.099295739719537, -0.4140393356054117, -2.049390153191927, -0.4780914437337623, 0.16903085094570483, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498075, 2.121320343559647, -0.40824829046386685, 3.1754264805429337, 9.071147352221455, 0.0, 7.171371656006362, 0.0, -1.3801311186847083, -1.5614401167176528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000009, 0.6324555320336753, 4.381780460041344, -0.7745966692414884, 0.0, 3.142337619398289, -0.10690449676496958, 4.76235235991627, -0.7406560798180428, 0.13093073414159664, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119886, 0.5477225575051662, 1.5811388300841966, 2.4596747752497654, 0.0, 9.071147352221454, 1.851640199545103, 0.0, 5.345224838248489, -1.209486313629527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135779, -6.260990336999449, 0.0, 3.8340579025361414, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.039230484541329, 0.0, 3.162277660168365, -0.447213595499961, 0.0, 0.0, 0.0, 5.891883036371791, -0.5345224838248448, 0.07559289460184586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.89999999999999, 0.0, 1.4605934866803583, 1.4200938936093819, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786952, -0.6982972487551772, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.260990336999394, 2.2135943621178726, 0.0, 0.0, 0.0, 0.0, 10.583005244258366, 2.993325909419166, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977288, 0.0, 0.0, -4.695742752749563, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110028, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 29:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, -0.019561519910898842, 0.12423233664947204, -0.031943828249996996, 0.0, 0.05669467095138407, -0.011572751247156909, 0.024549512651549147, -0.046770717334674285, 0.023622779563076696, 0.0, 0.0, 0.0, 0.061858957413174195, -0.02142857142857144, 0.00437408882639853, -0.0642857142857143, 0.009278843611976128, 0.007576144084141588, -0.005357142857142859 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336762, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321832, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955858, 0.0, 8.366600265340768, -1.18321595661993, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739498, 0.0, 0.0, 8.694826047713665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947011, -3.3935649046180636e-14, -3.346640106136308, -2.3664319132398495, 15.491933384829666, 0.0, 0.0, 0.6928203230275537, 0.5656854249492373, 0.39999999999999886, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.8989794855663495, 0.0, 0.0, 0.0, 14.198591479439074, -0.828078671210824, 1.2098624933629525e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0884716495130443e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 0.0, 0.0, 0.0, 14.342743312012727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000134, 0.0, 8.763560920082679, -1.549193338482974, 0.0, 0.0, 0.0, 9.524704719832533, -1.4813121596360834, 0.26186146828319146, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1176914536239795, 0.0, 3.162277660168379, 4.919349550499535, 0.0, 0.0, 0.0, 0.0, 10.690449676496982, -2.418972627259056, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5455844122715585, 0.0, 0.0, 7.66811580507228, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051666, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477958, 7.245688373094727, 4.1833001326703805, -0.5916079783099749, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869749, 0.0, 0.0, 4.3474130238568325, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646285, 0.0, 9.66091783079296, 0.6831300510639867, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.2403703492039373, 0.0, 0.0, 7.529940238806683, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244578, 2.449489742783181, 2.828427124746206, -1.0000000000000095, 9.165151389911685, 7.099295739719534, -0.41403933560541256, -2.049390153191928, -0.47809144373376167, 0.16903085094570522, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.1213203435596397, -0.40824829046386346, 3.1754264805429355, 0.0, 0.0, 7.171371656006364, 0.0, -1.380131118684709, -1.5614401167176546, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.80000000000001, -5.692099788303113, 4.381780460041349, -0.7745966692414907, 0.0, 10.998181667893988, 0.9621404708847333, 4.762352359916273, -0.7406560798180437, 0.1309307341415961, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119917, 2.7386127875258306, 1.5811388300841904, 2.4596747752497663, 0.0, 0.0, 9.258200997725515, 0.0, 5.345224838248491, -1.2094863136295253, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357735, 0.0, 0.0, 3.8340579025361397, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706658, 0.0, -3.162277660168412, -2.2360679774998027, 0.0, 0.0, 0.0, 13.747727084867515, 0.5345224838248532, 0.3779644730092276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999887, 0.0, 3.6514837167010707, -2.840187787218764, 0.0, 0.0, 0.0, 0.0, 12.344267996967348, 1.396594497510348, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048555, 0.0, 0.0, 6.640783086353614, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505551, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189435, 4.183300132670375, -0.5916079783099615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387008, 7.099295739719542, 0.0, 4.347413023856828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323076, 0.0, 3.864367132317193, -0.3415650255319911, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.080123449734629, 0.0, 7.099295739719546, 2.509980079602214, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299173, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724463, 2.4494897427831743, 2.828427124746207, -1.000000000000009, 1.309307341415954, 7.099295739719537, -0.4140393356054117, -2.049390153191927, -0.4780914437337623, 0.16903085094570483, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498075, 2.121320343559647, -0.40824829046386685, 3.1754264805429337, 9.071147352221455, 0.0, 7.171371656006362, 0.0, -1.3801311186847083, -1.5614401167176528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000009, 0.6324555320336753, 4.381780460041344, -0.7745966692414884, 0.0, 3.142337619398289, -0.10690449676496958, 4.76235235991627, -0.7406560798180428, 0.13093073414159664, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119886, 0.5477225575051662, 1.5811388300841966, 2.4596747752497654, 0.0, 9.071147352221454, 1.851640199545103, 0.0, 5.345224838248489, -1.209486313629527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135779, -6.260990336999449, 0.0, 3.8340579025361414, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.039230484541329, 0.0, 3.162277660168365, -0.447213595499961, 0.0, 0.0, 0.0, 5.891883036371791, -0.5345224838248448, 0.07559289460184586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.89999999999999, 0.0, 1.4605934866803583, 1.4200938936093819, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786952, -0.6982972487551772, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.260990336999394, 2.2135943621178726, 0.0, 0.0, 0.0, 0.0, 10.583005244258366, 2.993325909419166, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977288, 0.0, 0.0, -4.695742752749563, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110028, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 30:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, -0.09780759955449397, -0.05646924393157825, -0.06388765649999402, 0.054894379103355005, 0.04252100321353805, -0.0231455024943138, 0.024549512651549157, -0.013363062095621242, -0.023622779563076693, 0.0, 0.0, 0.04841229182759272, 0.0, 0.03749999999999999, 0.05248906591678238, 0.0, 0.02165063509461097, 0.030304576336566337, 0.026785714285714288 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336762, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321832, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955858, 0.0, 8.366600265340768, -1.18321595661993, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739498, 0.0, 0.0, 8.694826047713665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947011, -3.3935649046180636e-14, -3.346640106136308, -2.3664319132398495, 15.491933384829666, 0.0, 0.0, 0.6928203230275537, 0.5656854249492373, 0.39999999999999886, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.8989794855663495, 0.0, 0.0, 0.0, 14.198591479439074, -0.828078671210824, 1.2098624933629525e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0884716495130443e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 0.0, 0.0, 0.0, 14.342743312012727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000134, 0.0, 8.763560920082679, -1.549193338482974, 0.0, 0.0, 0.0, 9.524704719832533, -1.4813121596360834, 0.26186146828319146, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1176914536239795, 0.0, 3.162277660168379, 4.919349550499535, 0.0, 0.0, 0.0, 0.0, 10.690449676496982, -2.418972627259056, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5455844122715585, 0.0, 0.0, 7.66811580507228, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051666, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477958, 7.245688373094727, 4.1833001326703805, -0.5916079783099749, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869749, 0.0, 0.0, 4.3474130238568325, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646285, 0.0, 9.66091783079296, 0.6831300510639867, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.2403703492039373, 0.0, 0.0, 7.529940238806683, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244578, 2.449489742783181, 2.828427124746206, -1.0000000000000095, 9.165151389911685, 7.099295739719534, -0.41403933560541256, -2.049390153191928, -0.47809144373376167, 0.16903085094570522, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.1213203435596397, -0.40824829046386346, 3.1754264805429355, 0.0, 0.0, 7.171371656006364, 0.0, -1.380131118684709, -1.5614401167176546, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.80000000000001, -5.692099788303113, 4.381780460041349, -0.7745966692414907, 0.0, 10.998181667893988, 0.9621404708847333, 4.762352359916273, -0.7406560798180437, 0.1309307341415961, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119917, 2.7386127875258306, 1.5811388300841904, 2.4596747752497663, 0.0, 0.0, 9.258200997725515, 0.0, 5.345224838248491, -1.2094863136295253, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357735, 0.0, 0.0, 3.8340579025361397, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706658, 0.0, -3.162277660168412, -2.2360679774998027, 0.0, 0.0, 0.0, 13.747727084867515, 0.5345224838248532, 0.3779644730092276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999887, 0.0, 3.6514837167010707, -2.840187787218764, 0.0, 0.0, 0.0, 0.0, 12.344267996967348, 1.396594497510348, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048555, 0.0, 0.0, 6.640783086353614, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505551, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189435, 4.183300132670375, -0.5916079783099615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387008, 7.099295739719542, 0.0, 4.347413023856828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323076, 0.0, 3.864367132317193, -0.3415650255319911, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.080123449734629, 0.0, 7.099295739719546, 2.509980079602214, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299173, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724463, 2.4494897427831743, 2.828427124746207, -1.000000000000009, 1.309307341415954, 7.099295739719537, -0.4140393356054117, -2.049390153191927, -0.4780914437337623, 0.16903085094570483, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498075, 2.121320343559647, -0.40824829046386685, 3.1754264805429337, 9.071147352221455, 0.0, 7.171371656006362, 0.0, -1.3801311186847083, -1.5614401167176528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000009, 0.6324555320336753, 4.381780460041344, -0.7745966692414884, 0.0, 3.142337619398289, -0.10690449676496958, 4.76235235991627, -0.7406560798180428, 0.13093073414159664, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119886, 0.5477225575051662, 1.5811388300841966, 2.4596747752497654, 0.0, 9.071147352221454, 1.851640199545103, 0.0, 5.345224838248489, -1.209486313629527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135779, -6.260990336999449, 0.0, 3.8340579025361414, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.039230484541329, 0.0, 3.162277660168365, -0.447213595499961, 0.0, 0.0, 0.0, 5.891883036371791, -0.5345224838248448, 0.07559289460184586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.89999999999999, 0.0, 1.4605934866803583, 1.4200938936093819, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786952, -0.6982972487551772, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.260990336999394, 2.2135943621178726, 0.0, 0.0, 0.0, 0.0, 10.583005244258366, 2.993325909419166, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977288, 0.0, 0.0, -4.695742752749563, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110028, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 31:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, 0.019561519910898825, 0.011293848786315641, 0.12777531299998804, 0.0, 0.0, -0.057863756235784464, 0.0, -0.03340765523905305, 0.047245559126153386, 0.0, 0.0, 0.0, 0.0, 0.0, -0.06561133239597798, 0.0, 0.0, -0.037880720420707906, -0.05357142857142858 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336762, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321832, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955858, 0.0, 8.366600265340768, -1.18321595661993, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739498, 0.0, 0.0, 8.694826047713665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947011, -3.3935649046180636e-14, -3.346640106136308, -2.3664319132398495, 15.491933384829666, 0.0, 0.0, 0.6928203230275537, 0.5656854249492373, 0.39999999999999886, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.8989794855663495, 0.0, 0.0, 0.0, 14.198591479439074, -0.828078671210824, 1.2098624933629525e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0884716495130443e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 0.0, 0.0, 0.0, 14.342743312012727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000134, 0.0, 8.763560920082679, -1.549193338482974, 0.0, 0.0, 0.0, 9.524704719832533, -1.4813121596360834, 0.26186146828319146, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1176914536239795, 0.0, 3.162277660168379, 4.919349550499535, 0.0, 0.0, 0.0, 0.0, 10.690449676496982, -2.418972627259056, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5455844122715585, 0.0, 0.0, 7.66811580507228, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051666, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477958, 7.245688373094727, 4.1833001326703805, -0.5916079783099749, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869749, 0.0, 0.0, 4.3474130238568325, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646285, 0.0, 9.66091783079296, 0.6831300510639867, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.2403703492039373, 0.0, 0.0, 7.529940238806683, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244578, 2.449489742783181, 2.828427124746206, -1.0000000000000095, 9.165151389911685, 7.099295739719534, -0.41403933560541256, -2.049390153191928, -0.47809144373376167, 0.16903085094570522, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.1213203435596397, -0.40824829046386346, 3.1754264805429355, 0.0, 0.0, 7.171371656006364, 0.0, -1.380131118684709, -1.5614401167176546, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.80000000000001, -5.692099788303113, 4.381780460041349, -0.7745966692414907, 0.0, 10.998181667893988, 0.9621404708847333, 4.762352359916273, -0.7406560798180437, 0.1309307341415961, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119917, 2.7386127875258306, 1.5811388300841904, 2.4596747752497663, 0.0, 0.0, 9.258200997725515, 0.0, 5.345224838248491, -1.2094863136295253, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357735, 0.0, 0.0, 3.8340579025361397, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706658, 0.0, -3.162277660168412, -2.2360679774998027, 0.0, 0.0, 0.0, 13.747727084867515, 0.5345224838248532, 0.3779644730092276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999887, 0.0, 3.6514837167010707, -2.840187787218764, 0.0, 0.0, 0.0, 0.0, 12.344267996967348, 1.396594497510348, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048555, 0.0, 0.0, 6.640783086353614, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505551, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189435, 4.183300132670375, -0.5916079783099615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387008, 7.099295739719542, 0.0, 4.347413023856828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323076, 0.0, 3.864367132317193, -0.3415650255319911, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.080123449734629, 0.0, 7.099295739719546, 2.509980079602214, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299173, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724463, 2.4494897427831743, 2.828427124746207, -1.000000000000009, 1.309307341415954, 7.099295739719537, -0.4140393356054117, -2.049390153191927, -0.4780914437337623, 0.16903085094570483, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498075, 2.121320343559647, -0.40824829046386685, 3.1754264805429337, 9.071147352221455, 0.0, 7.171371656006362, 0.0, -1.3801311186847083, -1.5614401167176528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000009, 0.6324555320336753, 4.381780460041344, -0.7745966692414884, 0.0, 3.142337619398289, -0.10690449676496958, 4.76235235991627, -0.7406560798180428, 0.13093073414159664, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119886, 0.5477225575051662, 1.5811388300841966, 2.4596747752497654, 0.0, 9.071147352221454, 1.851640199545103, 0.0, 5.345224838248489, -1.209486313629527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135779, -6.260990336999449, 0.0, 3.8340579025361414, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.039230484541329, 0.0, 3.162277660168365, -0.447213595499961, 0.0, 0.0, 0.0, 5.891883036371791, -0.5345224838248448, 0.07559289460184586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.89999999999999, 0.0, 1.4605934866803583, 1.4200938936093819, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786952, -0.6982972487551772, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.260990336999394, 2.2135943621178726, 0.0, 0.0, 0.0, 0.0, 10.583005244258366, 2.993325909419166, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977288, 0.0, 0.0, -4.695742752749563, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110028, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 32:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, -0.09780759955449392, -0.07905694150420953, -0.031943828249996975, 0.054894379103355005, -0.014173667737845985, 0.04629100498862756, -0.02454951265154914, 0.013363062095621214, 0.02362277956307672, 0.0, 0.04791574237499549, -0.006916041689656096, 0.0618589574131742, 0.016071428571428563, -0.008748177652797059, 0.04285714285714286, 0.015464739353293537, 0.0, -0.005357142857142868 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336762, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321832, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955858, 0.0, 8.366600265340768, -1.18321595661993, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739498, 0.0, 0.0, 8.694826047713665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947011, -3.3935649046180636e-14, -3.346640106136308, -2.3664319132398495, 15.491933384829666, 0.0, 0.0, 0.6928203230275537, 0.5656854249492373, 0.39999999999999886, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.8989794855663495, 0.0, 0.0, 0.0, 14.198591479439074, -0.828078671210824, 1.2098624933629525e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0884716495130443e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 0.0, 0.0, 0.0, 14.342743312012727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000134, 0.0, 8.763560920082679, -1.549193338482974, 0.0, 0.0, 0.0, 9.524704719832533, -1.4813121596360834, 0.26186146828319146, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1176914536239795, 0.0, 3.162277660168379, 4.919349550499535, 0.0, 0.0, 0.0, 0.0, 10.690449676496982, -2.418972627259056, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5455844122715585, 0.0, 0.0, 7.66811580507228, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051666, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477958, 7.245688373094727, 4.1833001326703805, -0.5916079783099749, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869749, 0.0, 0.0, 4.3474130238568325, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646285, 0.0, 9.66091783079296, 0.6831300510639867, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.2403703492039373, 0.0, 0.0, 7.529940238806683, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244578, 2.449489742783181, 2.828427124746206, -1.0000000000000095, 9.165151389911685, 7.099295739719534, -0.41403933560541256, -2.049390153191928, -0.47809144373376167, 0.16903085094570522, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.1213203435596397, -0.40824829046386346, 3.1754264805429355, 0.0, 0.0, 7.171371656006364, 0.0, -1.380131118684709, -1.5614401167176546, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.80000000000001, -5.692099788303113, 4.381780460041349, -0.7745966692414907, 0.0, 10.998181667893988, 0.9621404708847333, 4.762352359916273, -0.7406560798180437, 0.1309307341415961, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119917, 2.7386127875258306, 1.5811388300841904, 2.4596747752497663, 0.0, 0.0, 9.258200997725515, 0.0, 5.345224838248491, -1.2094863136295253, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357735, 0.0, 0.0, 3.8340579025361397, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706658, 0.0, -3.162277660168412, -2.2360679774998027, 0.0, 0.0, 0.0, 13.747727084867515, 0.5345224838248532, 0.3779644730092276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999887, 0.0, 3.6514837167010707, -2.840187787218764, 0.0, 0.0, 0.0, 0.0, 12.344267996967348, 1.396594497510348, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048555, 0.0, 0.0, 6.640783086353614, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505551, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189435, 4.183300132670375, -0.5916079783099615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387008, 7.099295739719542, 0.0, 4.347413023856828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323076, 0.0, 3.864367132317193, -0.3415650255319911, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.080123449734629, 0.0, 7.099295739719546, 2.509980079602214, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299173, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724463, 2.4494897427831743, 2.828427124746207, -1.000000000000009, 1.309307341415954, 7.099295739719537, -0.4140393356054117, -2.049390153191927, -0.4780914437337623, 0.16903085094570483, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498075, 2.121320343559647, -0.40824829046386685, 3.1754264805429337, 9.071147352221455, 0.0, 7.171371656006362, 0.0, -1.3801311186847083, -1.5614401167176528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000009, 0.6324555320336753, 4.381780460041344, -0.7745966692414884, 0.0, 3.142337619398289, -0.10690449676496958, 4.76235235991627, -0.7406560798180428, 0.13093073414159664, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119886, 0.5477225575051662, 1.5811388300841966, 2.4596747752497654, 0.0, 9.071147352221454, 1.851640199545103, 0.0, 5.345224838248489, -1.209486313629527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135779, -6.260990336999449, 0.0, 3.8340579025361414, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.039230484541329, 0.0, 3.162277660168365, -0.447213595499961, 0.0, 0.0, 0.0, 5.891883036371791, -0.5345224838248448, 0.07559289460184586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.89999999999999, 0.0, 1.4605934866803583, 1.4200938936093819, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786952, -0.6982972487551772, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.260990336999394, 2.2135943621178726, 0.0, 0.0, 0.0, 0.0, 10.583005244258366, 2.993325909419166, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977288, 0.0, 0.0, -4.695742752749563, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110028, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 33:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, 0.019561519910898776, 0.12423233664947204, -0.031943828249996996, 0.0, -0.0566946709513841, 0.0115727512471569, 0.024549512651549157, -0.04677071733467428, 0.023622779563076696, 0.0, 0.0, 0.0, -0.0618589574131742, 0.021428571428571446, -0.004374088826398529, -0.0642857142857143, 0.00927884361197614, 0.007576144084141581, -0.005357142857142856 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336762, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321832, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955858, 0.0, 8.366600265340768, -1.18321595661993, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739498, 0.0, 0.0, 8.694826047713665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947011, -3.3935649046180636e-14, -3.346640106136308, -2.3664319132398495, 15.491933384829666, 0.0, 0.0, 0.6928203230275537, 0.5656854249492373, 0.39999999999999886, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.8989794855663495, 0.0, 0.0, 0.0, 14.198591479439074, -0.828078671210824, 1.2098624933629525e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0884716495130443e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 0.0, 0.0, 0.0, 14.342743312012727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000134, 0.0, 8.763560920082679, -1.549193338482974, 0.0, 0.0, 0.0, 9.524704719832533, -1.4813121596360834, 0.26186146828319146, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1176914536239795, 0.0, 3.162277660168379, 4.919349550499535, 0.0, 0.0, 0.0, 0.0, 10.690449676496982, -2.418972627259056, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5455844122715585, 0.0, 0.0, 7.66811580507228, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051666, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477958, 7.245688373094727, 4.1833001326703805, -0.5916079783099749, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869749, 0.0, 0.0, 4.3474130238568325, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646285, 0.0, 9.66091783079296, 0.6831300510639867, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.2403703492039373, 0.0, 0.0, 7.529940238806683, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244578, 2.449489742783181, 2.828427124746206, -1.0000000000000095, 9.165151389911685, 7.099295739719534, -0.41403933560541256, -2.049390153191928, -0.47809144373376167, 0.16903085094570522, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.1213203435596397, -0.40824829046386346, 3.1754264805429355, 0.0, 0.0, 7.171371656006364, 0.0, -1.380131118684709, -1.5614401167176546, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.80000000000001, -5.692099788303113, 4.381780460041349, -0.7745966692414907, 0.0, 10.998181667893988, 0.9621404708847333, 4.762352359916273, -0.7406560798180437, 0.1309307341415961, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119917, 2.7386127875258306, 1.5811388300841904, 2.4596747752497663, 0.0, 0.0, 9.258200997725515, 0.0, 5.345224838248491, -1.2094863136295253, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357735, 0.0, 0.0, 3.8340579025361397, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706658, 0.0, -3.162277660168412, -2.2360679774998027, 0.0, 0.0, 0.0, 13.747727084867515, 0.5345224838248532, 0.3779644730092276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999887, 0.0, 3.6514837167010707, -2.840187787218764, 0.0, 0.0, 0.0, 0.0, 12.344267996967348, 1.396594497510348, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048555, 0.0, 0.0, 6.640783086353614, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505551, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189435, 4.183300132670375, -0.5916079783099615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387008, 7.099295739719542, 0.0, 4.347413023856828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323076, 0.0, 3.864367132317193, -0.3415650255319911, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.080123449734629, 0.0, 7.099295739719546, 2.509980079602214, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299173, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724463, 2.4494897427831743, 2.828427124746207, -1.000000000000009, 1.309307341415954, 7.099295739719537, -0.4140393356054117, -2.049390153191927, -0.4780914437337623, 0.16903085094570483, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498075, 2.121320343559647, -0.40824829046386685, 3.1754264805429337, 9.071147352221455, 0.0, 7.171371656006362, 0.0, -1.3801311186847083, -1.5614401167176528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000009, 0.6324555320336753, 4.381780460041344, -0.7745966692414884, 0.0, 3.142337619398289, -0.10690449676496958, 4.76235235991627, -0.7406560798180428, 0.13093073414159664, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119886, 0.5477225575051662, 1.5811388300841966, 2.4596747752497654, 0.0, 9.071147352221454, 1.851640199545103, 0.0, 5.345224838248489, -1.209486313629527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135779, -6.260990336999449, 0.0, 3.8340579025361414, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.039230484541329, 0.0, 3.162277660168365, -0.447213595499961, 0.0, 0.0, 0.0, 5.891883036371791, -0.5345224838248448, 0.07559289460184586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.89999999999999, 0.0, 1.4605934866803583, 1.4200938936093819, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786952, -0.6982972487551772, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.260990336999394, 2.2135943621178726, 0.0, 0.0, 0.0, 0.0, 10.583005244258366, 2.993325909419166, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977288, 0.0, 0.0, -4.695742752749563, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110028, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 34:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, -0.11736911946539277, -0.04517539514526254, -0.03194382824999702, -0.01829812636778497, 0.04252100321353806, 0.03471825374147069, 0.040915854419248575, 0.03340765523905304, 0.023622779563076717, 0.08504200642707613, 0.023957871187497745, 0.02074812506896832, -0.006185895741317411, -0.005357142857142858, -0.004374088826398521, -0.01071428571428572, -0.009278843611976124, -0.007576144084141591, -0.00535714285714286 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336762, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321832, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955858, 0.0, 8.366600265340768, -1.18321595661993, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739498, 0.0, 0.0, 8.694826047713665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947011, -3.3935649046180636e-14, -3.346640106136308, -2.3664319132398495, 15.491933384829666, 0.0, 0.0, 0.6928203230275537, 0.5656854249492373, 0.39999999999999886, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.8989794855663495, 0.0, 0.0, 0.0, 14.198591479439074, -0.828078671210824, 1.2098624933629525e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0884716495130443e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 0.0, 0.0, 0.0, 14.342743312012727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000134, 0.0, 8.763560920082679, -1.549193338482974, 0.0, 0.0, 0.0, 9.524704719832533, -1.4813121596360834, 0.26186146828319146, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1176914536239795, 0.0, 3.162277660168379, 4.919349550499535, 0.0, 0.0, 0.0, 0.0, 10.690449676496982, -2.418972627259056, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5455844122715585, 0.0, 0.0, 7.66811580507228, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051666, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477958, 7.245688373094727, 4.1833001326703805, -0.5916079783099749, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869749, 0.0, 0.0, 4.3474130238568325, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646285, 0.0, 9.66091783079296, 0.6831300510639867, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.2403703492039373, 0.0, 0.0, 7.529940238806683, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244578, 2.449489742783181, 2.828427124746206, -1.0000000000000095, 9.165151389911685, 7.099295739719534, -0.41403933560541256, -2.049390153191928, -0.47809144373376167, 0.16903085094570522, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.1213203435596397, -0.40824829046386346, 3.1754264805429355, 0.0, 0.0, 7.171371656006364, 0.0, -1.380131118684709, -1.5614401167176546, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.80000000000001, -5.692099788303113, 4.381780460041349, -0.7745966692414907, 0.0, 10.998181667893988, 0.9621404708847333, 4.762352359916273, -0.7406560798180437, 0.1309307341415961, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119917, 2.7386127875258306, 1.5811388300841904, 2.4596747752497663, 0.0, 0.0, 9.258200997725515, 0.0, 5.345224838248491, -1.2094863136295253, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357735, 0.0, 0.0, 3.8340579025361397, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706658, 0.0, -3.162277660168412, -2.2360679774998027, 0.0, 0.0, 0.0, 13.747727084867515, 0.5345224838248532, 0.3779644730092276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999887, 0.0, 3.6514837167010707, -2.840187787218764, 0.0, 0.0, 0.0, 0.0, 12.344267996967348, 1.396594497510348, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048555, 0.0, 0.0, 6.640783086353614, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505551, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189435, 4.183300132670375, -0.5916079783099615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387008, 7.099295739719542, 0.0, 4.347413023856828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323076, 0.0, 3.864367132317193, -0.3415650255319911, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.080123449734629, 0.0, 7.099295739719546, 2.509980079602214, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299173, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724463, 2.4494897427831743, 2.828427124746207, -1.000000000000009, 1.309307341415954, 7.099295739719537, -0.4140393356054117, -2.049390153191927, -0.4780914437337623, 0.16903085094570483, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498075, 2.121320343559647, -0.40824829046386685, 3.1754264805429337, 9.071147352221455, 0.0, 7.171371656006362, 0.0, -1.3801311186847083, -1.5614401167176528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000009, 0.6324555320336753, 4.381780460041344, -0.7745966692414884, 0.0, 3.142337619398289, -0.10690449676496958, 4.76235235991627, -0.7406560798180428, 0.13093073414159664, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119886, 0.5477225575051662, 1.5811388300841966, 2.4596747752497654, 0.0, 9.071147352221454, 1.851640199545103, 0.0, 5.345224838248489, -1.209486313629527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135779, -6.260990336999449, 0.0, 3.8340579025361414, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.039230484541329, 0.0, 3.162277660168365, -0.447213595499961, 0.0, 0.0, 0.0, 5.891883036371791, -0.5345224838248448, 0.07559289460184586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.89999999999999, 0.0, 1.4605934866803583, 1.4200938936093819, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786952, -0.6982972487551772, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.260990336999394, 2.2135943621178726, 0.0, 0.0, 0.0, 0.0, 10.583005244258366, 2.993325909419166, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977288, 0.0, 0.0, -4.695742752749563, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110028, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 35:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, 0.11736911946539276, -0.04517539514526255, -0.03194382824999698, -0.018298126367784988, -0.04252100321353805, -0.03471825374147069, 0.04091585441924858, 0.033407655239053057, 0.023622779563076693, -0.08504200642707613, 0.02395787118749776, 0.02074812506896831, 0.006185895741317411, 0.005357142857142859, 0.004374088826398524, -0.01071428571428572, -0.009278843611976131, -0.007576144084141586, -0.0053571428571428555 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336762, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321832, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955858, 0.0, 8.366600265340768, -1.18321595661993, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739498, 0.0, 0.0, 8.694826047713665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947011, -3.3935649046180636e-14, -3.346640106136308, -2.3664319132398495, 15.491933384829666, 0.0, 0.0, 0.6928203230275537, 0.5656854249492373, 0.39999999999999886, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.8989794855663495, 0.0, 0.0, 0.0, 14.198591479439074, -0.828078671210824, 1.2098624933629525e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0884716495130443e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 0.0, 0.0, 0.0, 14.342743312012727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000134, 0.0, 8.763560920082679, -1.549193338482974, 0.0, 0.0, 0.0, 9.524704719832533, -1.4813121596360834, 0.26186146828319146, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1176914536239795, 0.0, 3.162277660168379, 4.919349550499535, 0.0, 0.0, 0.0, 0.0, 10.690449676496982, -2.418972627259056, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5455844122715585, 0.0, 0.0, 7.66811580507228, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051666, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477958, 7.245688373094727, 4.1833001326703805, -0.5916079783099749, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869749, 0.0, 0.0, 4.3474130238568325, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646285, 0.0, 9.66091783079296, 0.6831300510639867, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.2403703492039373, 0.0, 0.0, 7.529940238806683, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244578, 2.449489742783181, 2.828427124746206, -1.0000000000000095, 9.165151389911685, 7.099295739719534, -0.41403933560541256, -2.049390153191928, -0.47809144373376167, 0.16903085094570522, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.1213203435596397, -0.40824829046386346, 3.1754264805429355, 0.0, 0.0, 7.171371656006364, 0.0, -1.380131118684709, -1.5614401167176546, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.80000000000001, -5.692099788303113, 4.381780460041349, -0.7745966692414907, 0.0, 10.998181667893988, 0.9621404708847333, 4.762352359916273, -0.7406560798180437, 0.1309307341415961, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119917, 2.7386127875258306, 1.5811388300841904, 2.4596747752497663, 0.0, 0.0, 9.258200997725515, 0.0, 5.345224838248491, -1.2094863136295253, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357735, 0.0, 0.0, 3.8340579025361397, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706658, 0.0, -3.162277660168412, -2.2360679774998027, 0.0, 0.0, 0.0, 13.747727084867515, 0.5345224838248532, 0.3779644730092276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999887, 0.0, 3.6514837167010707, -2.840187787218764, 0.0, 0.0, 0.0, 0.0, 12.344267996967348, 1.396594497510348, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048555, 0.0, 0.0, 6.640783086353614, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505551, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189435, 4.183300132670375, -0.5916079783099615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387008, 7.099295739719542, 0.0, 4.347413023856828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323076, 0.0, 3.864367132317193, -0.3415650255319911, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.080123449734629, 0.0, 7.099295739719546, 2.509980079602214, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299173, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724463, 2.4494897427831743, 2.828427124746207, -1.000000000000009, 1.309307341415954, 7.099295739719537, -0.4140393356054117, -2.049390153191927, -0.4780914437337623, 0.16903085094570483, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498075, 2.121320343559647, -0.40824829046386685, 3.1754264805429337, 9.071147352221455, 0.0, 7.171371656006362, 0.0, -1.3801311186847083, -1.5614401167176528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000009, 0.6324555320336753, 4.381780460041344, -0.7745966692414884, 0.0, 3.142337619398289, -0.10690449676496958, 4.76235235991627, -0.7406560798180428, 0.13093073414159664, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119886, 0.5477225575051662, 1.5811388300841966, 2.4596747752497654, 0.0, 9.071147352221454, 1.851640199545103, 0.0, 5.345224838248489, -1.209486313629527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135779, -6.260990336999449, 0.0, 3.8340579025361414, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.039230484541329, 0.0, 3.162277660168365, -0.447213595499961, 0.0, 0.0, 0.0, 5.891883036371791, -0.5345224838248448, 0.07559289460184586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.89999999999999, 0.0, 1.4605934866803583, 1.4200938936093819, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786952, -0.6982972487551772, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.260990336999394, 2.2135943621178726, 0.0, 0.0, 0.0, 0.0, 10.583005244258366, 2.993325909419166, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977288, 0.0, 0.0, -4.695742752749563, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110028, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 36:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.2598076211353317, 0.11736911946539266, 0.06776309271789384, 0.0479157423749955, 0.0, 0.0850420064270761, 0.06943650748294135, -0.07364853795464742, 0.04008918628686366, -0.09921567416492216, 0.0, 0.0, 0.0, 0.0, 0.07500000000000001, -0.026244532958391176, 0.0, -0.06495190528383289, -0.015152288168283167, 0.02678571428571429 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336762, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321832, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955858, 0.0, 8.366600265340768, -1.18321595661993, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739498, 0.0, 0.0, 8.694826047713665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947011, -3.3935649046180636e-14, -3.346640106136308, -2.3664319132398495, 15.491933384829666, 0.0, 0.0, 0.6928203230275537, 0.5656854249492373, 0.39999999999999886, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.8989794855663495, 0.0, 0.0, 0.0, 14.198591479439074, -0.828078671210824, 1.2098624933629525e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0884716495130443e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 0.0, 0.0, 0.0, 14.342743312012727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000134, 0.0, 8.763560920082679, -1.549193338482974, 0.0, 0.0, 0.0, 9.524704719832533, -1.4813121596360834, 0.26186146828319146, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1176914536239795, 0.0, 3.162277660168379, 4.919349550499535, 0.0, 0.0, 0.0, 0.0, 10.690449676496982, -2.418972627259056, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5455844122715585, 0.0, 0.0, 7.66811580507228, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051666, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477958, 7.245688373094727, 4.1833001326703805, -0.5916079783099749, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869749, 0.0, 0.0, 4.3474130238568325, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646285, 0.0, 9.66091783079296, 0.6831300510639867, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.2403703492039373, 0.0, 0.0, 7.529940238806683, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244578, 2.449489742783181, 2.828427124746206, -1.0000000000000095, 9.165151389911685, 7.099295739719534, -0.41403933560541256, -2.049390153191928, -0.47809144373376167, 0.16903085094570522, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.1213203435596397, -0.40824829046386346, 3.1754264805429355, 0.0, 0.0, 7.171371656006364, 0.0, -1.380131118684709, -1.5614401167176546, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.80000000000001, -5.692099788303113, 4.381780460041349, -0.7745966692414907, 0.0, 10.998181667893988, 0.9621404708847333, 4.762352359916273, -0.7406560798180437, 0.1309307341415961, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119917, 2.7386127875258306, 1.5811388300841904, 2.4596747752497663, 0.0, 0.0, 9.258200997725515, 0.0, 5.345224838248491, -1.2094863136295253, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357735, 0.0, 0.0, 3.8340579025361397, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706658, 0.0, -3.162277660168412, -2.2360679774998027, 0.0, 0.0, 0.0, 13.747727084867515, 0.5345224838248532, 0.3779644730092276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999887, 0.0, 3.6514837167010707, -2.840187787218764, 0.0, 0.0, 0.0, 0.0, 12.344267996967348, 1.396594497510348, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048555, 0.0, 0.0, 6.640783086353614, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505551, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189435, 4.183300132670375, -0.5916079783099615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387008, 7.099295739719542, 0.0, 4.347413023856828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323076, 0.0, 3.864367132317193, -0.3415650255319911, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.080123449734629, 0.0, 7.099295739719546, 2.509980079602214, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299173, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724463, 2.4494897427831743, 2.828427124746207, -1.000000000000009, 1.309307341415954, 7.099295739719537, -0.4140393356054117, -2.049390153191927, -0.4780914437337623, 0.16903085094570483, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498075, 2.121320343559647, -0.40824829046386685, 3.1754264805429337, 9.071147352221455, 0.0, 7.171371656006362, 0.0, -1.3801311186847083, -1.5614401167176528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000009, 0.6324555320336753, 4.381780460041344, -0.7745966692414884, 0.0, 3.142337619398289, -0.10690449676496958, 4.76235235991627, -0.7406560798180428, 0.13093073414159664, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119886, 0.5477225575051662, 1.5811388300841966, 2.4596747752497654, 0.0, 9.071147352221454, 1.851640199545103, 0.0, 5.345224838248489, -1.209486313629527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135779, -6.260990336999449, 0.0, 3.8340579025361414, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.039230484541329, 0.0, 3.162277660168365, -0.447213595499961, 0.0, 0.0, 0.0, 5.891883036371791, -0.5345224838248448, 0.07559289460184586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.89999999999999, 0.0, 1.4605934866803583, 1.4200938936093819, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786952, -0.6982972487551772, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.260990336999394, 2.2135943621178726, 0.0, 0.0, 0.0, 0.0, 10.583005244258366, 2.993325909419166, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977288, 0.0, 0.0, -4.695742752749563, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110028, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 37:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.2598076211353316, -0.11736911946539272, 0.0677630927178939, 0.047915742374995435, 0.0, -0.08504200642707613, -0.06943650748294138, -0.0736485379546474, 0.04008918628686368, -0.09921567416492216, 0.0, 0.0, 0.0, 0.0, -0.07500000000000001, 0.02624453295839119, 0.0, -0.06495190528383286, -0.015152288168283169, 0.02678571428571431 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336762, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321832, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955858, 0.0, 8.366600265340768, -1.18321595661993, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739498, 0.0, 0.0, 8.694826047713665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947011, -3.3935649046180636e-14, -3.346640106136308, -2.3664319132398495, 15.491933384829666, 0.0, 0.0, 0.6928203230275537, 0.5656854249492373, 0.39999999999999886, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.8989794855663495, 0.0, 0.0, 0.0, 14.198591479439074, -0.828078671210824, 1.2098624933629525e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0884716495130443e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 0.0, 0.0, 0.0, 14.342743312012727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000134, 0.0, 8.763560920082679, -1.549193338482974, 0.0, 0.0, 0.0, 9.524704719832533, -1.4813121596360834, 0.26186146828319146, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1176914536239795, 0.0, 3.162277660168379, 4.919349550499535, 0.0, 0.0, 0.0, 0.0, 10.690449676496982, -2.418972627259056, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5455844122715585, 0.0, 0.0, 7.66811580507228, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051666, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477958, 7.245688373094727, 4.1833001326703805, -0.5916079783099749, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869749, 0.0, 0.0, 4.3474130238568325, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646285, 0.0, 9.66091783079296, 0.6831300510639867, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.2403703492039373, 0.0, 0.0, 7.529940238806683, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244578, 2.449489742783181, 2.828427124746206, -1.0000000000000095, 9.165151389911685, 7.099295739719534, -0.41403933560541256, -2.049390153191928, -0.47809144373376167, 0.16903085094570522, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.1213203435596397, -0.40824829046386346, 3.1754264805429355, 0.0, 0.0, 7.171371656006364, 0.0, -1.380131118684709, -1.5614401167176546, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.80000000000001, -5.692099788303113, 4.381780460041349, -0.7745966692414907, 0.0, 10.998181667893988, 0.9621404708847333, 4.762352359916273, -0.7406560798180437, 0.1309307341415961, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119917, 2.7386127875258306, 1.5811388300841904, 2.4596747752497663, 0.0, 0.0, 9.258200997725515, 0.0, 5.345224838248491, -1.2094863136295253, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357735, 0.0, 0.0, 3.8340579025361397, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706658, 0.0, -3.162277660168412, -2.2360679774998027, 0.0, 0.0, 0.0, 13.747727084867515, 0.5345224838248532, 0.3779644730092276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999887, 0.0, 3.6514837167010707, -2.840187787218764, 0.0, 0.0, 0.0, 0.0, 12.344267996967348, 1.396594497510348, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048555, 0.0, 0.0, 6.640783086353614, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505551, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189435, 4.183300132670375, -0.5916079783099615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387008, 7.099295739719542, 0.0, 4.347413023856828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323076, 0.0, 3.864367132317193, -0.3415650255319911, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.080123449734629, 0.0, 7.099295739719546, 2.509980079602214, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299173, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724463, 2.4494897427831743, 2.828427124746207, -1.000000000000009, 1.309307341415954, 7.099295739719537, -0.4140393356054117, -2.049390153191927, -0.4780914437337623, 0.16903085094570483, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498075, 2.121320343559647, -0.40824829046386685, 3.1754264805429337, 9.071147352221455, 0.0, 7.171371656006362, 0.0, -1.3801311186847083, -1.5614401167176528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000009, 0.6324555320336753, 4.381780460041344, -0.7745966692414884, 0.0, 3.142337619398289, -0.10690449676496958, 4.76235235991627, -0.7406560798180428, 0.13093073414159664, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119886, 0.5477225575051662, 1.5811388300841966, 2.4596747752497654, 0.0, 9.071147352221454, 1.851640199545103, 0.0, 5.345224838248489, -1.209486313629527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135779, -6.260990336999449, 0.0, 3.8340579025361414, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.039230484541329, 0.0, 3.162277660168365, -0.447213595499961, 0.0, 0.0, 0.0, 5.891883036371791, -0.5345224838248448, 0.07559289460184586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.89999999999999, 0.0, 1.4605934866803583, 1.4200938936093819, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786952, -0.6982972487551772, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.260990336999394, 2.2135943621178726, 0.0, 0.0, 0.0, 0.0, 10.583005244258366, 2.993325909419166, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977288, 0.0, 0.0, -4.695742752749563, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110028, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 38:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.2598076211353315, 0.0, -0.1355261854357876, 0.04791574237499552, -0.10978875820671, 0.0, 0.0, 0.024549512651549112, -0.08017837257372729, -0.09921567416492215, 0.0, 0.0, -0.09682458365518544, 0.0, 0.0, 0.0, 0.0, 0.02165063509461095, 0.03030457633656631, 0.026785714285714277 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336762, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321832, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955858, 0.0, 8.366600265340768, -1.18321595661993, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739498, 0.0, 0.0, 8.694826047713665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947011, -3.3935649046180636e-14, -3.346640106136308, -2.3664319132398495, 15.491933384829666, 0.0, 0.0, 0.6928203230275537, 0.5656854249492373, 0.39999999999999886, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.8989794855663495, 0.0, 0.0, 0.0, 14.198591479439074, -0.828078671210824, 1.2098624933629525e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0884716495130443e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 0.0, 0.0, 0.0, 14.342743312012727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000134, 0.0, 8.763560920082679, -1.549193338482974, 0.0, 0.0, 0.0, 9.524704719832533, -1.4813121596360834, 0.26186146828319146, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1176914536239795, 0.0, 3.162277660168379, 4.919349550499535, 0.0, 0.0, 0.0, 0.0, 10.690449676496982, -2.418972627259056, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5455844122715585, 0.0, 0.0, 7.66811580507228, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051666, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477958, 7.245688373094727, 4.1833001326703805, -0.5916079783099749, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869749, 0.0, 0.0, 4.3474130238568325, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646285, 0.0, 9.66091783079296, 0.6831300510639867, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.2403703492039373, 0.0, 0.0, 7.529940238806683, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244578, 2.449489742783181, 2.828427124746206, -1.0000000000000095, 9.165151389911685, 7.099295739719534, -0.41403933560541256, -2.049390153191928, -0.47809144373376167, 0.16903085094570522, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.1213203435596397, -0.40824829046386346, 3.1754264805429355, 0.0, 0.0, 7.171371656006364, 0.0, -1.380131118684709, -1.5614401167176546, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.80000000000001, -5.692099788303113, 4.381780460041349, -0.7745966692414907, 0.0, 10.998181667893988, 0.9621404708847333, 4.762352359916273, -0.7406560798180437, 0.1309307341415961, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119917, 2.7386127875258306, 1.5811388300841904, 2.4596747752497663, 0.0, 0.0, 9.258200997725515, 0.0, 5.345224838248491, -1.2094863136295253, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357735, 0.0, 0.0, 3.8340579025361397, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706658, 0.0, -3.162277660168412, -2.2360679774998027, 0.0, 0.0, 0.0, 13.747727084867515, 0.5345224838248532, 0.3779644730092276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999887, 0.0, 3.6514837167010707, -2.840187787218764, 0.0, 0.0, 0.0, 0.0, 12.344267996967348, 1.396594497510348, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048555, 0.0, 0.0, 6.640783086353614, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505551, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189435, 4.183300132670375, -0.5916079783099615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387008, 7.099295739719542, 0.0, 4.347413023856828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323076, 0.0, 3.864367132317193, -0.3415650255319911, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.080123449734629, 0.0, 7.099295739719546, 2.509980079602214, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299173, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724463, 2.4494897427831743, 2.828427124746207, -1.000000000000009, 1.309307341415954, 7.099295739719537, -0.4140393356054117, -2.049390153191927, -0.4780914437337623, 0.16903085094570483, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498075, 2.121320343559647, -0.40824829046386685, 3.1754264805429337, 9.071147352221455, 0.0, 7.171371656006362, 0.0, -1.3801311186847083, -1.5614401167176528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000009, 0.6324555320336753, 4.381780460041344, -0.7745966692414884, 0.0, 3.142337619398289, -0.10690449676496958, 4.76235235991627, -0.7406560798180428, 0.13093073414159664, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119886, 0.5477225575051662, 1.5811388300841966, 2.4596747752497654, 0.0, 9.071147352221454, 1.851640199545103, 0.0, 5.345224838248489, -1.209486313629527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135779, -6.260990336999449, 0.0, 3.8340579025361414, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.039230484541329, 0.0, 3.162277660168365, -0.447213595499961, 0.0, 0.0, 0.0, 5.891883036371791, -0.5345224838248448, 0.07559289460184586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.89999999999999, 0.0, 1.4605934866803583, 1.4200938936093819, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786952, -0.6982972487551772, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.260990336999394, 2.2135943621178726, 0.0, 0.0, 0.0, 0.0, 10.583005244258366, 2.993325909419166, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977288, 0.0, 0.0, -4.695742752749563, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110028, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 39:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.2598076211353317, 0.0, 0.0, -0.14374722712498647, -0.10978875820671001, 0.0, 0.0, -0.12274756325774572, 0.0, 0.042521003213538064, 0.0, -0.095831484749991, 0.013832083379312196, 0.0, 0.0, 0.0, 0.042857142857142864, 0.015464739353293549, 0.0, -0.005357142857142852 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336762, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321832, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955858, 0.0, 8.366600265340768, -1.18321595661993, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739498, 0.0, 0.0, 8.694826047713665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947011, -3.3935649046180636e-14, -3.346640106136308, -2.3664319132398495, 15.491933384829666, 0.0, 0.0, 0.6928203230275537, 0.5656854249492373, 0.39999999999999886, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.8989794855663495, 0.0, 0.0, 0.0, 14.198591479439074, -0.828078671210824, 1.2098624933629525e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0884716495130443e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 0.0, 0.0, 0.0, 14.342743312012727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000134, 0.0, 8.763560920082679, -1.549193338482974, 0.0, 0.0, 0.0, 9.524704719832533, -1.4813121596360834, 0.26186146828319146, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1176914536239795, 0.0, 3.162277660168379, 4.919349550499535, 0.0, 0.0, 0.0, 0.0, 10.690449676496982, -2.418972627259056, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5455844122715585, 0.0, 0.0, 7.66811580507228, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051666, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477958, 7.245688373094727, 4.1833001326703805, -0.5916079783099749, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869749, 0.0, 0.0, 4.3474130238568325, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646285, 0.0, 9.66091783079296, 0.6831300510639867, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.2403703492039373, 0.0, 0.0, 7.529940238806683, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244578, 2.449489742783181, 2.828427124746206, -1.0000000000000095, 9.165151389911685, 7.099295739719534, -0.41403933560541256, -2.049390153191928, -0.47809144373376167, 0.16903085094570522, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.1213203435596397, -0.40824829046386346, 3.1754264805429355, 0.0, 0.0, 7.171371656006364, 0.0, -1.380131118684709, -1.5614401167176546, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.80000000000001, -5.692099788303113, 4.381780460041349, -0.7745966692414907, 0.0, 10.998181667893988, 0.9621404708847333, 4.762352359916273, -0.7406560798180437, 0.1309307341415961, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119917, 2.7386127875258306, 1.5811388300841904, 2.4596747752497663, 0.0, 0.0, 9.258200997725515, 0.0, 5.345224838248491, -1.2094863136295253, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357735, 0.0, 0.0, 3.8340579025361397, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706658, 0.0, -3.162277660168412, -2.2360679774998027, 0.0, 0.0, 0.0, 13.747727084867515, 0.5345224838248532, 0.3779644730092276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999887, 0.0, 3.6514837167010707, -2.840187787218764, 0.0, 0.0, 0.0, 0.0, 12.344267996967348, 1.396594497510348, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048555, 0.0, 0.0, 6.640783086353614, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505551, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189435, 4.183300132670375, -0.5916079783099615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387008, 7.099295739719542, 0.0, 4.347413023856828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323076, 0.0, 3.864367132317193, -0.3415650255319911, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.080123449734629, 0.0, 7.099295739719546, 2.509980079602214, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299173, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724463, 2.4494897427831743, 2.828427124746207, -1.000000000000009, 1.309307341415954, 7.099295739719537, -0.4140393356054117, -2.049390153191927, -0.4780914437337623, 0.16903085094570483, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498075, 2.121320343559647, -0.40824829046386685, 3.1754264805429337, 9.071147352221455, 0.0, 7.171371656006362, 0.0, -1.3801311186847083, -1.5614401167176528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000009, 0.6324555320336753, 4.381780460041344, -0.7745966692414884, 0.0, 3.142337619398289, -0.10690449676496958, 4.76235235991627, -0.7406560798180428, 0.13093073414159664, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119886, 0.5477225575051662, 1.5811388300841966, 2.4596747752497654, 0.0, 9.071147352221454, 1.851640199545103, 0.0, 5.345224838248489, -1.209486313629527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135779, -6.260990336999449, 0.0, 3.8340579025361414, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.039230484541329, 0.0, 3.162277660168365, -0.447213595499961, 0.0, 0.0, 0.0, 5.891883036371791, -0.5345224838248448, 0.07559289460184586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.89999999999999, 0.0, 1.4605934866803583, 1.4200938936093819, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786952, -0.6982972487551772, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.260990336999394, 2.2135943621178726, 0.0, 0.0, 0.0, 0.0, 10.583005244258366, 2.993325909419166, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977288, 0.0, 0.0, -4.695742752749563, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110028, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 40:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.028867513459481377, 0.01304101327393252, 0.007529232524210424, 0.005323971374999493, 0.01829812636778498, 0.014173667737846016, 0.011572751247156891, 0.008183170883849705, 0.006681531047810616, 0.004724555912615332, -0.028347335475692043, -0.023957871187497756, -0.020748125068968316, -0.01855768722395226, -0.016071428571428573, -0.013122266479195604, -0.010714285714285692, -0.009278843611976116, -0.007576144084141579, -0.00535714285714285 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336762, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321832, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955858, 0.0, 8.366600265340768, -1.18321595661993, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739498, 0.0, 0.0, 8.694826047713665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947011, -3.3935649046180636e-14, -3.346640106136308, -2.3664319132398495, 15.491933384829666, 0.0, 0.0, 0.6928203230275537, 0.5656854249492373, 0.39999999999999886, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.8989794855663495, 0.0, 0.0, 0.0, 14.198591479439074, -0.828078671210824, 1.2098624933629525e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0884716495130443e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 0.0, 0.0, 0.0, 14.342743312012727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000134, 0.0, 8.763560920082679, -1.549193338482974, 0.0, 0.0, 0.0, 9.524704719832533, -1.4813121596360834, 0.26186146828319146, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1176914536239795, 0.0, 3.162277660168379, 4.919349550499535, 0.0, 0.0, 0.0, 0.0, 10.690449676496982, -2.418972627259056, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5455844122715585, 0.0, 0.0, 7.66811580507228, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051666, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477958, 7.245688373094727, 4.1833001326703805, -0.5916079783099749, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869749, 0.0, 0.0, 4.3474130238568325, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646285, 0.0, 9.66091783079296, 0.6831300510639867, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.2403703492039373, 0.0, 0.0, 7.529940238806683, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244578, 2.449489742783181, 2.828427124746206, -1.0000000000000095, 9.165151389911685, 7.099295739719534, -0.41403933560541256, -2.049390153191928, -0.47809144373376167, 0.16903085094570522, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.1213203435596397, -0.40824829046386346, 3.1754264805429355, 0.0, 0.0, 7.171371656006364, 0.0, -1.380131118684709, -1.5614401167176546, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.80000000000001, -5.692099788303113, 4.381780460041349, -0.7745966692414907, 0.0, 10.998181667893988, 0.9621404708847333, 4.762352359916273, -0.7406560798180437, 0.1309307341415961, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119917, 2.7386127875258306, 1.5811388300841904, 2.4596747752497663, 0.0, 0.0, 9.258200997725515, 0.0, 5.345224838248491, -1.2094863136295253, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357735, 0.0, 0.0, 3.8340579025361397, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706658, 0.0, -3.162277660168412, -2.2360679774998027, 0.0, 0.0, 0.0, 13.747727084867515, 0.5345224838248532, 0.3779644730092276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999887, 0.0, 3.6514837167010707, -2.840187787218764, 0.0, 0.0, 0.0, 0.0, 12.344267996967348, 1.396594497510348, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048555, 0.0, 0.0, 6.640783086353614, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505551, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189435, 4.183300132670375, -0.5916079783099615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387008, 7.099295739719542, 0.0, 4.347413023856828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323076, 0.0, 3.864367132317193, -0.3415650255319911, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.080123449734629, 0.0, 7.099295739719546, 2.509980079602214, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299173, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724463, 2.4494897427831743, 2.828427124746207, -1.000000000000009, 1.309307341415954, 7.099295739719537, -0.4140393356054117, -2.049390153191927, -0.4780914437337623, 0.16903085094570483, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498075, 2.121320343559647, -0.40824829046386685, 3.1754264805429337, 9.071147352221455, 0.0, 7.171371656006362, 0.0, -1.3801311186847083, -1.5614401167176528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000009, 0.6324555320336753, 4.381780460041344, -0.7745966692414884, 0.0, 3.142337619398289, -0.10690449676496958, 4.76235235991627, -0.7406560798180428, 0.13093073414159664, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119886, 0.5477225575051662, 1.5811388300841966, 2.4596747752497654, 0.0, 9.071147352221454, 1.851640199545103, 0.0, 5.345224838248489, -1.209486313629527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135779, -6.260990336999449, 0.0, 3.8340579025361414, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.039230484541329, 0.0, 3.162277660168365, -0.447213595499961, 0.0, 0.0, 0.0, 5.891883036371791, -0.5345224838248448, 0.07559289460184586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.89999999999999, 0.0, 1.4605934866803583, 1.4200938936093819, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786952, -0.6982972487551772, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.260990336999394, 2.2135943621178726, 0.0, 0.0, 0.0, 0.0, 10.583005244258366, 2.993325909419166, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977288, 0.0, 0.0, -4.695742752749563, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110028, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 41:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.028867513459481454, -0.01304101327393248, 0.007529232524210435, 0.005323971374999493, 0.018298126367784984, -0.014173667737846004, -0.011572751247156891, 0.008183170883849717, 0.0066815310478106045, 0.004724555912615337, 0.028347335475692036, -0.02395787118749775, -0.020748125068968302, 0.01855768722395226, 0.01607142857142858, 0.013122266479195593, -0.010714285714285723, -0.00927884361197613, -0.00757614408414158, -0.005357142857142854 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336762, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321832, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955858, 0.0, 8.366600265340768, -1.18321595661993, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739498, 0.0, 0.0, 8.694826047713665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947011, -3.3935649046180636e-14, -3.346640106136308, -2.3664319132398495, 15.491933384829666, 0.0, 0.0, 0.6928203230275537, 0.5656854249492373, 0.39999999999999886, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.8989794855663495, 0.0, 0.0, 0.0, 14.198591479439074, -0.828078671210824, 1.2098624933629525e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0884716495130443e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 0.0, 0.0, 0.0, 14.342743312012727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000134, 0.0, 8.763560920082679, -1.549193338482974, 0.0, 0.0, 0.0, 9.524704719832533, -1.4813121596360834, 0.26186146828319146, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1176914536239795, 0.0, 3.162277660168379, 4.919349550499535, 0.0, 0.0, 0.0, 0.0, 10.690449676496982, -2.418972627259056, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5455844122715585, 0.0, 0.0, 7.66811580507228, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051666, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477958, 7.245688373094727, 4.1833001326703805, -0.5916079783099749, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869749, 0.0, 0.0, 4.3474130238568325, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646285, 0.0, 9.66091783079296, 0.6831300510639867, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.2403703492039373, 0.0, 0.0, 7.529940238806683, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244578, 2.449489742783181, 2.828427124746206, -1.0000000000000095, 9.165151389911685, 7.099295739719534, -0.41403933560541256, -2.049390153191928, -0.47809144373376167, 0.16903085094570522, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.1213203435596397, -0.40824829046386346, 3.1754264805429355, 0.0, 0.0, 7.171371656006364, 0.0, -1.380131118684709, -1.5614401167176546, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.80000000000001, -5.692099788303113, 4.381780460041349, -0.7745966692414907, 0.0, 10.998181667893988, 0.9621404708847333, 4.762352359916273, -0.7406560798180437, 0.1309307341415961, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119917, 2.7386127875258306, 1.5811388300841904, 2.4596747752497663, 0.0, 0.0, 9.258200997725515, 0.0, 5.345224838248491, -1.2094863136295253, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357735, 0.0, 0.0, 3.8340579025361397, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706658, 0.0, -3.162277660168412, -2.2360679774998027, 0.0, 0.0, 0.0, 13.747727084867515, 0.5345224838248532, 0.3779644730092276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999887, 0.0, 3.6514837167010707, -2.840187787218764, 0.0, 0.0, 0.0, 0.0, 12.344267996967348, 1.396594497510348, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048555, 0.0, 0.0, 6.640783086353614, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505551, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189435, 4.183300132670375, -0.5916079783099615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387008, 7.099295739719542, 0.0, 4.347413023856828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323076, 0.0, 3.864367132317193, -0.3415650255319911, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.080123449734629, 0.0, 7.099295739719546, 2.509980079602214, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299173, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724463, 2.4494897427831743, 2.828427124746207, -1.000000000000009, 1.309307341415954, 7.099295739719537, -0.4140393356054117, -2.049390153191927, -0.4780914437337623, 0.16903085094570483, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498075, 2.121320343559647, -0.40824829046386685, 3.1754264805429337, 9.071147352221455, 0.0, 7.171371656006362, 0.0, -1.3801311186847083, -1.5614401167176528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000009, 0.6324555320336753, 4.381780460041344, -0.7745966692414884, 0.0, 3.142337619398289, -0.10690449676496958, 4.76235235991627, -0.7406560798180428, 0.13093073414159664, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119886, 0.5477225575051662, 1.5811388300841966, 2.4596747752497654, 0.0, 9.071147352221454, 1.851640199545103, 0.0, 5.345224838248489, -1.209486313629527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135779, -6.260990336999449, 0.0, 3.8340579025361414, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.039230484541329, 0.0, 3.162277660168365, -0.447213595499961, 0.0, 0.0, 0.0, 5.891883036371791, -0.5345224838248448, 0.07559289460184586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.89999999999999, 0.0, 1.4605934866803583, 1.4200938936093819, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786952, -0.6982972487551772, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.260990336999394, 2.2135943621178726, 0.0, 0.0, 0.0, 0.0, 10.583005244258366, 2.993325909419166, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977288, 0.0, 0.0, -4.695742752749563, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110028, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 42:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.028867513459481187, 0.0, -0.015058465048420894, 0.005323971374999505, 0.0, 0.0, 0.0, 0.02454951265154915, -0.01336306209562124, 0.004724555912615356, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.042857142857142844, -0.027836530835928387, 0.015152288168283172, -0.005357142857142867 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336762, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321832, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955858, 0.0, 8.366600265340768, -1.18321595661993, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739498, 0.0, 0.0, 8.694826047713665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947011, -3.3935649046180636e-14, -3.346640106136308, -2.3664319132398495, 15.491933384829666, 0.0, 0.0, 0.6928203230275537, 0.5656854249492373, 0.39999999999999886, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.8989794855663495, 0.0, 0.0, 0.0, 14.198591479439074, -0.828078671210824, 1.2098624933629525e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0884716495130443e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 0.0, 0.0, 0.0, 14.342743312012727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000134, 0.0, 8.763560920082679, -1.549193338482974, 0.0, 0.0, 0.0, 9.524704719832533, -1.4813121596360834, 0.26186146828319146, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1176914536239795, 0.0, 3.162277660168379, 4.919349550499535, 0.0, 0.0, 0.0, 0.0, 10.690449676496982, -2.418972627259056, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5455844122715585, 0.0, 0.0, 7.66811580507228, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051666, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477958, 7.245688373094727, 4.1833001326703805, -0.5916079783099749, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869749, 0.0, 0.0, 4.3474130238568325, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646285, 0.0, 9.66091783079296, 0.6831300510639867, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.2403703492039373, 0.0, 0.0, 7.529940238806683, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244578, 2.449489742783181, 2.828427124746206, -1.0000000000000095, 9.165151389911685, 7.099295739719534, -0.41403933560541256, -2.049390153191928, -0.47809144373376167, 0.16903085094570522, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.1213203435596397, -0.40824829046386346, 3.1754264805429355, 0.0, 0.0, 7.171371656006364, 0.0, -1.380131118684709, -1.5614401167176546, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.80000000000001, -5.692099788303113, 4.381780460041349, -0.7745966692414907, 0.0, 10.998181667893988, 0.9621404708847333, 4.762352359916273, -0.7406560798180437, 0.1309307341415961, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119917, 2.7386127875258306, 1.5811388300841904, 2.4596747752497663, 0.0, 0.0, 9.258200997725515, 0.0, 5.345224838248491, -1.2094863136295253, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357735, 0.0, 0.0, 3.8340579025361397, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706658, 0.0, -3.162277660168412, -2.2360679774998027, 0.0, 0.0, 0.0, 13.747727084867515, 0.5345224838248532, 0.3779644730092276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999887, 0.0, 3.6514837167010707, -2.840187787218764, 0.0, 0.0, 0.0, 0.0, 12.344267996967348, 1.396594497510348, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048555, 0.0, 0.0, 6.640783086353614, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505551, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189435, 4.183300132670375, -0.5916079783099615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387008, 7.099295739719542, 0.0, 4.347413023856828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323076, 0.0, 3.864367132317193, -0.3415650255319911, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.080123449734629, 0.0, 7.099295739719546, 2.509980079602214, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299173, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724463, 2.4494897427831743, 2.828427124746207, -1.000000000000009, 1.309307341415954, 7.099295739719537, -0.4140393356054117, -2.049390153191927, -0.4780914437337623, 0.16903085094570483, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498075, 2.121320343559647, -0.40824829046386685, 3.1754264805429337, 9.071147352221455, 0.0, 7.171371656006362, 0.0, -1.3801311186847083, -1.5614401167176528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000009, 0.6324555320336753, 4.381780460041344, -0.7745966692414884, 0.0, 3.142337619398289, -0.10690449676496958, 4.76235235991627, -0.7406560798180428, 0.13093073414159664, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119886, 0.5477225575051662, 1.5811388300841966, 2.4596747752497654, 0.0, 9.071147352221454, 1.851640199545103, 0.0, 5.345224838248489, -1.209486313629527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135779, -6.260990336999449, 0.0, 3.8340579025361414, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.039230484541329, 0.0, 3.162277660168365, -0.447213595499961, 0.0, 0.0, 0.0, 5.891883036371791, -0.5345224838248448, 0.07559289460184586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.89999999999999, 0.0, 1.4605934866803583, 1.4200938936093819, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786952, -0.6982972487551772, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.260990336999394, 2.2135943621178726, 0.0, 0.0, 0.0, 0.0, 10.583005244258366, 2.993325909419166, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977288, 0.0, 0.0, -4.695742752749563, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110028, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 43:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.028867513459481315, 0.0, 0.0, -0.01597191412499849, 0.0, 0.0, 0.0, 0.0, 0.0, 0.028347335475692043, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.053571428571428575 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336762, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321832, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955858, 0.0, 8.366600265340768, -1.18321595661993, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739498, 0.0, 0.0, 8.694826047713665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947011, -3.3935649046180636e-14, -3.346640106136308, -2.3664319132398495, 15.491933384829666, 0.0, 0.0, 0.6928203230275537, 0.5656854249492373, 0.39999999999999886, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.8989794855663495, 0.0, 0.0, 0.0, 14.198591479439074, -0.828078671210824, 1.2098624933629525e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0884716495130443e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 0.0, 0.0, 0.0, 14.342743312012727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000134, 0.0, 8.763560920082679, -1.549193338482974, 0.0, 0.0, 0.0, 9.524704719832533, -1.4813121596360834, 0.26186146828319146, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1176914536239795, 0.0, 3.162277660168379, 4.919349550499535, 0.0, 0.0, 0.0, 0.0, 10.690449676496982, -2.418972627259056, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5455844122715585, 0.0, 0.0, 7.66811580507228, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051666, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477958, 7.245688373094727, 4.1833001326703805, -0.5916079783099749, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869749, 0.0, 0.0, 4.3474130238568325, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646285, 0.0, 9.66091783079296, 0.6831300510639867, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.2403703492039373, 0.0, 0.0, 7.529940238806683, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244578, 2.449489742783181, 2.828427124746206, -1.0000000000000095, 9.165151389911685, 7.099295739719534, -0.41403933560541256, -2.049390153191928, -0.47809144373376167, 0.16903085094570522, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.1213203435596397, -0.40824829046386346, 3.1754264805429355, 0.0, 0.0, 7.171371656006364, 0.0, -1.380131118684709, -1.5614401167176546, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.80000000000001, -5.692099788303113, 4.381780460041349, -0.7745966692414907, 0.0, 10.998181667893988, 0.9621404708847333, 4.762352359916273, -0.7406560798180437, 0.1309307341415961, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119917, 2.7386127875258306, 1.5811388300841904, 2.4596747752497663, 0.0, 0.0, 9.258200997725515, 0.0, 5.345224838248491, -1.2094863136295253, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357735, 0.0, 0.0, 3.8340579025361397, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706658, 0.0, -3.162277660168412, -2.2360679774998027, 0.0, 0.0, 0.0, 13.747727084867515, 0.5345224838248532, 0.3779644730092276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999887, 0.0, 3.6514837167010707, -2.840187787218764, 0.0, 0.0, 0.0, 0.0, 12.344267996967348, 1.396594497510348, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048555, 0.0, 0.0, 6.640783086353614, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505551, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189435, 4.183300132670375, -0.5916079783099615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387008, 7.099295739719542, 0.0, 4.347413023856828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323076, 0.0, 3.864367132317193, -0.3415650255319911, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.080123449734629, 0.0, 7.099295739719546, 2.509980079602214, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299173, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724463, 2.4494897427831743, 2.828427124746207, -1.000000000000009, 1.309307341415954, 7.099295739719537, -0.4140393356054117, -2.049390153191927, -0.4780914437337623, 0.16903085094570483, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498075, 2.121320343559647, -0.40824829046386685, 3.1754264805429337, 9.071147352221455, 0.0, 7.171371656006362, 0.0, -1.3801311186847083, -1.5614401167176528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000009, 0.6324555320336753, 4.381780460041344, -0.7745966692414884, 0.0, 3.142337619398289, -0.10690449676496958, 4.76235235991627, -0.7406560798180428, 0.13093073414159664, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119886, 0.5477225575051662, 1.5811388300841966, 2.4596747752497654, 0.0, 9.071147352221454, 1.851640199545103, 0.0, 5.345224838248489, -1.209486313629527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135779, -6.260990336999449, 0.0, 3.8340579025361414, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.039230484541329, 0.0, 3.162277660168365, -0.447213595499961, 0.0, 0.0, 0.0, 5.891883036371791, -0.5345224838248448, 0.07559289460184586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.89999999999999, 0.0, 1.4605934866803583, 1.4200938936093819, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786952, -0.6982972487551772, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.260990336999394, 2.2135943621178726, 0.0, 0.0, 0.0, 0.0, 10.583005244258366, 2.993325909419166, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977288, 0.0, 0.0, -4.695742752749563, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110028, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 44:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, 0.0, 0.11293848786315637, -0.06388765649999399, 0.0, 0.0, 0.0, 0.0736485379546474, 0.026726124191242418, -0.023622779563076728, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06495190528383286, -0.06060915267313264, 0.026785714285714298 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336762, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321832, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955858, 0.0, 8.366600265340768, -1.18321595661993, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739498, 0.0, 0.0, 8.694826047713665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947011, -3.3935649046180636e-14, -3.346640106136308, -2.3664319132398495, 15.491933384829666, 0.0, 0.0, 0.6928203230275537, 0.5656854249492373, 0.39999999999999886, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.8989794855663495, 0.0, 0.0, 0.0, 14.198591479439074, -0.828078671210824, 1.2098624933629525e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0884716495130443e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 0.0, 0.0, 0.0, 14.342743312012727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000134, 0.0, 8.763560920082679, -1.549193338482974, 0.0, 0.0, 0.0, 9.524704719832533, -1.4813121596360834, 0.26186146828319146, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1176914536239795, 0.0, 3.162277660168379, 4.919349550499535, 0.0, 0.0, 0.0, 0.0, 10.690449676496982, -2.418972627259056, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5455844122715585, 0.0, 0.0, 7.66811580507228, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051666, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477958, 7.245688373094727, 4.1833001326703805, -0.5916079783099749, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869749, 0.0, 0.0, 4.3474130238568325, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646285, 0.0, 9.66091783079296, 0.6831300510639867, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.2403703492039373, 0.0, 0.0, 7.529940238806683, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244578, 2.449489742783181, 2.828427124746206, -1.0000000000000095, 9.165151389911685, 7.099295739719534, -0.41403933560541256, -2.049390153191928, -0.47809144373376167, 0.16903085094570522, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.1213203435596397, -0.40824829046386346, 3.1754264805429355, 0.0, 0.0, 7.171371656006364, 0.0, -1.380131118684709, -1.5614401167176546, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.80000000000001, -5.692099788303113, 4.381780460041349, -0.7745966692414907, 0.0, 10.998181667893988, 0.9621404708847333, 4.762352359916273, -0.7406560798180437, 0.1309307341415961, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119917, 2.7386127875258306, 1.5811388300841904, 2.4596747752497663, 0.0, 0.0, 9.258200997725515, 0.0, 5.345224838248491, -1.2094863136295253, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357735, 0.0, 0.0, 3.8340579025361397, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706658, 0.0, -3.162277660168412, -2.2360679774998027, 0.0, 0.0, 0.0, 13.747727084867515, 0.5345224838248532, 0.3779644730092276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999887, 0.0, 3.6514837167010707, -2.840187787218764, 0.0, 0.0, 0.0, 0.0, 12.344267996967348, 1.396594497510348, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048555, 0.0, 0.0, 6.640783086353614, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505551, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189435, 4.183300132670375, -0.5916079783099615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387008, 7.099295739719542, 0.0, 4.347413023856828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323076, 0.0, 3.864367132317193, -0.3415650255319911, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.080123449734629, 0.0, 7.099295739719546, 2.509980079602214, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299173, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724463, 2.4494897427831743, 2.828427124746207, -1.000000000000009, 1.309307341415954, 7.099295739719537, -0.4140393356054117, -2.049390153191927, -0.4780914437337623, 0.16903085094570483, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498075, 2.121320343559647, -0.40824829046386685, 3.1754264805429337, 9.071147352221455, 0.0, 7.171371656006362, 0.0, -1.3801311186847083, -1.5614401167176528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000009, 0.6324555320336753, 4.381780460041344, -0.7745966692414884, 0.0, 3.142337619398289, -0.10690449676496958, 4.76235235991627, -0.7406560798180428, 0.13093073414159664, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119886, 0.5477225575051662, 1.5811388300841966, 2.4596747752497654, 0.0, 9.071147352221454, 1.851640199545103, 0.0, 5.345224838248489, -1.209486313629527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135779, -6.260990336999449, 0.0, 3.8340579025361414, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.039230484541329, 0.0, 3.162277660168365, -0.447213595499961, 0.0, 0.0, 0.0, 5.891883036371791, -0.5345224838248448, 0.07559289460184586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.89999999999999, 0.0, 1.4605934866803583, 1.4200938936093819, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786952, -0.6982972487551772, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.260990336999394, 2.2135943621178726, 0.0, 0.0, 0.0, 0.0, 10.583005244258366, 2.993325909419166, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977288, 0.0, 0.0, -4.695742752749563, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110028, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 45:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, 0.0, -0.022587697572631307, 0.12777531299998807, 0.0, 0.0, 0.0, 0.0, 0.06681531047810609, 0.0472455591261534, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07576144084141581, -0.05357142857142859 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336762, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321832, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955858, 0.0, 8.366600265340768, -1.18321595661993, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739498, 0.0, 0.0, 8.694826047713665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947011, -3.3935649046180636e-14, -3.346640106136308, -2.3664319132398495, 15.491933384829666, 0.0, 0.0, 0.6928203230275537, 0.5656854249492373, 0.39999999999999886, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.8989794855663495, 0.0, 0.0, 0.0, 14.198591479439074, -0.828078671210824, 1.2098624933629525e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0884716495130443e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 0.0, 0.0, 0.0, 14.342743312012727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000134, 0.0, 8.763560920082679, -1.549193338482974, 0.0, 0.0, 0.0, 9.524704719832533, -1.4813121596360834, 0.26186146828319146, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1176914536239795, 0.0, 3.162277660168379, 4.919349550499535, 0.0, 0.0, 0.0, 0.0, 10.690449676496982, -2.418972627259056, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5455844122715585, 0.0, 0.0, 7.66811580507228, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051666, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477958, 7.245688373094727, 4.1833001326703805, -0.5916079783099749, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869749, 0.0, 0.0, 4.3474130238568325, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646285, 0.0, 9.66091783079296, 0.6831300510639867, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.2403703492039373, 0.0, 0.0, 7.529940238806683, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244578, 2.449489742783181, 2.828427124746206, -1.0000000000000095, 9.165151389911685, 7.099295739719534, -0.41403933560541256, -2.049390153191928, -0.47809144373376167, 0.16903085094570522, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.1213203435596397, -0.40824829046386346, 3.1754264805429355, 0.0, 0.0, 7.171371656006364, 0.0, -1.380131118684709, -1.5614401167176546, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.80000000000001, -5.692099788303113, 4.381780460041349, -0.7745966692414907, 0.0, 10.998181667893988, 0.9621404708847333, 4.762352359916273, -0.7406560798180437, 0.1309307341415961, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119917, 2.7386127875258306, 1.5811388300841904, 2.4596747752497663, 0.0, 0.0, 9.258200997725515, 0.0, 5.345224838248491, -1.2094863136295253, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357735, 0.0, 0.0, 3.8340579025361397, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706658, 0.0, -3.162277660168412, -2.2360679774998027, 0.0, 0.0, 0.0, 13.747727084867515, 0.5345224838248532, 0.3779644730092276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999887, 0.0, 3.6514837167010707, -2.840187787218764, 0.0, 0.0, 0.0, 0.0, 12.344267996967348, 1.396594497510348, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048555, 0.0, 0.0, 6.640783086353614, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505551, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189435, 4.183300132670375, -0.5916079783099615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387008, 7.099295739719542, 0.0, 4.347413023856828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323076, 0.0, 3.864367132317193, -0.3415650255319911, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.080123449734629, 0.0, 7.099295739719546, 2.509980079602214, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299173, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724463, 2.4494897427831743, 2.828427124746207, -1.000000000000009, 1.309307341415954, 7.099295739719537, -0.4140393356054117, -2.049390153191927, -0.4780914437337623, 0.16903085094570483, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498075, 2.121320343559647, -0.40824829046386685, 3.1754264805429337, 9.071147352221455, 0.0, 7.171371656006362, 0.0, -1.3801311186847083, -1.5614401167176528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000009, 0.6324555320336753, 4.381780460041344, -0.7745966692414884, 0.0, 3.142337619398289, -0.10690449676496958, 4.76235235991627, -0.7406560798180428, 0.13093073414159664, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119886, 0.5477225575051662, 1.5811388300841966, 2.4596747752497654, 0.0, 9.071147352221454, 1.851640199545103, 0.0, 5.345224838248489, -1.209486313629527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135779, -6.260990336999449, 0.0, 3.8340579025361414, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.039230484541329, 0.0, 3.162277660168365, -0.447213595499961, 0.0, 0.0, 0.0, 5.891883036371791, -0.5345224838248448, 0.07559289460184586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.89999999999999, 0.0, 1.4605934866803583, 1.4200938936093819, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786952, -0.6982972487551772, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.260990336999394, 2.2135943621178726, 0.0, 0.0, 0.0, 0.0, 10.583005244258366, 2.993325909419166, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977288, 0.0, 0.0, -4.695742752749563, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110028, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 46:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, 0.0978075995544939, -0.05646924393157821, -0.06388765649999403, 0.054894379103355, -0.04252100321353805, 0.02314550249431374, 0.02454951265154913, -0.013363062095621204, -0.023622779563076717, 0.0, 0.0, 0.04841229182759272, 0.0, -0.03749999999999999, -0.052489065916782374, 0.0, 0.02165063509461096, 0.030304576336566334, 0.026785714285714305 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336762, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321832, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955858, 0.0, 8.366600265340768, -1.18321595661993, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739498, 0.0, 0.0, 8.694826047713665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947011, -3.3935649046180636e-14, -3.346640106136308, -2.3664319132398495, 15.491933384829666, 0.0, 0.0, 0.6928203230275537, 0.5656854249492373, 0.39999999999999886, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.8989794855663495, 0.0, 0.0, 0.0, 14.198591479439074, -0.828078671210824, 1.2098624933629525e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0884716495130443e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 0.0, 0.0, 0.0, 14.342743312012727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000134, 0.0, 8.763560920082679, -1.549193338482974, 0.0, 0.0, 0.0, 9.524704719832533, -1.4813121596360834, 0.26186146828319146, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1176914536239795, 0.0, 3.162277660168379, 4.919349550499535, 0.0, 0.0, 0.0, 0.0, 10.690449676496982, -2.418972627259056, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5455844122715585, 0.0, 0.0, 7.66811580507228, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051666, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477958, 7.245688373094727, 4.1833001326703805, -0.5916079783099749, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869749, 0.0, 0.0, 4.3474130238568325, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646285, 0.0, 9.66091783079296, 0.6831300510639867, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.2403703492039373, 0.0, 0.0, 7.529940238806683, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244578, 2.449489742783181, 2.828427124746206, -1.0000000000000095, 9.165151389911685, 7.099295739719534, -0.41403933560541256, -2.049390153191928, -0.47809144373376167, 0.16903085094570522, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.1213203435596397, -0.40824829046386346, 3.1754264805429355, 0.0, 0.0, 7.171371656006364, 0.0, -1.380131118684709, -1.5614401167176546, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.80000000000001, -5.692099788303113, 4.381780460041349, -0.7745966692414907, 0.0, 10.998181667893988, 0.9621404708847333, 4.762352359916273, -0.7406560798180437, 0.1309307341415961, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119917, 2.7386127875258306, 1.5811388300841904, 2.4596747752497663, 0.0, 0.0, 9.258200997725515, 0.0, 5.345224838248491, -1.2094863136295253, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357735, 0.0, 0.0, 3.8340579025361397, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706658, 0.0, -3.162277660168412, -2.2360679774998027, 0.0, 0.0, 0.0, 13.747727084867515, 0.5345224838248532, 0.3779644730092276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999887, 0.0, 3.6514837167010707, -2.840187787218764, 0.0, 0.0, 0.0, 0.0, 12.344267996967348, 1.396594497510348, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048555, 0.0, 0.0, 6.640783086353614, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505551, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189435, 4.183300132670375, -0.5916079783099615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387008, 7.099295739719542, 0.0, 4.347413023856828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323076, 0.0, 3.864367132317193, -0.3415650255319911, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.080123449734629, 0.0, 7.099295739719546, 2.509980079602214, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299173, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724463, 2.4494897427831743, 2.828427124746207, -1.000000000000009, 1.309307341415954, 7.099295739719537, -0.4140393356054117, -2.049390153191927, -0.4780914437337623, 0.16903085094570483, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498075, 2.121320343559647, -0.40824829046386685, 3.1754264805429337, 9.071147352221455, 0.0, 7.171371656006362, 0.0, -1.3801311186847083, -1.5614401167176528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000009, 0.6324555320336753, 4.381780460041344, -0.7745966692414884, 0.0, 3.142337619398289, -0.10690449676496958, 4.76235235991627, -0.7406560798180428, 0.13093073414159664, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119886, 0.5477225575051662, 1.5811388300841966, 2.4596747752497654, 0.0, 9.071147352221454, 1.851640199545103, 0.0, 5.345224838248489, -1.209486313629527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135779, -6.260990336999449, 0.0, 3.8340579025361414, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.039230484541329, 0.0, 3.162277660168365, -0.447213595499961, 0.0, 0.0, 0.0, 5.891883036371791, -0.5345224838248448, 0.07559289460184586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.89999999999999, 0.0, 1.4605934866803583, 1.4200938936093819, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786952, -0.6982972487551772, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.260990336999394, 2.2135943621178726, 0.0, 0.0, 0.0, 0.0, 10.583005244258366, 2.993325909419166, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977288, 0.0, 0.0, -4.695742752749563, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110028, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 47:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, -0.019561519910898818, 0.011293848786315647, 0.12777531299998807, 0.0, 0.0, 0.05786375623578448, 0.0, -0.03340765523905306, 0.04724555912615341, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06561133239597798, 0.0, 0.0, -0.03788072042070791, -0.053571428571428596 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336762, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321832, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955858, 0.0, 8.366600265340768, -1.18321595661993, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739498, 0.0, 0.0, 8.694826047713665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947011, -3.3935649046180636e-14, -3.346640106136308, -2.3664319132398495, 15.491933384829666, 0.0, 0.0, 0.6928203230275537, 0.5656854249492373, 0.39999999999999886, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.8989794855663495, 0.0, 0.0, 0.0, 14.198591479439074, -0.828078671210824, 1.2098624933629525e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0884716495130443e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 0.0, 0.0, 0.0, 14.342743312012727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000134, 0.0, 8.763560920082679, -1.549193338482974, 0.0, 0.0, 0.0, 9.524704719832533, -1.4813121596360834, 0.26186146828319146, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1176914536239795, 0.0, 3.162277660168379, 4.919349550499535, 0.0, 0.0, 0.0, 0.0, 10.690449676496982, -2.418972627259056, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5455844122715585, 0.0, 0.0, 7.66811580507228, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051666, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477958, 7.245688373094727, 4.1833001326703805, -0.5916079783099749, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869749, 0.0, 0.0, 4.3474130238568325, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646285, 0.0, 9.66091783079296, 0.6831300510639867, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.2403703492039373, 0.0, 0.0, 7.529940238806683, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244578, 2.449489742783181, 2.828427124746206, -1.0000000000000095, 9.165151389911685, 7.099295739719534, -0.41403933560541256, -2.049390153191928, -0.47809144373376167, 0.16903085094570522, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.1213203435596397, -0.40824829046386346, 3.1754264805429355, 0.0, 0.0, 7.171371656006364, 0.0, -1.380131118684709, -1.5614401167176546, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.80000000000001, -5.692099788303113, 4.381780460041349, -0.7745966692414907, 0.0, 10.998181667893988, 0.9621404708847333, 4.762352359916273, -0.7406560798180437, 0.1309307341415961, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119917, 2.7386127875258306, 1.5811388300841904, 2.4596747752497663, 0.0, 0.0, 9.258200997725515, 0.0, 5.345224838248491, -1.2094863136295253, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357735, 0.0, 0.0, 3.8340579025361397, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706658, 0.0, -3.162277660168412, -2.2360679774998027, 0.0, 0.0, 0.0, 13.747727084867515, 0.5345224838248532, 0.3779644730092276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999887, 0.0, 3.6514837167010707, -2.840187787218764, 0.0, 0.0, 0.0, 0.0, 12.344267996967348, 1.396594497510348, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048555, 0.0, 0.0, 6.640783086353614, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505551, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189435, 4.183300132670375, -0.5916079783099615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387008, 7.099295739719542, 0.0, 4.347413023856828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323076, 0.0, 3.864367132317193, -0.3415650255319911, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.080123449734629, 0.0, 7.099295739719546, 2.509980079602214, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299173, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724463, 2.4494897427831743, 2.828427124746207, -1.000000000000009, 1.309307341415954, 7.099295739719537, -0.4140393356054117, -2.049390153191927, -0.4780914437337623, 0.16903085094570483, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498075, 2.121320343559647, -0.40824829046386685, 3.1754264805429337, 9.071147352221455, 0.0, 7.171371656006362, 0.0, -1.3801311186847083, -1.5614401167176528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000009, 0.6324555320336753, 4.381780460041344, -0.7745966692414884, 0.0, 3.142337619398289, -0.10690449676496958, 4.76235235991627, -0.7406560798180428, 0.13093073414159664, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119886, 0.5477225575051662, 1.5811388300841966, 2.4596747752497654, 0.0, 9.071147352221454, 1.851640199545103, 0.0, 5.345224838248489, -1.209486313629527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135779, -6.260990336999449, 0.0, 3.8340579025361414, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.039230484541329, 0.0, 3.162277660168365, -0.447213595499961, 0.0, 0.0, 0.0, 5.891883036371791, -0.5345224838248448, 0.07559289460184586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.89999999999999, 0.0, 1.4605934866803583, 1.4200938936093819, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786952, -0.6982972487551772, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.260990336999394, 2.2135943621178726, 0.0, 0.0, 0.0, 0.0, 10.583005244258366, 2.993325909419166, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977288, 0.0, 0.0, -4.695742752749563, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110028, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 48:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, 0.09780759955449396, -0.07905694150420949, -0.031943828249996996, 0.05489437910335498, 0.01417366773784601, -0.046291004988627586, -0.02454951265154915, 0.013363062095621228, 0.023622779563076703, 0.0, 0.04791574237499548, -0.006916041689656098, -0.0618589574131742, -0.016071428571428566, 0.008748177652797052, 0.04285714285714287, 0.015464739353293547, 0.0, -0.005357142857142856 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336762, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321832, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955858, 0.0, 8.366600265340768, -1.18321595661993, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739498, 0.0, 0.0, 8.694826047713665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947011, -3.3935649046180636e-14, -3.346640106136308, -2.3664319132398495, 15.491933384829666, 0.0, 0.0, 0.6928203230275537, 0.5656854249492373, 0.39999999999999886, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.8989794855663495, 0.0, 0.0, 0.0, 14.198591479439074, -0.828078671210824, 1.2098624933629525e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0884716495130443e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 0.0, 0.0, 0.0, 14.342743312012727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000134, 0.0, 8.763560920082679, -1.549193338482974, 0.0, 0.0, 0.0, 9.524704719832533, -1.4813121596360834, 0.26186146828319146, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1176914536239795, 0.0, 3.162277660168379, 4.919349550499535, 0.0, 0.0, 0.0, 0.0, 10.690449676496982, -2.418972627259056, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5455844122715585, 0.0, 0.0, 7.66811580507228, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051666, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477958, 7.245688373094727, 4.1833001326703805, -0.5916079783099749, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869749, 0.0, 0.0, 4.3474130238568325, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646285, 0.0, 9.66091783079296, 0.6831300510639867, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.2403703492039373, 0.0, 0.0, 7.529940238806683, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244578, 2.449489742783181, 2.828427124746206, -1.0000000000000095, 9.165151389911685, 7.099295739719534, -0.41403933560541256, -2.049390153191928, -0.47809144373376167, 0.16903085094570522, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.1213203435596397, -0.40824829046386346, 3.1754264805429355, 0.0, 0.0, 7.171371656006364, 0.0, -1.380131118684709, -1.5614401167176546, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.80000000000001, -5.692099788303113, 4.381780460041349, -0.7745966692414907, 0.0, 10.998181667893988, 0.9621404708847333, 4.762352359916273, -0.7406560798180437, 0.1309307341415961, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119917, 2.7386127875258306, 1.5811388300841904, 2.4596747752497663, 0.0, 0.0, 9.258200997725515, 0.0, 5.345224838248491, -1.2094863136295253, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357735, 0.0, 0.0, 3.8340579025361397, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706658, 0.0, -3.162277660168412, -2.2360679774998027, 0.0, 0.0, 0.0, 13.747727084867515, 0.5345224838248532, 0.3779644730092276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999887, 0.0, 3.6514837167010707, -2.840187787218764, 0.0, 0.0, 0.0, 0.0, 12.344267996967348, 1.396594497510348, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048555, 0.0, 0.0, 6.640783086353614, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505551, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189435, 4.183300132670375, -0.5916079783099615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387008, 7.099295739719542, 0.0, 4.347413023856828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323076, 0.0, 3.864367132317193, -0.3415650255319911, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.080123449734629, 0.0, 7.099295739719546, 2.509980079602214, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299173, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724463, 2.4494897427831743, 2.828427124746207, -1.000000000000009, 1.309307341415954, 7.099295739719537, -0.4140393356054117, -2.049390153191927, -0.4780914437337623, 0.16903085094570483, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498075, 2.121320343559647, -0.40824829046386685, 3.1754264805429337, 9.071147352221455, 0.0, 7.171371656006362, 0.0, -1.3801311186847083, -1.5614401167176528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000009, 0.6324555320336753, 4.381780460041344, -0.7745966692414884, 0.0, 3.142337619398289, -0.10690449676496958, 4.76235235991627, -0.7406560798180428, 0.13093073414159664, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119886, 0.5477225575051662, 1.5811388300841966, 2.4596747752497654, 0.0, 9.071147352221454, 1.851640199545103, 0.0, 5.345224838248489, -1.209486313629527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135779, -6.260990336999449, 0.0, 3.8340579025361414, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.039230484541329, 0.0, 3.162277660168365, -0.447213595499961, 0.0, 0.0, 0.0, 5.891883036371791, -0.5345224838248448, 0.07559289460184586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.89999999999999, 0.0, 1.4605934866803583, 1.4200938936093819, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786952, -0.6982972487551772, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.260990336999394, 2.2135943621178726, 0.0, 0.0, 0.0, 0.0, 10.583005244258366, 2.993325909419166, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977288, 0.0, 0.0, -4.695742752749563, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110028, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 49:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, -0.019561519910898842, 0.12423233664947204, -0.031943828249996996, 0.0, 0.05669467095138407, -0.011572751247156909, 0.024549512651549147, -0.046770717334674285, 0.023622779563076696, 0.0, 0.0, 0.0, 0.061858957413174195, -0.02142857142857144, 0.00437408882639853, -0.0642857142857143, 0.009278843611976128, 0.007576144084141588, -0.005357142857142859 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336762, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321832, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955858, 0.0, 8.366600265340768, -1.18321595661993, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739498, 0.0, 0.0, 8.694826047713665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947011, -3.3935649046180636e-14, -3.346640106136308, -2.3664319132398495, 15.491933384829666, 0.0, 0.0, 0.6928203230275537, 0.5656854249492373, 0.39999999999999886, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.8989794855663495, 0.0, 0.0, 0.0, 14.198591479439074, -0.828078671210824, 1.2098624933629525e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0884716495130443e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 0.0, 0.0, 0.0, 14.342743312012727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000134, 0.0, 8.763560920082679, -1.549193338482974, 0.0, 0.0, 0.0, 9.524704719832533, -1.4813121596360834, 0.26186146828319146, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1176914536239795, 0.0, 3.162277660168379, 4.919349550499535, 0.0, 0.0, 0.0, 0.0, 10.690449676496982, -2.418972627259056, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5455844122715585, 0.0, 0.0, 7.66811580507228, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051666, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477958, 7.245688373094727, 4.1833001326703805, -0.5916079783099749, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869749, 0.0, 0.0, 4.3474130238568325, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646285, 0.0, 9.66091783079296, 0.6831300510639867, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.2403703492039373, 0.0, 0.0, 7.529940238806683, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244578, 2.449489742783181, 2.828427124746206, -1.0000000000000095, 9.165151389911685, 7.099295739719534, -0.41403933560541256, -2.049390153191928, -0.47809144373376167, 0.16903085094570522, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.1213203435596397, -0.40824829046386346, 3.1754264805429355, 0.0, 0.0, 7.171371656006364, 0.0, -1.380131118684709, -1.5614401167176546, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.80000000000001, -5.692099788303113, 4.381780460041349, -0.7745966692414907, 0.0, 10.998181667893988, 0.9621404708847333, 4.762352359916273, -0.7406560798180437, 0.1309307341415961, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119917, 2.7386127875258306, 1.5811388300841904, 2.4596747752497663, 0.0, 0.0, 9.258200997725515, 0.0, 5.345224838248491, -1.2094863136295253, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357735, 0.0, 0.0, 3.8340579025361397, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706658, 0.0, -3.162277660168412, -2.2360679774998027, 0.0, 0.0, 0.0, 13.747727084867515, 0.5345224838248532, 0.3779644730092276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999887, 0.0, 3.6514837167010707, -2.840187787218764, 0.0, 0.0, 0.0, 0.0, 12.344267996967348, 1.396594497510348, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048555, 0.0, 0.0, 6.640783086353614, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505551, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189435, 4.183300132670375, -0.5916079783099615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387008, 7.099295739719542, 0.0, 4.347413023856828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323076, 0.0, 3.864367132317193, -0.3415650255319911, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.080123449734629, 0.0, 7.099295739719546, 2.509980079602214, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299173, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724463, 2.4494897427831743, 2.828427124746207, -1.000000000000009, 1.309307341415954, 7.099295739719537, -0.4140393356054117, -2.049390153191927, -0.4780914437337623, 0.16903085094570483, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498075, 2.121320343559647, -0.40824829046386685, 3.1754264805429337, 9.071147352221455, 0.0, 7.171371656006362, 0.0, -1.3801311186847083, -1.5614401167176528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000009, 0.6324555320336753, 4.381780460041344, -0.7745966692414884, 0.0, 3.142337619398289, -0.10690449676496958, 4.76235235991627, -0.7406560798180428, 0.13093073414159664, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119886, 0.5477225575051662, 1.5811388300841966, 2.4596747752497654, 0.0, 9.071147352221454, 1.851640199545103, 0.0, 5.345224838248489, -1.209486313629527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135779, -6.260990336999449, 0.0, 3.8340579025361414, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.039230484541329, 0.0, 3.162277660168365, -0.447213595499961, 0.0, 0.0, 0.0, 5.891883036371791, -0.5345224838248448, 0.07559289460184586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.89999999999999, 0.0, 1.4605934866803583, 1.4200938936093819, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786952, -0.6982972487551772, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.260990336999394, 2.2135943621178726, 0.0, 0.0, 0.0, 0.0, 10.583005244258366, 2.993325909419166, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977288, 0.0, 0.0, -4.695742752749563, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110028, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 50:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, -0.09780759955449397, -0.05646924393157825, -0.06388765649999402, 0.054894379103355005, 0.04252100321353805, -0.0231455024943138, 0.024549512651549157, -0.013363062095621242, -0.023622779563076693, 0.0, 0.0, 0.04841229182759272, 0.0, 0.03749999999999999, 0.05248906591678238, 0.0, 0.02165063509461097, 0.030304576336566337, 0.026785714285714288 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336762, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321832, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955858, 0.0, 8.366600265340768, -1.18321595661993, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739498, 0.0, 0.0, 8.694826047713665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947011, -3.3935649046180636e-14, -3.346640106136308, -2.3664319132398495, 15.491933384829666, 0.0, 0.0, 0.6928203230275537, 0.5656854249492373, 0.39999999999999886, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.8989794855663495, 0.0, 0.0, 0.0, 14.198591479439074, -0.828078671210824, 1.2098624933629525e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0884716495130443e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 0.0, 0.0, 0.0, 14.342743312012727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000134, 0.0, 8.763560920082679, -1.549193338482974, 0.0, 0.0, 0.0, 9.524704719832533, -1.4813121596360834, 0.26186146828319146, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1176914536239795, 0.0, 3.162277660168379, 4.919349550499535, 0.0, 0.0, 0.0, 0.0, 10.690449676496982, -2.418972627259056, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5455844122715585, 0.0, 0.0, 7.66811580507228, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051666, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477958, 7.245688373094727, 4.1833001326703805, -0.5916079783099749, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869749, 0.0, 0.0, 4.3474130238568325, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646285, 0.0, 9.66091783079296, 0.6831300510639867, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.2403703492039373, 0.0, 0.0, 7.529940238806683, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244578, 2.449489742783181, 2.828427124746206, -1.0000000000000095, 9.165151389911685, 7.099295739719534, -0.41403933560541256, -2.049390153191928, -0.47809144373376167, 0.16903085094570522, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.1213203435596397, -0.40824829046386346, 3.1754264805429355, 0.0, 0.0, 7.171371656006364, 0.0, -1.380131118684709, -1.5614401167176546, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.80000000000001, -5.692099788303113, 4.381780460041349, -0.7745966692414907, 0.0, 10.998181667893988, 0.9621404708847333, 4.762352359916273, -0.7406560798180437, 0.1309307341415961, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119917, 2.7386127875258306, 1.5811388300841904, 2.4596747752497663, 0.0, 0.0, 9.258200997725515, 0.0, 5.345224838248491, -1.2094863136295253, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357735, 0.0, 0.0, 3.8340579025361397, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706658, 0.0, -3.162277660168412, -2.2360679774998027, 0.0, 0.0, 0.0, 13.747727084867515, 0.5345224838248532, 0.3779644730092276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999887, 0.0, 3.6514837167010707, -2.840187787218764, 0.0, 0.0, 0.0, 0.0, 12.344267996967348, 1.396594497510348, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048555, 0.0, 0.0, 6.640783086353614, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505551, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189435, 4.183300132670375, -0.5916079783099615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387008, 7.099295739719542, 0.0, 4.347413023856828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323076, 0.0, 3.864367132317193, -0.3415650255319911, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.080123449734629, 0.0, 7.099295739719546, 2.509980079602214, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299173, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724463, 2.4494897427831743, 2.828427124746207, -1.000000000000009, 1.309307341415954, 7.099295739719537, -0.4140393356054117, -2.049390153191927, -0.4780914437337623, 0.16903085094570483, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498075, 2.121320343559647, -0.40824829046386685, 3.1754264805429337, 9.071147352221455, 0.0, 7.171371656006362, 0.0, -1.3801311186847083, -1.5614401167176528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000009, 0.6324555320336753, 4.381780460041344, -0.7745966692414884, 0.0, 3.142337619398289, -0.10690449676496958, 4.76235235991627, -0.7406560798180428, 0.13093073414159664, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119886, 0.5477225575051662, 1.5811388300841966, 2.4596747752497654, 0.0, 9.071147352221454, 1.851640199545103, 0.0, 5.345224838248489, -1.209486313629527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135779, -6.260990336999449, 0.0, 3.8340579025361414, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.039230484541329, 0.0, 3.162277660168365, -0.447213595499961, 0.0, 0.0, 0.0, 5.891883036371791, -0.5345224838248448, 0.07559289460184586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.89999999999999, 0.0, 1.4605934866803583, 1.4200938936093819, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786952, -0.6982972487551772, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.260990336999394, 2.2135943621178726, 0.0, 0.0, 0.0, 0.0, 10.583005244258366, 2.993325909419166, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977288, 0.0, 0.0, -4.695742752749563, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110028, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 51:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, 0.019561519910898825, 0.011293848786315641, 0.12777531299998804, 0.0, 0.0, -0.057863756235784464, 0.0, -0.03340765523905305, 0.047245559126153386, 0.0, 0.0, 0.0, 0.0, 0.0, -0.06561133239597798, 0.0, 0.0, -0.037880720420707906, -0.05357142857142858 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336762, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321832, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955858, 0.0, 8.366600265340768, -1.18321595661993, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739498, 0.0, 0.0, 8.694826047713665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947011, -3.3935649046180636e-14, -3.346640106136308, -2.3664319132398495, 15.491933384829666, 0.0, 0.0, 0.6928203230275537, 0.5656854249492373, 0.39999999999999886, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.8989794855663495, 0.0, 0.0, 0.0, 14.198591479439074, -0.828078671210824, 1.2098624933629525e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0884716495130443e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 0.0, 0.0, 0.0, 14.342743312012727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000134, 0.0, 8.763560920082679, -1.549193338482974, 0.0, 0.0, 0.0, 9.524704719832533, -1.4813121596360834, 0.26186146828319146, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1176914536239795, 0.0, 3.162277660168379, 4.919349550499535, 0.0, 0.0, 0.0, 0.0, 10.690449676496982, -2.418972627259056, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5455844122715585, 0.0, 0.0, 7.66811580507228, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051666, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477958, 7.245688373094727, 4.1833001326703805, -0.5916079783099749, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869749, 0.0, 0.0, 4.3474130238568325, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646285, 0.0, 9.66091783079296, 0.6831300510639867, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.2403703492039373, 0.0, 0.0, 7.529940238806683, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244578, 2.449489742783181, 2.828427124746206, -1.0000000000000095, 9.165151389911685, 7.099295739719534, -0.41403933560541256, -2.049390153191928, -0.47809144373376167, 0.16903085094570522, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.1213203435596397, -0.40824829046386346, 3.1754264805429355, 0.0, 0.0, 7.171371656006364, 0.0, -1.380131118684709, -1.5614401167176546, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.80000000000001, -5.692099788303113, 4.381780460041349, -0.7745966692414907, 0.0, 10.998181667893988, 0.9621404708847333, 4.762352359916273, -0.7406560798180437, 0.1309307341415961, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119917, 2.7386127875258306, 1.5811388300841904, 2.4596747752497663, 0.0, 0.0, 9.258200997725515, 0.0, 5.345224838248491, -1.2094863136295253, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357735, 0.0, 0.0, 3.8340579025361397, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706658, 0.0, -3.162277660168412, -2.2360679774998027, 0.0, 0.0, 0.0, 13.747727084867515, 0.5345224838248532, 0.3779644730092276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999887, 0.0, 3.6514837167010707, -2.840187787218764, 0.0, 0.0, 0.0, 0.0, 12.344267996967348, 1.396594497510348, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048555, 0.0, 0.0, 6.640783086353614, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505551, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189435, 4.183300132670375, -0.5916079783099615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387008, 7.099295739719542, 0.0, 4.347413023856828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323076, 0.0, 3.864367132317193, -0.3415650255319911, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.080123449734629, 0.0, 7.099295739719546, 2.509980079602214, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299173, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724463, 2.4494897427831743, 2.828427124746207, -1.000000000000009, 1.309307341415954, 7.099295739719537, -0.4140393356054117, -2.049390153191927, -0.4780914437337623, 0.16903085094570483, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498075, 2.121320343559647, -0.40824829046386685, 3.1754264805429337, 9.071147352221455, 0.0, 7.171371656006362, 0.0, -1.3801311186847083, -1.5614401167176528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000009, 0.6324555320336753, 4.381780460041344, -0.7745966692414884, 0.0, 3.142337619398289, -0.10690449676496958, 4.76235235991627, -0.7406560798180428, 0.13093073414159664, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119886, 0.5477225575051662, 1.5811388300841966, 2.4596747752497654, 0.0, 9.071147352221454, 1.851640199545103, 0.0, 5.345224838248489, -1.209486313629527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135779, -6.260990336999449, 0.0, 3.8340579025361414, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.039230484541329, 0.0, 3.162277660168365, -0.447213595499961, 0.0, 0.0, 0.0, 5.891883036371791, -0.5345224838248448, 0.07559289460184586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.89999999999999, 0.0, 1.4605934866803583, 1.4200938936093819, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786952, -0.6982972487551772, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.260990336999394, 2.2135943621178726, 0.0, 0.0, 0.0, 0.0, 10.583005244258366, 2.993325909419166, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977288, 0.0, 0.0, -4.695742752749563, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110028, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 52:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, -0.09780759955449392, -0.07905694150420953, -0.031943828249996975, 0.054894379103355005, -0.014173667737845985, 0.04629100498862756, -0.02454951265154914, 0.013363062095621214, 0.02362277956307672, 0.0, 0.04791574237499549, -0.006916041689656096, 0.0618589574131742, 0.016071428571428563, -0.008748177652797059, 0.04285714285714286, 0.015464739353293537, 0.0, -0.005357142857142868 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336762, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321832, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955858, 0.0, 8.366600265340768, -1.18321595661993, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739498, 0.0, 0.0, 8.694826047713665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947011, -3.3935649046180636e-14, -3.346640106136308, -2.3664319132398495, 15.491933384829666, 0.0, 0.0, 0.6928203230275537, 0.5656854249492373, 0.39999999999999886, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.8989794855663495, 0.0, 0.0, 0.0, 14.198591479439074, -0.828078671210824, 1.2098624933629525e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0884716495130443e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 0.0, 0.0, 0.0, 14.342743312012727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000134, 0.0, 8.763560920082679, -1.549193338482974, 0.0, 0.0, 0.0, 9.524704719832533, -1.4813121596360834, 0.26186146828319146, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1176914536239795, 0.0, 3.162277660168379, 4.919349550499535, 0.0, 0.0, 0.0, 0.0, 10.690449676496982, -2.418972627259056, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5455844122715585, 0.0, 0.0, 7.66811580507228, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051666, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477958, 7.245688373094727, 4.1833001326703805, -0.5916079783099749, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869749, 0.0, 0.0, 4.3474130238568325, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646285, 0.0, 9.66091783079296, 0.6831300510639867, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.2403703492039373, 0.0, 0.0, 7.529940238806683, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244578, 2.449489742783181, 2.828427124746206, -1.0000000000000095, 9.165151389911685, 7.099295739719534, -0.41403933560541256, -2.049390153191928, -0.47809144373376167, 0.16903085094570522, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.1213203435596397, -0.40824829046386346, 3.1754264805429355, 0.0, 0.0, 7.171371656006364, 0.0, -1.380131118684709, -1.5614401167176546, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.80000000000001, -5.692099788303113, 4.381780460041349, -0.7745966692414907, 0.0, 10.998181667893988, 0.9621404708847333, 4.762352359916273, -0.7406560798180437, 0.1309307341415961, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119917, 2.7386127875258306, 1.5811388300841904, 2.4596747752497663, 0.0, 0.0, 9.258200997725515, 0.0, 5.345224838248491, -1.2094863136295253, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357735, 0.0, 0.0, 3.8340579025361397, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706658, 0.0, -3.162277660168412, -2.2360679774998027, 0.0, 0.0, 0.0, 13.747727084867515, 0.5345224838248532, 0.3779644730092276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999887, 0.0, 3.6514837167010707, -2.840187787218764, 0.0, 0.0, 0.0, 0.0, 12.344267996967348, 1.396594497510348, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048555, 0.0, 0.0, 6.640783086353614, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505551, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189435, 4.183300132670375, -0.5916079783099615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387008, 7.099295739719542, 0.0, 4.347413023856828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323076, 0.0, 3.864367132317193, -0.3415650255319911, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.080123449734629, 0.0, 7.099295739719546, 2.509980079602214, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299173, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724463, 2.4494897427831743, 2.828427124746207, -1.000000000000009, 1.309307341415954, 7.099295739719537, -0.4140393356054117, -2.049390153191927, -0.4780914437337623, 0.16903085094570483, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498075, 2.121320343559647, -0.40824829046386685, 3.1754264805429337, 9.071147352221455, 0.0, 7.171371656006362, 0.0, -1.3801311186847083, -1.5614401167176528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000009, 0.6324555320336753, 4.381780460041344, -0.7745966692414884, 0.0, 3.142337619398289, -0.10690449676496958, 4.76235235991627, -0.7406560798180428, 0.13093073414159664, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119886, 0.5477225575051662, 1.5811388300841966, 2.4596747752497654, 0.0, 9.071147352221454, 1.851640199545103, 0.0, 5.345224838248489, -1.209486313629527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135779, -6.260990336999449, 0.0, 3.8340579025361414, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.039230484541329, 0.0, 3.162277660168365, -0.447213595499961, 0.0, 0.0, 0.0, 5.891883036371791, -0.5345224838248448, 0.07559289460184586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.89999999999999, 0.0, 1.4605934866803583, 1.4200938936093819, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786952, -0.6982972487551772, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.260990336999394, 2.2135943621178726, 0.0, 0.0, 0.0, 0.0, 10.583005244258366, 2.993325909419166, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977288, 0.0, 0.0, -4.695742752749563, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110028, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 53:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, 0.019561519910898776, 0.12423233664947204, -0.031943828249996996, 0.0, -0.0566946709513841, 0.0115727512471569, 0.024549512651549157, -0.04677071733467428, 0.023622779563076696, 0.0, 0.0, 0.0, -0.0618589574131742, 0.021428571428571446, -0.004374088826398529, -0.0642857142857143, 0.00927884361197614, 0.007576144084141581, -0.005357142857142856 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336762, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321832, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955858, 0.0, 8.366600265340768, -1.18321595661993, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739498, 0.0, 0.0, 8.694826047713665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947011, -3.3935649046180636e-14, -3.346640106136308, -2.3664319132398495, 15.491933384829666, 0.0, 0.0, 0.6928203230275537, 0.5656854249492373, 0.39999999999999886, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.8989794855663495, 0.0, 0.0, 0.0, 14.198591479439074, -0.828078671210824, 1.2098624933629525e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0884716495130443e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 0.0, 0.0, 0.0, 14.342743312012727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000134, 0.0, 8.763560920082679, -1.549193338482974, 0.0, 0.0, 0.0, 9.524704719832533, -1.4813121596360834, 0.26186146828319146, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1176914536239795, 0.0, 3.162277660168379, 4.919349550499535, 0.0, 0.0, 0.0, 0.0, 10.690449676496982, -2.418972627259056, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5455844122715585, 0.0, 0.0, 7.66811580507228, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051666, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477958, 7.245688373094727, 4.1833001326703805, -0.5916079783099749, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869749, 0.0, 0.0, 4.3474130238568325, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646285, 0.0, 9.66091783079296, 0.6831300510639867, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.2403703492039373, 0.0, 0.0, 7.529940238806683, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244578, 2.449489742783181, 2.828427124746206, -1.0000000000000095, 9.165151389911685, 7.099295739719534, -0.41403933560541256, -2.049390153191928, -0.47809144373376167, 0.16903085094570522, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.1213203435596397, -0.40824829046386346, 3.1754264805429355, 0.0, 0.0, 7.171371656006364, 0.0, -1.380131118684709, -1.5614401167176546, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.80000000000001, -5.692099788303113, 4.381780460041349, -0.7745966692414907, 0.0, 10.998181667893988, 0.9621404708847333, 4.762352359916273, -0.7406560798180437, 0.1309307341415961, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119917, 2.7386127875258306, 1.5811388300841904, 2.4596747752497663, 0.0, 0.0, 9.258200997725515, 0.0, 5.345224838248491, -1.2094863136295253, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357735, 0.0, 0.0, 3.8340579025361397, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706658, 0.0, -3.162277660168412, -2.2360679774998027, 0.0, 0.0, 0.0, 13.747727084867515, 0.5345224838248532, 0.3779644730092276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999887, 0.0, 3.6514837167010707, -2.840187787218764, 0.0, 0.0, 0.0, 0.0, 12.344267996967348, 1.396594497510348, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048555, 0.0, 0.0, 6.640783086353614, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505551, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189435, 4.183300132670375, -0.5916079783099615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387008, 7.099295739719542, 0.0, 4.347413023856828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323076, 0.0, 3.864367132317193, -0.3415650255319911, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.080123449734629, 0.0, 7.099295739719546, 2.509980079602214, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299173, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724463, 2.4494897427831743, 2.828427124746207, -1.000000000000009, 1.309307341415954, 7.099295739719537, -0.4140393356054117, -2.049390153191927, -0.4780914437337623, 0.16903085094570483, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498075, 2.121320343559647, -0.40824829046386685, 3.1754264805429337, 9.071147352221455, 0.0, 7.171371656006362, 0.0, -1.3801311186847083, -1.5614401167176528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000009, 0.6324555320336753, 4.381780460041344, -0.7745966692414884, 0.0, 3.142337619398289, -0.10690449676496958, 4.76235235991627, -0.7406560798180428, 0.13093073414159664, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119886, 0.5477225575051662, 1.5811388300841966, 2.4596747752497654, 0.0, 9.071147352221454, 1.851640199545103, 0.0, 5.345224838248489, -1.209486313629527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135779, -6.260990336999449, 0.0, 3.8340579025361414, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.039230484541329, 0.0, 3.162277660168365, -0.447213595499961, 0.0, 0.0, 0.0, 5.891883036371791, -0.5345224838248448, 0.07559289460184586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.89999999999999, 0.0, 1.4605934866803583, 1.4200938936093819, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786952, -0.6982972487551772, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.260990336999394, 2.2135943621178726, 0.0, 0.0, 0.0, 0.0, 10.583005244258366, 2.993325909419166, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977288, 0.0, 0.0, -4.695742752749563, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110028, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 54:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, -0.11736911946539277, -0.04517539514526254, -0.03194382824999702, -0.01829812636778497, 0.04252100321353806, 0.03471825374147069, 0.040915854419248575, 0.03340765523905304, 0.023622779563076717, 0.08504200642707613, 0.023957871187497745, 0.02074812506896832, -0.006185895741317411, -0.005357142857142858, -0.004374088826398521, -0.01071428571428572, -0.009278843611976124, -0.007576144084141591, -0.00535714285714286 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336762, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321832, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955858, 0.0, 8.366600265340768, -1.18321595661993, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739498, 0.0, 0.0, 8.694826047713665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947011, -3.3935649046180636e-14, -3.346640106136308, -2.3664319132398495, 15.491933384829666, 0.0, 0.0, 0.6928203230275537, 0.5656854249492373, 0.39999999999999886, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.8989794855663495, 0.0, 0.0, 0.0, 14.198591479439074, -0.828078671210824, 1.2098624933629525e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0884716495130443e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 0.0, 0.0, 0.0, 14.342743312012727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000134, 0.0, 8.763560920082679, -1.549193338482974, 0.0, 0.0, 0.0, 9.524704719832533, -1.4813121596360834, 0.26186146828319146, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1176914536239795, 0.0, 3.162277660168379, 4.919349550499535, 0.0, 0.0, 0.0, 0.0, 10.690449676496982, -2.418972627259056, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5455844122715585, 0.0, 0.0, 7.66811580507228, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051666, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477958, 7.245688373094727, 4.1833001326703805, -0.5916079783099749, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869749, 0.0, 0.0, 4.3474130238568325, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646285, 0.0, 9.66091783079296, 0.6831300510639867, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.2403703492039373, 0.0, 0.0, 7.529940238806683, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244578, 2.449489742783181, 2.828427124746206, -1.0000000000000095, 9.165151389911685, 7.099295739719534, -0.41403933560541256, -2.049390153191928, -0.47809144373376167, 0.16903085094570522, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.1213203435596397, -0.40824829046386346, 3.1754264805429355, 0.0, 0.0, 7.171371656006364, 0.0, -1.380131118684709, -1.5614401167176546, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.80000000000001, -5.692099788303113, 4.381780460041349, -0.7745966692414907, 0.0, 10.998181667893988, 0.9621404708847333, 4.762352359916273, -0.7406560798180437, 0.1309307341415961, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119917, 2.7386127875258306, 1.5811388300841904, 2.4596747752497663, 0.0, 0.0, 9.258200997725515, 0.0, 5.345224838248491, -1.2094863136295253, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357735, 0.0, 0.0, 3.8340579025361397, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706658, 0.0, -3.162277660168412, -2.2360679774998027, 0.0, 0.0, 0.0, 13.747727084867515, 0.5345224838248532, 0.3779644730092276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999887, 0.0, 3.6514837167010707, -2.840187787218764, 0.0, 0.0, 0.0, 0.0, 12.344267996967348, 1.396594497510348, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048555, 0.0, 0.0, 6.640783086353614, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505551, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189435, 4.183300132670375, -0.5916079783099615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387008, 7.099295739719542, 0.0, 4.347413023856828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323076, 0.0, 3.864367132317193, -0.3415650255319911, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.080123449734629, 0.0, 7.099295739719546, 2.509980079602214, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299173, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724463, 2.4494897427831743, 2.828427124746207, -1.000000000000009, 1.309307341415954, 7.099295739719537, -0.4140393356054117, -2.049390153191927, -0.4780914437337623, 0.16903085094570483, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498075, 2.121320343559647, -0.40824829046386685, 3.1754264805429337, 9.071147352221455, 0.0, 7.171371656006362, 0.0, -1.3801311186847083, -1.5614401167176528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000009, 0.6324555320336753, 4.381780460041344, -0.7745966692414884, 0.0, 3.142337619398289, -0.10690449676496958, 4.76235235991627, -0.7406560798180428, 0.13093073414159664, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119886, 0.5477225575051662, 1.5811388300841966, 2.4596747752497654, 0.0, 9.071147352221454, 1.851640199545103, 0.0, 5.345224838248489, -1.209486313629527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135779, -6.260990336999449, 0.0, 3.8340579025361414, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.039230484541329, 0.0, 3.162277660168365, -0.447213595499961, 0.0, 0.0, 0.0, 5.891883036371791, -0.5345224838248448, 0.07559289460184586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.89999999999999, 0.0, 1.4605934866803583, 1.4200938936093819, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786952, -0.6982972487551772, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.260990336999394, 2.2135943621178726, 0.0, 0.0, 0.0, 0.0, 10.583005244258366, 2.993325909419166, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977288, 0.0, 0.0, -4.695742752749563, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110028, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 55:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, 0.11736911946539276, -0.04517539514526255, -0.03194382824999698, -0.018298126367784988, -0.04252100321353805, -0.03471825374147069, 0.04091585441924858, 0.033407655239053057, 0.023622779563076693, -0.08504200642707613, 0.02395787118749776, 0.02074812506896831, 0.006185895741317411, 0.005357142857142859, 0.004374088826398524, -0.01071428571428572, -0.009278843611976131, -0.007576144084141586, -0.0053571428571428555 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336762, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321832, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955858, 0.0, 8.366600265340768, -1.18321595661993, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739498, 0.0, 0.0, 8.694826047713665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947011, -3.3935649046180636e-14, -3.346640106136308, -2.3664319132398495, 15.491933384829666, 0.0, 0.0, 0.6928203230275537, 0.5656854249492373, 0.39999999999999886, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.8989794855663495, 0.0, 0.0, 0.0, 14.198591479439074, -0.828078671210824, 1.2098624933629525e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0884716495130443e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 0.0, 0.0, 0.0, 14.342743312012727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000134, 0.0, 8.763560920082679, -1.549193338482974, 0.0, 0.0, 0.0, 9.524704719832533, -1.4813121596360834, 0.26186146828319146, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1176914536239795, 0.0, 3.162277660168379, 4.919349550499535, 0.0, 0.0, 0.0, 0.0, 10.690449676496982, -2.418972627259056, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5455844122715585, 0.0, 0.0, 7.66811580507228, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051666, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477958, 7.245688373094727, 4.1833001326703805, -0.5916079783099749, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869749, 0.0, 0.0, 4.3474130238568325, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646285, 0.0, 9.66091783079296, 0.6831300510639867, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.2403703492039373, 0.0, 0.0, 7.529940238806683, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244578, 2.449489742783181, 2.828427124746206, -1.0000000000000095, 9.165151389911685, 7.099295739719534, -0.41403933560541256, -2.049390153191928, -0.47809144373376167, 0.16903085094570522, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.1213203435596397, -0.40824829046386346, 3.1754264805429355, 0.0, 0.0, 7.171371656006364, 0.0, -1.380131118684709, -1.5614401167176546, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.80000000000001, -5.692099788303113, 4.381780460041349, -0.7745966692414907, 0.0, 10.998181667893988, 0.9621404708847333, 4.762352359916273, -0.7406560798180437, 0.1309307341415961, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119917, 2.7386127875258306, 1.5811388300841904, 2.4596747752497663, 0.0, 0.0, 9.258200997725515, 0.0, 5.345224838248491, -1.2094863136295253, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357735, 0.0, 0.0, 3.8340579025361397, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706658, 0.0, -3.162277660168412, -2.2360679774998027, 0.0, 0.0, 0.0, 13.747727084867515, 0.5345224838248532, 0.3779644730092276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999887, 0.0, 3.6514837167010707, -2.840187787218764, 0.0, 0.0, 0.0, 0.0, 12.344267996967348, 1.396594497510348, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048555, 0.0, 0.0, 6.640783086353614, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505551, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189435, 4.183300132670375, -0.5916079783099615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387008, 7.099295739719542, 0.0, 4.347413023856828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323076, 0.0, 3.864367132317193, -0.3415650255319911, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.080123449734629, 0.0, 7.099295739719546, 2.509980079602214, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299173, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724463, 2.4494897427831743, 2.828427124746207, -1.000000000000009, 1.309307341415954, 7.099295739719537, -0.4140393356054117, -2.049390153191927, -0.4780914437337623, 0.16903085094570483, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498075, 2.121320343559647, -0.40824829046386685, 3.1754264805429337, 9.071147352221455, 0.0, 7.171371656006362, 0.0, -1.3801311186847083, -1.5614401167176528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000009, 0.6324555320336753, 4.381780460041344, -0.7745966692414884, 0.0, 3.142337619398289, -0.10690449676496958, 4.76235235991627, -0.7406560798180428, 0.13093073414159664, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119886, 0.5477225575051662, 1.5811388300841966, 2.4596747752497654, 0.0, 9.071147352221454, 1.851640199545103, 0.0, 5.345224838248489, -1.209486313629527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135779, -6.260990336999449, 0.0, 3.8340579025361414, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.039230484541329, 0.0, 3.162277660168365, -0.447213595499961, 0.0, 0.0, 0.0, 5.891883036371791, -0.5345224838248448, 0.07559289460184586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.89999999999999, 0.0, 1.4605934866803583, 1.4200938936093819, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786952, -0.6982972487551772, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.260990336999394, 2.2135943621178726, 0.0, 0.0, 0.0, 0.0, 10.583005244258366, 2.993325909419166, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977288, 0.0, 0.0, -4.695742752749563, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110028, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 56:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.2598076211353317, 0.11736911946539266, 0.06776309271789384, 0.0479157423749955, 0.0, 0.0850420064270761, 0.06943650748294135, -0.07364853795464742, 0.04008918628686366, -0.09921567416492216, 0.0, 0.0, 0.0, 0.0, 0.07500000000000001, -0.026244532958391176, 0.0, -0.06495190528383289, -0.015152288168283167, 0.02678571428571429 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336762, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321832, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955858, 0.0, 8.366600265340768, -1.18321595661993, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739498, 0.0, 0.0, 8.694826047713665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947011, -3.3935649046180636e-14, -3.346640106136308, -2.3664319132398495, 15.491933384829666, 0.0, 0.0, 0.6928203230275537, 0.5656854249492373, 0.39999999999999886, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.8989794855663495, 0.0, 0.0, 0.0, 14.198591479439074, -0.828078671210824, 1.2098624933629525e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0884716495130443e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 0.0, 0.0, 0.0, 14.342743312012727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000134, 0.0, 8.763560920082679, -1.549193338482974, 0.0, 0.0, 0.0, 9.524704719832533, -1.4813121596360834, 0.26186146828319146, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1176914536239795, 0.0, 3.162277660168379, 4.919349550499535, 0.0, 0.0, 0.0, 0.0, 10.690449676496982, -2.418972627259056, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5455844122715585, 0.0, 0.0, 7.66811580507228, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051666, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477958, 7.245688373094727, 4.1833001326703805, -0.5916079783099749, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869749, 0.0, 0.0, 4.3474130238568325, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646285, 0.0, 9.66091783079296, 0.6831300510639867, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.2403703492039373, 0.0, 0.0, 7.529940238806683, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244578, 2.449489742783181, 2.828427124746206, -1.0000000000000095, 9.165151389911685, 7.099295739719534, -0.41403933560541256, -2.049390153191928, -0.47809144373376167, 0.16903085094570522, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.1213203435596397, -0.40824829046386346, 3.1754264805429355, 0.0, 0.0, 7.171371656006364, 0.0, -1.380131118684709, -1.5614401167176546, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.80000000000001, -5.692099788303113, 4.381780460041349, -0.7745966692414907, 0.0, 10.998181667893988, 0.9621404708847333, 4.762352359916273, -0.7406560798180437, 0.1309307341415961, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119917, 2.7386127875258306, 1.5811388300841904, 2.4596747752497663, 0.0, 0.0, 9.258200997725515, 0.0, 5.345224838248491, -1.2094863136295253, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357735, 0.0, 0.0, 3.8340579025361397, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706658, 0.0, -3.162277660168412, -2.2360679774998027, 0.0, 0.0, 0.0, 13.747727084867515, 0.5345224838248532, 0.3779644730092276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999887, 0.0, 3.6514837167010707, -2.840187787218764, 0.0, 0.0, 0.0, 0.0, 12.344267996967348, 1.396594497510348, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048555, 0.0, 0.0, 6.640783086353614, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505551, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189435, 4.183300132670375, -0.5916079783099615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387008, 7.099295739719542, 0.0, 4.347413023856828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323076, 0.0, 3.864367132317193, -0.3415650255319911, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.080123449734629, 0.0, 7.099295739719546, 2.509980079602214, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299173, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724463, 2.4494897427831743, 2.828427124746207, -1.000000000000009, 1.309307341415954, 7.099295739719537, -0.4140393356054117, -2.049390153191927, -0.4780914437337623, 0.16903085094570483, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498075, 2.121320343559647, -0.40824829046386685, 3.1754264805429337, 9.071147352221455, 0.0, 7.171371656006362, 0.0, -1.3801311186847083, -1.5614401167176528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000009, 0.6324555320336753, 4.381780460041344, -0.7745966692414884, 0.0, 3.142337619398289, -0.10690449676496958, 4.76235235991627, -0.7406560798180428, 0.13093073414159664, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119886, 0.5477225575051662, 1.5811388300841966, 2.4596747752497654, 0.0, 9.071147352221454, 1.851640199545103, 0.0, 5.345224838248489, -1.209486313629527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135779, -6.260990336999449, 0.0, 3.8340579025361414, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.039230484541329, 0.0, 3.162277660168365, -0.447213595499961, 0.0, 0.0, 0.0, 5.891883036371791, -0.5345224838248448, 0.07559289460184586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.89999999999999, 0.0, 1.4605934866803583, 1.4200938936093819, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786952, -0.6982972487551772, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.260990336999394, 2.2135943621178726, 0.0, 0.0, 0.0, 0.0, 10.583005244258366, 2.993325909419166, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977288, 0.0, 0.0, -4.695742752749563, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110028, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 57:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.2598076211353316, -0.11736911946539272, 0.0677630927178939, 0.047915742374995435, 0.0, -0.08504200642707613, -0.06943650748294138, -0.0736485379546474, 0.04008918628686368, -0.09921567416492216, 0.0, 0.0, 0.0, 0.0, -0.07500000000000001, 0.02624453295839119, 0.0, -0.06495190528383286, -0.015152288168283169, 0.02678571428571431 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336762, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321832, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955858, 0.0, 8.366600265340768, -1.18321595661993, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739498, 0.0, 0.0, 8.694826047713665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947011, -3.3935649046180636e-14, -3.346640106136308, -2.3664319132398495, 15.491933384829666, 0.0, 0.0, 0.6928203230275537, 0.5656854249492373, 0.39999999999999886, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.8989794855663495, 0.0, 0.0, 0.0, 14.198591479439074, -0.828078671210824, 1.2098624933629525e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0884716495130443e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 0.0, 0.0, 0.0, 14.342743312012727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000134, 0.0, 8.763560920082679, -1.549193338482974, 0.0, 0.0, 0.0, 9.524704719832533, -1.4813121596360834, 0.26186146828319146, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1176914536239795, 0.0, 3.162277660168379, 4.919349550499535, 0.0, 0.0, 0.0, 0.0, 10.690449676496982, -2.418972627259056, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5455844122715585, 0.0, 0.0, 7.66811580507228, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051666, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477958, 7.245688373094727, 4.1833001326703805, -0.5916079783099749, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869749, 0.0, 0.0, 4.3474130238568325, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646285, 0.0, 9.66091783079296, 0.6831300510639867, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.2403703492039373, 0.0, 0.0, 7.529940238806683, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244578, 2.449489742783181, 2.828427124746206, -1.0000000000000095, 9.165151389911685, 7.099295739719534, -0.41403933560541256, -2.049390153191928, -0.47809144373376167, 0.16903085094570522, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.1213203435596397, -0.40824829046386346, 3.1754264805429355, 0.0, 0.0, 7.171371656006364, 0.0, -1.380131118684709, -1.5614401167176546, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.80000000000001, -5.692099788303113, 4.381780460041349, -0.7745966692414907, 0.0, 10.998181667893988, 0.9621404708847333, 4.762352359916273, -0.7406560798180437, 0.1309307341415961, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119917, 2.7386127875258306, 1.5811388300841904, 2.4596747752497663, 0.0, 0.0, 9.258200997725515, 0.0, 5.345224838248491, -1.2094863136295253, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357735, 0.0, 0.0, 3.8340579025361397, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706658, 0.0, -3.162277660168412, -2.2360679774998027, 0.0, 0.0, 0.0, 13.747727084867515, 0.5345224838248532, 0.3779644730092276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999887, 0.0, 3.6514837167010707, -2.840187787218764, 0.0, 0.0, 0.0, 0.0, 12.344267996967348, 1.396594497510348, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048555, 0.0, 0.0, 6.640783086353614, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505551, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189435, 4.183300132670375, -0.5916079783099615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387008, 7.099295739719542, 0.0, 4.347413023856828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323076, 0.0, 3.864367132317193, -0.3415650255319911, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.080123449734629, 0.0, 7.099295739719546, 2.509980079602214, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299173, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724463, 2.4494897427831743, 2.828427124746207, -1.000000000000009, 1.309307341415954, 7.099295739719537, -0.4140393356054117, -2.049390153191927, -0.4780914437337623, 0.16903085094570483, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498075, 2.121320343559647, -0.40824829046386685, 3.1754264805429337, 9.071147352221455, 0.0, 7.171371656006362, 0.0, -1.3801311186847083, -1.5614401167176528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000009, 0.6324555320336753, 4.381780460041344, -0.7745966692414884, 0.0, 3.142337619398289, -0.10690449676496958, 4.76235235991627, -0.7406560798180428, 0.13093073414159664, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119886, 0.5477225575051662, 1.5811388300841966, 2.4596747752497654, 0.0, 9.071147352221454, 1.851640199545103, 0.0, 5.345224838248489, -1.209486313629527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135779, -6.260990336999449, 0.0, 3.8340579025361414, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.039230484541329, 0.0, 3.162277660168365, -0.447213595499961, 0.0, 0.0, 0.0, 5.891883036371791, -0.5345224838248448, 0.07559289460184586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.89999999999999, 0.0, 1.4605934866803583, 1.4200938936093819, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786952, -0.6982972487551772, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.260990336999394, 2.2135943621178726, 0.0, 0.0, 0.0, 0.0, 10.583005244258366, 2.993325909419166, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977288, 0.0, 0.0, -4.695742752749563, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110028, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 58:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.2598076211353315, 0.0, -0.1355261854357876, 0.04791574237499552, -0.10978875820671, 0.0, 0.0, 0.024549512651549112, -0.08017837257372729, -0.09921567416492215, 0.0, 0.0, -0.09682458365518544, 0.0, 0.0, 0.0, 0.0, 0.02165063509461095, 0.03030457633656631, 0.026785714285714277 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336762, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321832, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955858, 0.0, 8.366600265340768, -1.18321595661993, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739498, 0.0, 0.0, 8.694826047713665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947011, -3.3935649046180636e-14, -3.346640106136308, -2.3664319132398495, 15.491933384829666, 0.0, 0.0, 0.6928203230275537, 0.5656854249492373, 0.39999999999999886, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.8989794855663495, 0.0, 0.0, 0.0, 14.198591479439074, -0.828078671210824, 1.2098624933629525e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0884716495130443e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 0.0, 0.0, 0.0, 14.342743312012727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000134, 0.0, 8.763560920082679, -1.549193338482974, 0.0, 0.0, 0.0, 9.524704719832533, -1.4813121596360834, 0.26186146828319146, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1176914536239795, 0.0, 3.162277660168379, 4.919349550499535, 0.0, 0.0, 0.0, 0.0, 10.690449676496982, -2.418972627259056, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5455844122715585, 0.0, 0.0, 7.66811580507228, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051666, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477958, 7.245688373094727, 4.1833001326703805, -0.5916079783099749, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869749, 0.0, 0.0, 4.3474130238568325, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646285, 0.0, 9.66091783079296, 0.6831300510639867, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.2403703492039373, 0.0, 0.0, 7.529940238806683, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244578, 2.449489742783181, 2.828427124746206, -1.0000000000000095, 9.165151389911685, 7.099295739719534, -0.41403933560541256, -2.049390153191928, -0.47809144373376167, 0.16903085094570522, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.1213203435596397, -0.40824829046386346, 3.1754264805429355, 0.0, 0.0, 7.171371656006364, 0.0, -1.380131118684709, -1.5614401167176546, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.80000000000001, -5.692099788303113, 4.381780460041349, -0.7745966692414907, 0.0, 10.998181667893988, 0.9621404708847333, 4.762352359916273, -0.7406560798180437, 0.1309307341415961, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119917, 2.7386127875258306, 1.5811388300841904, 2.4596747752497663, 0.0, 0.0, 9.258200997725515, 0.0, 5.345224838248491, -1.2094863136295253, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357735, 0.0, 0.0, 3.8340579025361397, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706658, 0.0, -3.162277660168412, -2.2360679774998027, 0.0, 0.0, 0.0, 13.747727084867515, 0.5345224838248532, 0.3779644730092276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999887, 0.0, 3.6514837167010707, -2.840187787218764, 0.0, 0.0, 0.0, 0.0, 12.344267996967348, 1.396594497510348, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048555, 0.0, 0.0, 6.640783086353614, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505551, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189435, 4.183300132670375, -0.5916079783099615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387008, 7.099295739719542, 0.0, 4.347413023856828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323076, 0.0, 3.864367132317193, -0.3415650255319911, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.080123449734629, 0.0, 7.099295739719546, 2.509980079602214, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299173, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724463, 2.4494897427831743, 2.828427124746207, -1.000000000000009, 1.309307341415954, 7.099295739719537, -0.4140393356054117, -2.049390153191927, -0.4780914437337623, 0.16903085094570483, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498075, 2.121320343559647, -0.40824829046386685, 3.1754264805429337, 9.071147352221455, 0.0, 7.171371656006362, 0.0, -1.3801311186847083, -1.5614401167176528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000009, 0.6324555320336753, 4.381780460041344, -0.7745966692414884, 0.0, 3.142337619398289, -0.10690449676496958, 4.76235235991627, -0.7406560798180428, 0.13093073414159664, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119886, 0.5477225575051662, 1.5811388300841966, 2.4596747752497654, 0.0, 9.071147352221454, 1.851640199545103, 0.0, 5.345224838248489, -1.209486313629527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135779, -6.260990336999449, 0.0, 3.8340579025361414, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.039230484541329, 0.0, 3.162277660168365, -0.447213595499961, 0.0, 0.0, 0.0, 5.891883036371791, -0.5345224838248448, 0.07559289460184586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.89999999999999, 0.0, 1.4605934866803583, 1.4200938936093819, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786952, -0.6982972487551772, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.260990336999394, 2.2135943621178726, 0.0, 0.0, 0.0, 0.0, 10.583005244258366, 2.993325909419166, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977288, 0.0, 0.0, -4.695742752749563, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110028, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 59:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.2598076211353317, 0.0, 0.0, -0.14374722712498647, -0.10978875820671001, 0.0, 0.0, -0.12274756325774572, 0.0, 0.042521003213538064, 0.0, -0.095831484749991, 0.013832083379312196, 0.0, 0.0, 0.0, 0.042857142857142864, 0.015464739353293549, 0.0, -0.005357142857142852 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336762, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321832, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955858, 0.0, 8.366600265340768, -1.18321595661993, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739498, 0.0, 0.0, 8.694826047713665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947011, -3.3935649046180636e-14, -3.346640106136308, -2.3664319132398495, 15.491933384829666, 0.0, 0.0, 0.6928203230275537, 0.5656854249492373, 0.39999999999999886, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.8989794855663495, 0.0, 0.0, 0.0, 14.198591479439074, -0.828078671210824, 1.2098624933629525e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0884716495130443e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 0.0, 0.0, 0.0, 14.342743312012727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000134, 0.0, 8.763560920082679, -1.549193338482974, 0.0, 0.0, 0.0, 9.524704719832533, -1.4813121596360834, 0.26186146828319146, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1176914536239795, 0.0, 3.162277660168379, 4.919349550499535, 0.0, 0.0, 0.0, 0.0, 10.690449676496982, -2.418972627259056, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5455844122715585, 0.0, 0.0, 7.66811580507228, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051666, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477958, 7.245688373094727, 4.1833001326703805, -0.5916079783099749, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869749, 0.0, 0.0, 4.3474130238568325, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646285, 0.0, 9.66091783079296, 0.6831300510639867, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.2403703492039373, 0.0, 0.0, 7.529940238806683, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244578, 2.449489742783181, 2.828427124746206, -1.0000000000000095, 9.165151389911685, 7.099295739719534, -0.41403933560541256, -2.049390153191928, -0.47809144373376167, 0.16903085094570522, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.1213203435596397, -0.40824829046386346, 3.1754264805429355, 0.0, 0.0, 7.171371656006364, 0.0, -1.380131118684709, -1.5614401167176546, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.80000000000001, -5.692099788303113, 4.381780460041349, -0.7745966692414907, 0.0, 10.998181667893988, 0.9621404708847333, 4.762352359916273, -0.7406560798180437, 0.1309307341415961, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119917, 2.7386127875258306, 1.5811388300841904, 2.4596747752497663, 0.0, 0.0, 9.258200997725515, 0.0, 5.345224838248491, -1.2094863136295253, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357735, 0.0, 0.0, 3.8340579025361397, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706658, 0.0, -3.162277660168412, -2.2360679774998027, 0.0, 0.0, 0.0, 13.747727084867515, 0.5345224838248532, 0.3779644730092276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999887, 0.0, 3.6514837167010707, -2.840187787218764, 0.0, 0.0, 0.0, 0.0, 12.344267996967348, 1.396594497510348, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048555, 0.0, 0.0, 6.640783086353614, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505551, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498107, 5.612486080160916, -1.0801234497346464, -0.7637626158259768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189435, 4.183300132670375, -0.5916079783099615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387008, 7.099295739719542, 0.0, 4.347413023856828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323076, 0.0, 3.864367132317193, -0.3415650255319911, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.080123449734629, 0.0, 7.099295739719546, 2.509980079602214, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299173, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734765, 5.796550698475763, -1.6733200530681367, -1.183215956619913, 7.7459666924148385, -1.1999999999999997, -0.9797958971132692, 0.3464101615137743, 0.2828427124746159, 0.19999999999999896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724463, 2.4494897427831743, 2.828427124746207, -1.000000000000009, 1.309307341415954, 7.099295739719537, -0.4140393356054117, -2.049390153191927, -0.4780914437337623, 0.16903085094570483, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498075, 2.121320343559647, -0.40824829046386685, 3.1754264805429337, 9.071147352221455, 0.0, 7.171371656006362, 0.0, -1.3801311186847083, -1.5614401167176528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000009, 0.6324555320336753, 4.381780460041344, -0.7745966692414884, 0.0, 3.142337619398289, -0.10690449676496958, 4.76235235991627, -0.7406560798180428, 0.13093073414159664, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119886, 0.5477225575051662, 1.5811388300841966, 2.4596747752497654, 0.0, 9.071147352221454, 1.851640199545103, 0.0, 5.345224838248489, -1.209486313629527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135779, -6.260990336999449, 0.0, 3.8340579025361414, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.039230484541329, 0.0, 3.162277660168365, -0.447213595499961, 0.0, 0.0, 0.0, 5.891883036371791, -0.5345224838248448, 0.07559289460184586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.89999999999999, 0.0, 1.4605934866803583, 1.4200938936093819, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786952, -0.6982972487551772, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.260990336999394, 2.2135943621178726, 0.0, 0.0, 0.0, 0.0, 10.583005244258366, 2.993325909419166, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977288, 0.0, 0.0, -4.695742752749563, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110028, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    }
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
        return;
    }
    unsigned int num_derivatives = std::pow(3, n);
    // Set values equal to zero.
    std::fill_n(values, 3 * num_derivatives * 60, 0.0);
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 3)
        return;
    // Helper variable to hold values of a single dof.
    double dof_values[81] = {};
    // Loop dofs and call evaluate_basis_derivatives.
    for (std::size_t r = 0; r < 60; ++r)
    {
        evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < 3 * num_derivatives; ++s)
            values[3 * num_derivatives * r + s] = dof_values[s];
    }
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[3];
    // Declare variable for physical coordinates
    double y[3];
    switch (i)
    {
    case 0:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            y[2] = coordinate_dofs[2];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 1:
        {
            y[0] = coordinate_dofs[3];
            y[1] = coordinate_dofs[4];
            y[2] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 2:
        {
            y[0] = coordinate_dofs[6];
            y[1] = coordinate_dofs[7];
            y[2] = coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 3:
        {
            y[0] = coordinate_dofs[9];
            y[1] = coordinate_dofs[10];
            y[2] = coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 4:
        {
            y[0] = -5.551115123125783e-17 * coordinate_dofs[0] + 0.6666666666666667 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
            y[1] = -5.551115123125783e-17 * coordinate_dofs[1] + 0.6666666666666667 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
            y[2] = -5.551115123125783e-17 * coordinate_dofs[2] + 0.6666666666666667 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 5:
        {
            y[0] = 0.33333333333333337 * coordinate_dofs[6] + 0.6666666666666666 * coordinate_dofs[9];
            y[1] = 0.33333333333333337 * coordinate_dofs[7] + 0.6666666666666666 * coordinate_dofs[10];
            y[2] = 0.33333333333333337 * coordinate_dofs[8] + 0.6666666666666666 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 6:
        {
            y[0] = -5.551115123125783e-17 * coordinate_dofs[0] + 0.6666666666666667 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[9];
            y[1] = -5.551115123125783e-17 * coordinate_dofs[1] + 0.6666666666666667 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[10];
            y[2] = -5.551115123125783e-17 * coordinate_dofs[2] + 0.6666666666666667 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 7:
        {
            y[0] = 0.33333333333333337 * coordinate_dofs[3] + 0.6666666666666666 * coordinate_dofs[9];
            y[1] = 0.33333333333333337 * coordinate_dofs[4] + 0.6666666666666666 * coordinate_dofs[10];
            y[2] = 0.33333333333333337 * coordinate_dofs[5] + 0.6666666666666666 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 8:
        {
            y[0] = -5.551115123125783e-17 * coordinate_dofs[0] + 0.6666666666666667 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6];
            y[1] = -5.551115123125783e-17 * coordinate_dofs[1] + 0.6666666666666667 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7];
            y[2] = -5.551115123125783e-17 * coordinate_dofs[2] + 0.6666666666666667 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 9:
        {
            y[0] = 0.33333333333333337 * coordinate_dofs[3] + 0.6666666666666666 * coordinate_dofs[6];
            y[1] = 0.33333333333333337 * coordinate_dofs[4] + 0.6666666666666666 * coordinate_dofs[7];
            y[2] = 0.33333333333333337 * coordinate_dofs[5] + 0.6666666666666666 * coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 10:
        {
            y[0] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[9];
            y[1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[10];
            y[2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 11:
        {
            y[0] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[9];
            y[1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[10];
            y[2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 12:
        {
            y[0] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[6];
            y[1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[7];
            y[2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 13:
        {
            y[0] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[6];
            y[1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[7];
            y[2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 14:
        {
            y[0] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3];
            y[1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4];
            y[2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 15:
        {
            y[0] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[3];
            y[1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[4];
            y[2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 16:
        {
            y[0] = 0.33333333333333337 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
            y[1] = 0.33333333333333337 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
            y[2] = 0.33333333333333337 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 17:
        {
            y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
            y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
            y[2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 18:
        {
            y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[9];
            y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[10];
            y[2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 19:
        {
            y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6];
            y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7];
            y[2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 20:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            y[2] = coordinate_dofs[2];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 21:
        {
            y[0] = coordinate_dofs[3];
            y[1] = coordinate_dofs[4];
            y[2] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 22:
        {
            y[0] = coordinate_dofs[6];
            y[1] = coordinate_dofs[7];
            y[2] = coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 23:
        {
            y[0] = coordinate_dofs[9];
            y[1] = coordinate_dofs[10];
            y[2] = coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 24:
        {
            y[0] = -5.551115123125783e-17 * coordinate_dofs[0] + 0.6666666666666667 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
            y[1] = -5.551115123125783e-17 * coordinate_dofs[1] + 0.6666666666666667 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
            y[2] = -5.551115123125783e-17 * coordinate_dofs[2] + 0.6666666666666667 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 25:
        {
            y[0] = 0.33333333333333337 * coordinate_dofs[6] + 0.6666666666666666 * coordinate_dofs[9];
            y[1] = 0.33333333333333337 * coordinate_dofs[7] + 0.6666666666666666 * coordinate_dofs[10];
            y[2] = 0.33333333333333337 * coordinate_dofs[8] + 0.6666666666666666 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 26:
        {
            y[0] = -5.551115123125783e-17 * coordinate_dofs[0] + 0.6666666666666667 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[9];
            y[1] = -5.551115123125783e-17 * coordinate_dofs[1] + 0.6666666666666667 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[10];
            y[2] = -5.551115123125783e-17 * coordinate_dofs[2] + 0.6666666666666667 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 27:
        {
            y[0] = 0.33333333333333337 * coordinate_dofs[3] + 0.6666666666666666 * coordinate_dofs[9];
            y[1] = 0.33333333333333337 * coordinate_dofs[4] + 0.6666666666666666 * coordinate_dofs[10];
            y[2] = 0.33333333333333337 * coordinate_dofs[5] + 0.6666666666666666 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 28:
        {
            y[0] = -5.551115123125783e-17 * coordinate_dofs[0] + 0.6666666666666667 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6];
            y[1] = -5.551115123125783e-17 * coordinate_dofs[1] + 0.6666666666666667 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7];
            y[2] = -5.551115123125783e-17 * coordinate_dofs[2] + 0.6666666666666667 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 29:
        {
            y[0] = 0.33333333333333337 * coordinate_dofs[3] + 0.6666666666666666 * coordinate_dofs[6];
            y[1] = 0.33333333333333337 * coordinate_dofs[4] + 0.6666666666666666 * coordinate_dofs[7];
            y[2] = 0.33333333333333337 * coordinate_dofs[5] + 0.6666666666666666 * coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 30:
        {
            y[0] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[9];
            y[1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[10];
            y[2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 31:
        {
            y[0] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[9];
            y[1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[10];
            y[2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 32:
        {
            y[0] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[6];
            y[1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[7];
            y[2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 33:
        {
            y[0] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[6];
            y[1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[7];
            y[2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 34:
        {
            y[0] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3];
            y[1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4];
            y[2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 35:
        {
            y[0] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[3];
            y[1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[4];
            y[2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 36:
        {
            y[0] = 0.33333333333333337 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
            y[1] = 0.33333333333333337 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
            y[2] = 0.33333333333333337 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 37:
        {
            y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
            y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
            y[2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 38:
        {
            y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[9];
            y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[10];
            y[2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 39:
        {
            y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6];
            y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7];
            y[2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 40:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            y[2] = coordinate_dofs[2];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 41:
        {
            y[0] = coordinate_dofs[3];
            y[1] = coordinate_dofs[4];
            y[2] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 42:
        {
            y[0] = coordinate_dofs[6];
            y[1] = coordinate_dofs[7];
            y[2] = coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 43:
        {
            y[0] = coordinate_dofs[9];
            y[1] = coordinate_dofs[10];
            y[2] = coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 44:
        {
            y[0] = -5.551115123125783e-17 * coordinate_dofs[0] + 0.6666666666666667 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
            y[1] = -5.551115123125783e-17 * coordinate_dofs[1] + 0.6666666666666667 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
            y[2] = -5.551115123125783e-17 * coordinate_dofs[2] + 0.6666666666666667 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 45:
        {
            y[0] = 0.33333333333333337 * coordinate_dofs[6] + 0.6666666666666666 * coordinate_dofs[9];
            y[1] = 0.33333333333333337 * coordinate_dofs[7] + 0.6666666666666666 * coordinate_dofs[10];
            y[2] = 0.33333333333333337 * coordinate_dofs[8] + 0.6666666666666666 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 46:
        {
            y[0] = -5.551115123125783e-17 * coordinate_dofs[0] + 0.6666666666666667 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[9];
            y[1] = -5.551115123125783e-17 * coordinate_dofs[1] + 0.6666666666666667 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[10];
            y[2] = -5.551115123125783e-17 * coordinate_dofs[2] + 0.6666666666666667 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 47:
        {
            y[0] = 0.33333333333333337 * coordinate_dofs[3] + 0.6666666666666666 * coordinate_dofs[9];
            y[1] = 0.33333333333333337 * coordinate_dofs[4] + 0.6666666666666666 * coordinate_dofs[10];
            y[2] = 0.33333333333333337 * coordinate_dofs[5] + 0.6666666666666666 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 48:
        {
            y[0] = -5.551115123125783e-17 * coordinate_dofs[0] + 0.6666666666666667 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6];
            y[1] = -5.551115123125783e-17 * coordinate_dofs[1] + 0.6666666666666667 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7];
            y[2] = -5.551115123125783e-17 * coordinate_dofs[2] + 0.6666666666666667 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 49:
        {
            y[0] = 0.33333333333333337 * coordinate_dofs[3] + 0.6666666666666666 * coordinate_dofs[6];
            y[1] = 0.33333333333333337 * coordinate_dofs[4] + 0.6666666666666666 * coordinate_dofs[7];
            y[2] = 0.33333333333333337 * coordinate_dofs[5] + 0.6666666666666666 * coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 50:
        {
            y[0] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[9];
            y[1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[10];
            y[2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 51:
        {
            y[0] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[9];
            y[1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[10];
            y[2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 52:
        {
            y[0] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[6];
            y[1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[7];
            y[2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 53:
        {
            y[0] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[6];
            y[1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[7];
            y[2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 54:
        {
            y[0] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3];
            y[1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4];
            y[2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 55:
        {
            y[0] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[3];
            y[1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[4];
            y[2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 56:
        {
            y[0] = 0.33333333333333337 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
            y[1] = 0.33333333333333337 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
            y[2] = 0.33333333333333337 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 57:
        {
            y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
            y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
            y[2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 58:
        {
            y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[9];
            y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[10];
            y[2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 59:
        {
            y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6];
            y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7];
            y[2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[3];
    // Declare variable for physical coordinates
    double y[3];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = -5.551115123125783e-17 * coordinate_dofs[0] + 0.6666666666666667 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
    y[1] = -5.551115123125783e-17 * coordinate_dofs[1] + 0.6666666666666667 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
    y[2] = -5.551115123125783e-17 * coordinate_dofs[2] + 0.6666666666666667 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = 0.33333333333333337 * coordinate_dofs[6] + 0.6666666666666666 * coordinate_dofs[9];
    y[1] = 0.33333333333333337 * coordinate_dofs[7] + 0.6666666666666666 * coordinate_dofs[10];
    y[2] = 0.33333333333333337 * coordinate_dofs[8] + 0.6666666666666666 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
    y[0] = -5.551115123125783e-17 * coordinate_dofs[0] + 0.6666666666666667 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[9];
    y[1] = -5.551115123125783e-17 * coordinate_dofs[1] + 0.6666666666666667 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[10];
    y[2] = -5.551115123125783e-17 * coordinate_dofs[2] + 0.6666666666666667 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[6] = vals[0];
    y[0] = 0.33333333333333337 * coordinate_dofs[3] + 0.6666666666666666 * coordinate_dofs[9];
    y[1] = 0.33333333333333337 * coordinate_dofs[4] + 0.6666666666666666 * coordinate_dofs[10];
    y[2] = 0.33333333333333337 * coordinate_dofs[5] + 0.6666666666666666 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[7] = vals[0];
    y[0] = -5.551115123125783e-17 * coordinate_dofs[0] + 0.6666666666666667 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6];
    y[1] = -5.551115123125783e-17 * coordinate_dofs[1] + 0.6666666666666667 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7];
    y[2] = -5.551115123125783e-17 * coordinate_dofs[2] + 0.6666666666666667 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[8] = vals[0];
    y[0] = 0.33333333333333337 * coordinate_dofs[3] + 0.6666666666666666 * coordinate_dofs[6];
    y[1] = 0.33333333333333337 * coordinate_dofs[4] + 0.6666666666666666 * coordinate_dofs[7];
    y[2] = 0.33333333333333337 * coordinate_dofs[5] + 0.6666666666666666 * coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[9] = vals[0];
    y[0] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[9];
    y[1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[10];
    y[2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[10] = vals[0];
    y[0] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[9];
    y[1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[10];
    y[2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[11] = vals[0];
    y[0] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[6];
    y[1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[7];
    y[2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[12] = vals[0];
    y[0] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[6];
    y[1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[7];
    y[2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[13] = vals[0];
    y[0] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3];
    y[1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4];
    y[2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[14] = vals[0];
    y[0] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[3];
    y[1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[4];
    y[2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[15] = vals[0];
    y[0] = 0.33333333333333337 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
    y[1] = 0.33333333333333337 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
    y[2] = 0.33333333333333337 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[16] = vals[0];
    y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
    y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
    y[2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[17] = vals[0];
    y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[9];
    y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[10];
    y[2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[18] = vals[0];
    y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6];
    y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7];
    y[2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[19] = vals[0];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[20] = vals[1];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[21] = vals[1];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[22] = vals[1];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[23] = vals[1];
    y[0] = -5.551115123125783e-17 * coordinate_dofs[0] + 0.6666666666666667 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
    y[1] = -5.551115123125783e-17 * coordinate_dofs[1] + 0.6666666666666667 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
    y[2] = -5.551115123125783e-17 * coordinate_dofs[2] + 0.6666666666666667 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[24] = vals[1];
    y[0] = 0.33333333333333337 * coordinate_dofs[6] + 0.6666666666666666 * coordinate_dofs[9];
    y[1] = 0.33333333333333337 * coordinate_dofs[7] + 0.6666666666666666 * coordinate_dofs[10];
    y[2] = 0.33333333333333337 * coordinate_dofs[8] + 0.6666666666666666 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[25] = vals[1];
    y[0] = -5.551115123125783e-17 * coordinate_dofs[0] + 0.6666666666666667 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[9];
    y[1] = -5.551115123125783e-17 * coordinate_dofs[1] + 0.6666666666666667 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[10];
    y[2] = -5.551115123125783e-17 * coordinate_dofs[2] + 0.6666666666666667 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[26] = vals[1];
    y[0] = 0.33333333333333337 * coordinate_dofs[3] + 0.6666666666666666 * coordinate_dofs[9];
    y[1] = 0.33333333333333337 * coordinate_dofs[4] + 0.6666666666666666 * coordinate_dofs[10];
    y[2] = 0.33333333333333337 * coordinate_dofs[5] + 0.6666666666666666 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[27] = vals[1];
    y[0] = -5.551115123125783e-17 * coordinate_dofs[0] + 0.6666666666666667 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6];
    y[1] = -5.551115123125783e-17 * coordinate_dofs[1] + 0.6666666666666667 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7];
    y[2] = -5.551115123125783e-17 * coordinate_dofs[2] + 0.6666666666666667 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[28] = vals[1];
    y[0] = 0.33333333333333337 * coordinate_dofs[3] + 0.6666666666666666 * coordinate_dofs[6];
    y[1] = 0.33333333333333337 * coordinate_dofs[4] + 0.6666666666666666 * coordinate_dofs[7];
    y[2] = 0.33333333333333337 * coordinate_dofs[5] + 0.6666666666666666 * coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[29] = vals[1];
    y[0] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[9];
    y[1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[10];
    y[2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[30] = vals[1];
    y[0] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[9];
    y[1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[10];
    y[2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[31] = vals[1];
    y[0] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[6];
    y[1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[7];
    y[2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[32] = vals[1];
    y[0] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[6];
    y[1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[7];
    y[2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[33] = vals[1];
    y[0] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3];
    y[1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4];
    y[2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[34] = vals[1];
    y[0] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[3];
    y[1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[4];
    y[2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[35] = vals[1];
    y[0] = 0.33333333333333337 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
    y[1] = 0.33333333333333337 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
    y[2] = 0.33333333333333337 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[36] = vals[1];
    y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
    y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
    y[2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[37] = vals[1];
    y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[9];
    y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[10];
    y[2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[38] = vals[1];
    y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6];
    y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7];
    y[2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[39] = vals[1];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[40] = vals[2];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[41] = vals[2];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[42] = vals[2];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[43] = vals[2];
    y[0] = -5.551115123125783e-17 * coordinate_dofs[0] + 0.6666666666666667 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
    y[1] = -5.551115123125783e-17 * coordinate_dofs[1] + 0.6666666666666667 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
    y[2] = -5.551115123125783e-17 * coordinate_dofs[2] + 0.6666666666666667 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[44] = vals[2];
    y[0] = 0.33333333333333337 * coordinate_dofs[6] + 0.6666666666666666 * coordinate_dofs[9];
    y[1] = 0.33333333333333337 * coordinate_dofs[7] + 0.6666666666666666 * coordinate_dofs[10];
    y[2] = 0.33333333333333337 * coordinate_dofs[8] + 0.6666666666666666 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[45] = vals[2];
    y[0] = -5.551115123125783e-17 * coordinate_dofs[0] + 0.6666666666666667 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[9];
    y[1] = -5.551115123125783e-17 * coordinate_dofs[1] + 0.6666666666666667 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[10];
    y[2] = -5.551115123125783e-17 * coordinate_dofs[2] + 0.6666666666666667 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[46] = vals[2];
    y[0] = 0.33333333333333337 * coordinate_dofs[3] + 0.6666666666666666 * coordinate_dofs[9];
    y[1] = 0.33333333333333337 * coordinate_dofs[4] + 0.6666666666666666 * coordinate_dofs[10];
    y[2] = 0.33333333333333337 * coordinate_dofs[5] + 0.6666666666666666 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[47] = vals[2];
    y[0] = -5.551115123125783e-17 * coordinate_dofs[0] + 0.6666666666666667 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6];
    y[1] = -5.551115123125783e-17 * coordinate_dofs[1] + 0.6666666666666667 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7];
    y[2] = -5.551115123125783e-17 * coordinate_dofs[2] + 0.6666666666666667 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[48] = vals[2];
    y[0] = 0.33333333333333337 * coordinate_dofs[3] + 0.6666666666666666 * coordinate_dofs[6];
    y[1] = 0.33333333333333337 * coordinate_dofs[4] + 0.6666666666666666 * coordinate_dofs[7];
    y[2] = 0.33333333333333337 * coordinate_dofs[5] + 0.6666666666666666 * coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[49] = vals[2];
    y[0] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[9];
    y[1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[10];
    y[2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[50] = vals[2];
    y[0] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[9];
    y[1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[10];
    y[2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[51] = vals[2];
    y[0] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[6];
    y[1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[7];
    y[2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[52] = vals[2];
    y[0] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[6];
    y[1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[7];
    y[2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[53] = vals[2];
    y[0] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3];
    y[1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4];
    y[2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[54] = vals[2];
    y[0] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[3];
    y[1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[4];
    y[2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[55] = vals[2];
    y[0] = 0.33333333333333337 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
    y[1] = 0.33333333333333337 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
    y[2] = 0.33333333333333337 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[56] = vals[2];
    y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
    y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
    y[2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[57] = vals[2];
    y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[9];
    y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[10];
    y[2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[58] = vals[2];
    y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6];
    y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7];
    y[2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[59] = vals[2];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[3] = dof_values[1];
    vertex_values[6] = dof_values[2];
    vertex_values[9] = dof_values[3];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[20];
    vertex_values[4] = dof_values[21];
    vertex_values[7] = dof_values[22];
    vertex_values[10] = dof_values[23];
    // Evaluate function and change variables
    vertex_values[2] = dof_values[40];
    vertex_values[5] = dof_values[41];
    vertex_values[8] = dof_values[42];
    vertex_values[11] = dof_values[43];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[3] = coordinate_dofs[3];
    dof_coordinates[3 + 1] = coordinate_dofs[4];
    dof_coordinates[3 + 2] = coordinate_dofs[5];
    dof_coordinates[3 * 2] = coordinate_dofs[6];
    dof_coordinates[3 * 2 + 1] = coordinate_dofs[7];
    dof_coordinates[3 * 2 + 2] = coordinate_dofs[8];
    dof_coordinates[3 * 3] = coordinate_dofs[9];
    dof_coordinates[3 * 3 + 1] = coordinate_dofs[10];
    dof_coordinates[3 * 3 + 2] = coordinate_dofs[11];
    dof_coordinates[3 * 4] = 0.6666666666666667 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
    dof_coordinates[3 * 4 + 1] = 0.6666666666666667 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
    dof_coordinates[3 * 4 + 2] = 0.6666666666666667 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
    dof_coordinates[3 * 5] = 0.33333333333333337 * coordinate_dofs[6] + 0.6666666666666666 * coordinate_dofs[9];
    dof_coordinates[3 * 5 + 1] = 0.33333333333333337 * coordinate_dofs[7] + 0.6666666666666666 * coordinate_dofs[10];
    dof_coordinates[3 * 5 + 2] = 0.33333333333333337 * coordinate_dofs[8] + 0.6666666666666666 * coordinate_dofs[11];
    dof_coordinates[3 * 6] = 0.6666666666666667 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[9];
    dof_coordinates[3 * 6 + 1] = 0.6666666666666667 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[10];
    dof_coordinates[3 * 6 + 2] = 0.6666666666666667 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[11];
    dof_coordinates[3 * 7] = 0.33333333333333337 * coordinate_dofs[3] + 0.6666666666666666 * coordinate_dofs[9];
    dof_coordinates[3 * 7 + 1] = 0.33333333333333337 * coordinate_dofs[4] + 0.6666666666666666 * coordinate_dofs[10];
    dof_coordinates[3 * 7 + 2] = 0.33333333333333337 * coordinate_dofs[5] + 0.6666666666666666 * coordinate_dofs[11];
    dof_coordinates[3 * 8] = 0.6666666666666667 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6];
    dof_coordinates[3 * 8 + 1] = 0.6666666666666667 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7];
    dof_coordinates[3 * 8 + 2] = 0.6666666666666667 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8];
    dof_coordinates[3 * 9] = 0.33333333333333337 * coordinate_dofs[3] + 0.6666666666666666 * coordinate_dofs[6];
    dof_coordinates[3 * 9 + 1] = 0.33333333333333337 * coordinate_dofs[4] + 0.6666666666666666 * coordinate_dofs[7];
    dof_coordinates[3 * 9 + 2] = 0.33333333333333337 * coordinate_dofs[5] + 0.6666666666666666 * coordinate_dofs[8];
    dof_coordinates[3 * 10] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[9];
    dof_coordinates[3 * 10 + 1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[10];
    dof_coordinates[3 * 10 + 2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[11];
    dof_coordinates[3 * 11] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[9];
    dof_coordinates[3 * 11 + 1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[10];
    dof_coordinates[3 * 11 + 2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[11];
    dof_coordinates[3 * 12] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[6];
    dof_coordinates[3 * 12 + 1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[7];
    dof_coordinates[3 * 12 + 2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[8];
    dof_coordinates[3 * 13] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[6];
    dof_coordinates[3 * 13 + 1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[7];
    dof_coordinates[3 * 13 + 2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[8];
    dof_coordinates[3 * 14] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3];
    dof_coordinates[3 * 14 + 1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4];
    dof_coordinates[3 * 14 + 2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5];
    dof_coordinates[3 * 15] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[3];
    dof_coordinates[3 * 15 + 1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[4];
    dof_coordinates[3 * 15 + 2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[5];
    dof_coordinates[3 * 16] = 0.33333333333333337 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
    dof_coordinates[3 * 16 + 1] = 0.33333333333333337 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
    dof_coordinates[3 * 16 + 2] = 0.33333333333333337 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
    dof_coordinates[3 * 17] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
    dof_coordinates[3 * 17 + 1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
    dof_coordinates[3 * 17 + 2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
    dof_coordinates[3 * 18] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[9];
    dof_coordinates[3 * 18 + 1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[10];
    dof_coordinates[3 * 18 + 2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[11];
    dof_coordinates[3 * 19] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6];
    dof_coordinates[3 * 19 + 1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7];
    dof_coordinates[3 * 19 + 2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8];
    dof_coordinates[3 * 20] = coordinate_dofs[0];
    dof_coordinates[3 * 20 + 1] = coordinate_dofs[1];
    dof_coordinates[3 * 20 + 2] = coordinate_dofs[2];
    dof_coordinates[3 * 21] = coordinate_dofs[3];
    dof_coordinates[3 * 21 + 1] = coordinate_dofs[4];
    dof_coordinates[3 * 21 + 2] = coordinate_dofs[5];
    dof_coordinates[3 * 22] = coordinate_dofs[6];
    dof_coordinates[3 * 22 + 1] = coordinate_dofs[7];
    dof_coordinates[3 * 22 + 2] = coordinate_dofs[8];
    dof_coordinates[3 * 23] = coordinate_dofs[9];
    dof_coordinates[3 * 23 + 1] = coordinate_dofs[10];
    dof_coordinates[3 * 23 + 2] = coordinate_dofs[11];
    dof_coordinates[3 * 24] = 0.6666666666666667 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
    dof_coordinates[3 * 24 + 1] = 0.6666666666666667 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
    dof_coordinates[3 * 24 + 2] = 0.6666666666666667 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
    dof_coordinates[3 * 25] = 0.33333333333333337 * coordinate_dofs[6] + 0.6666666666666666 * coordinate_dofs[9];
    dof_coordinates[3 * 25 + 1] = 0.33333333333333337 * coordinate_dofs[7] + 0.6666666666666666 * coordinate_dofs[10];
    dof_coordinates[3 * 25 + 2] = 0.33333333333333337 * coordinate_dofs[8] + 0.6666666666666666 * coordinate_dofs[11];
    dof_coordinates[3 * 26] = 0.6666666666666667 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[9];
    dof_coordinates[3 * 26 + 1] = 0.6666666666666667 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[10];
    dof_coordinates[3 * 26 + 2] = 0.6666666666666667 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[11];
    dof_coordinates[3 * 27] = 0.33333333333333337 * coordinate_dofs[3] + 0.6666666666666666 * coordinate_dofs[9];
    dof_coordinates[3 * 27 + 1] = 0.33333333333333337 * coordinate_dofs[4] + 0.6666666666666666 * coordinate_dofs[10];
    dof_coordinates[3 * 27 + 2] = 0.33333333333333337 * coordinate_dofs[5] + 0.6666666666666666 * coordinate_dofs[11];
    dof_coordinates[3 * 28] = 0.6666666666666667 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6];
    dof_coordinates[3 * 28 + 1] = 0.6666666666666667 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7];
    dof_coordinates[3 * 28 + 2] = 0.6666666666666667 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8];
    dof_coordinates[3 * 29] = 0.33333333333333337 * coordinate_dofs[3] + 0.6666666666666666 * coordinate_dofs[6];
    dof_coordinates[3 * 29 + 1] = 0.33333333333333337 * coordinate_dofs[4] + 0.6666666666666666 * coordinate_dofs[7];
    dof_coordinates[3 * 29 + 2] = 0.33333333333333337 * coordinate_dofs[5] + 0.6666666666666666 * coordinate_dofs[8];
    dof_coordinates[3 * 30] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[9];
    dof_coordinates[3 * 30 + 1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[10];
    dof_coordinates[3 * 30 + 2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[11];
    dof_coordinates[3 * 31] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[9];
    dof_coordinates[3 * 31 + 1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[10];
    dof_coordinates[3 * 31 + 2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[11];
    dof_coordinates[3 * 32] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[6];
    dof_coordinates[3 * 32 + 1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[7];
    dof_coordinates[3 * 32 + 2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[8];
    dof_coordinates[3 * 33] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[6];
    dof_coordinates[3 * 33 + 1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[7];
    dof_coordinates[3 * 33 + 2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[8];
    dof_coordinates[3 * 34] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3];
    dof_coordinates[3 * 34 + 1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4];
    dof_coordinates[3 * 34 + 2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5];
    dof_coordinates[3 * 35] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[3];
    dof_coordinates[3 * 35 + 1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[4];
    dof_coordinates[3 * 35 + 2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[5];
    dof_coordinates[3 * 36] = 0.33333333333333337 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
    dof_coordinates[3 * 36 + 1] = 0.33333333333333337 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
    dof_coordinates[3 * 36 + 2] = 0.33333333333333337 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
    dof_coordinates[3 * 37] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
    dof_coordinates[3 * 37 + 1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
    dof_coordinates[3 * 37 + 2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
    dof_coordinates[3 * 38] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[9];
    dof_coordinates[3 * 38 + 1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[10];
    dof_coordinates[3 * 38 + 2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[11];
    dof_coordinates[3 * 39] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6];
    dof_coordinates[3 * 39 + 1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7];
    dof_coordinates[3 * 39 + 2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8];
    dof_coordinates[3 * 40] = coordinate_dofs[0];
    dof_coordinates[3 * 40 + 1] = coordinate_dofs[1];
    dof_coordinates[3 * 40 + 2] = coordinate_dofs[2];
    dof_coordinates[3 * 41] = coordinate_dofs[3];
    dof_coordinates[3 * 41 + 1] = coordinate_dofs[4];
    dof_coordinates[3 * 41 + 2] = coordinate_dofs[5];
    dof_coordinates[3 * 42] = coordinate_dofs[6];
    dof_coordinates[3 * 42 + 1] = coordinate_dofs[7];
    dof_coordinates[3 * 42 + 2] = coordinate_dofs[8];
    dof_coordinates[3 * 43] = coordinate_dofs[9];
    dof_coordinates[3 * 43 + 1] = coordinate_dofs[10];
    dof_coordinates[3 * 43 + 2] = coordinate_dofs[11];
    dof_coordinates[3 * 44] = 0.6666666666666667 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
    dof_coordinates[3 * 44 + 1] = 0.6666666666666667 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
    dof_coordinates[3 * 44 + 2] = 0.6666666666666667 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
    dof_coordinates[3 * 45] = 0.33333333333333337 * coordinate_dofs[6] + 0.6666666666666666 * coordinate_dofs[9];
    dof_coordinates[3 * 45 + 1] = 0.33333333333333337 * coordinate_dofs[7] + 0.6666666666666666 * coordinate_dofs[10];
    dof_coordinates[3 * 45 + 2] = 0.33333333333333337 * coordinate_dofs[8] + 0.6666666666666666 * coordinate_dofs[11];
    dof_coordinates[3 * 46] = 0.6666666666666667 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[9];
    dof_coordinates[3 * 46 + 1] = 0.6666666666666667 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[10];
    dof_coordinates[3 * 46 + 2] = 0.6666666666666667 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[11];
    dof_coordinates[3 * 47] = 0.33333333333333337 * coordinate_dofs[3] + 0.6666666666666666 * coordinate_dofs[9];
    dof_coordinates[3 * 47 + 1] = 0.33333333333333337 * coordinate_dofs[4] + 0.6666666666666666 * coordinate_dofs[10];
    dof_coordinates[3 * 47 + 2] = 0.33333333333333337 * coordinate_dofs[5] + 0.6666666666666666 * coordinate_dofs[11];
    dof_coordinates[3 * 48] = 0.6666666666666667 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6];
    dof_coordinates[3 * 48 + 1] = 0.6666666666666667 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7];
    dof_coordinates[3 * 48 + 2] = 0.6666666666666667 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8];
    dof_coordinates[3 * 49] = 0.33333333333333337 * coordinate_dofs[3] + 0.6666666666666666 * coordinate_dofs[6];
    dof_coordinates[3 * 49 + 1] = 0.33333333333333337 * coordinate_dofs[4] + 0.6666666666666666 * coordinate_dofs[7];
    dof_coordinates[3 * 49 + 2] = 0.33333333333333337 * coordinate_dofs[5] + 0.6666666666666666 * coordinate_dofs[8];
    dof_coordinates[3 * 50] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[9];
    dof_coordinates[3 * 50 + 1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[10];
    dof_coordinates[3 * 50 + 2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[11];
    dof_coordinates[3 * 51] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[9];
    dof_coordinates[3 * 51 + 1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[10];
    dof_coordinates[3 * 51 + 2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[11];
    dof_coordinates[3 * 52] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[6];
    dof_coordinates[3 * 52 + 1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[7];
    dof_coordinates[3 * 52 + 2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[8];
    dof_coordinates[3 * 53] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[6];
    dof_coordinates[3 * 53 + 1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[7];
    dof_coordinates[3 * 53 + 2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[8];
    dof_coordinates[3 * 54] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3];
    dof_coordinates[3 * 54 + 1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4];
    dof_coordinates[3 * 54 + 2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5];
    dof_coordinates[3 * 55] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[3];
    dof_coordinates[3 * 55 + 1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[4];
    dof_coordinates[3 * 55 + 2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[5];
    dof_coordinates[3 * 56] = 0.33333333333333337 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
    dof_coordinates[3 * 56 + 1] = 0.33333333333333337 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
    dof_coordinates[3 * 56 + 2] = 0.33333333333333337 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
    dof_coordinates[3 * 57] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
    dof_coordinates[3 * 57 + 1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
    dof_coordinates[3 * 57 + 2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
    dof_coordinates[3 * 58] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[9];
    dof_coordinates[3 * 58 + 1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[10];
    dof_coordinates[3 * 58 + 2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[11];
    dof_coordinates[3 * 59] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6];
    dof_coordinates[3 * 59 + 1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7];
    dof_coordinates[3 * 59 + 2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8];
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    static const double dof_X[180] = { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.6666666666666667, 0.3333333333333333, 0.0, 0.33333333333333337, 0.6666666666666666, 0.6666666666666667, 0.0, 0.3333333333333333, 0.33333333333333337, 0.0, 0.6666666666666666, 0.6666666666666667, 0.3333333333333333, 0.0, 0.33333333333333337, 0.6666666666666666, 0.0, 0.0, 0.0, 0.3333333333333333, 0.0, 0.0, 0.6666666666666666, 0.0, 0.3333333333333333, 0.0, 0.0, 0.6666666666666666, 0.0, 0.3333333333333333, 0.0, 0.0, 0.6666666666666666, 0.0, 0.0, 0.33333333333333337, 0.3333333333333333, 0.3333333333333333, 0.0, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.0, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.6666666666666667, 0.3333333333333333, 0.0, 0.33333333333333337, 0.6666666666666666, 0.6666666666666667, 0.0, 0.3333333333333333, 0.33333333333333337, 0.0, 0.6666666666666666, 0.6666666666666667, 0.3333333333333333, 0.0, 0.33333333333333337, 0.6666666666666666, 0.0, 0.0, 0.0, 0.3333333333333333, 0.0, 0.0, 0.6666666666666666, 0.0, 0.3333333333333333, 0.0, 0.0, 0.6666666666666666, 0.0, 0.3333333333333333, 0.0, 0.0, 0.6666666666666666, 0.0, 0.0, 0.33333333333333337, 0.3333333333333333, 0.3333333333333333, 0.0, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.0, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.6666666666666667, 0.3333333333333333, 0.0, 0.33333333333333337, 0.6666666666666666, 0.6666666666666667, 0.0, 0.3333333333333333, 0.33333333333333337, 0.0, 0.6666666666666666, 0.6666666666666667, 0.3333333333333333, 0.0, 0.33333333333333337, 0.6666666666666666, 0.0, 0.0, 0.0, 0.3333333333333333, 0.0, 0.0, 0.6666666666666666, 0.0, 0.3333333333333333, 0.0, 0.0, 0.6666666666666666, 0.0, 0.3333333333333333, 0.0, 0.0, 0.6666666666666666, 0.0, 0.0, 0.33333333333333337, 0.3333333333333333, 0.3333333333333333, 0.0, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.0, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.0 };
    std::copy_n(dof_X, 180, reference_dof_coordinates);
  }

  std::size_t num_sub_elements() const final override
  {
    return 3;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new vp3_3_finite_element_0();
    case 1:
        return new vp3_3_finite_element_0();
    case 2:
        return new vp3_3_finite_element_0();
    default:
        return nullptr;
    }
  }

  ufc::finite_element * create() const final override
  {
    return new vp3_3_finite_element_1();
  }

};


class vp3_3_dofmap_0: public ufc::dofmap
{
public:

  vp3_3_dofmap_0() : ufc::dofmap()
  {
    // Do nothing
  }

  ~vp3_3_dofmap_0() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for FiniteElement('Lagrange', tetrahedron, 3)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[4] = { true, true, true, false };
    if (d >= 4)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return num_global_entities[0] + 2 * num_global_entities[1] + num_global_entities[2];
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 20;
  }

  std::size_t num_element_dofs() const final override
  {
    return 20;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 10;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[4] = { 1, 2, 1, 0 };
    if (d >= 4)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[4] = { 1, 4, 10, 20 };
    if (d >= 4)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    std::size_t offset = 0;
    dofs[0] = offset + entity_indices[0][0];
    dofs[1] = offset + entity_indices[0][1];
    dofs[2] = offset + entity_indices[0][2];
    dofs[3] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
    dofs[4] = offset + 2 * entity_indices[1][0];
    dofs[5] = offset + 2 * entity_indices[1][0] + 1;
    dofs[6] = offset + 2 * entity_indices[1][1];
    dofs[7] = offset + 2 * entity_indices[1][1] + 1;
    dofs[8] = offset + 2 * entity_indices[1][2];
    dofs[9] = offset + 2 * entity_indices[1][2] + 1;
    dofs[10] = offset + 2 * entity_indices[1][3];
    dofs[11] = offset + 2 * entity_indices[1][3] + 1;
    dofs[12] = offset + 2 * entity_indices[1][4];
    dofs[13] = offset + 2 * entity_indices[1][4] + 1;
    dofs[14] = offset + 2 * entity_indices[1][5];
    dofs[15] = offset + 2 * entity_indices[1][5] + 1;
    offset += 2 * num_global_entities[1];
    dofs[16] = offset + entity_indices[2][0];
    dofs[17] = offset + entity_indices[2][1];
    dofs[18] = offset + entity_indices[2][2];
    dofs[19] = offset + entity_indices[2][3];
    offset += num_global_entities[2];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
        dofs[0] = 1;
        dofs[1] = 2;
        dofs[2] = 3;
        dofs[3] = 4;
        dofs[4] = 5;
        dofs[5] = 6;
        dofs[6] = 7;
        dofs[7] = 8;
        dofs[8] = 9;
        dofs[9] = 16;
        break;
    case 1:
        dofs[0] = 0;
        dofs[1] = 2;
        dofs[2] = 3;
        dofs[3] = 4;
        dofs[4] = 5;
        dofs[5] = 10;
        dofs[6] = 11;
        dofs[7] = 12;
        dofs[8] = 13;
        dofs[9] = 17;
        break;
    case 2:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 3;
        dofs[3] = 6;
        dofs[4] = 7;
        dofs[5] = 10;
        dofs[6] = 11;
        dofs[7] = 14;
        dofs[8] = 15;
        dofs[9] = 18;
        break;
    case 3:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 2;
        dofs[3] = 8;
        dofs[4] = 9;
        dofs[5] = 12;
        dofs[6] = 13;
        dofs[7] = 14;
        dofs[8] = 15;
        dofs[9] = 19;
        break;
    }
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        case 1:
            dofs[0] = 1;
            break;
        case 2:
            dofs[0] = 2;
            break;
        case 3:
            dofs[0] = 3;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 4;
            dofs[1] = 5;
            break;
        case 1:
            dofs[0] = 6;
            dofs[1] = 7;
            break;
        case 2:
            dofs[0] = 8;
            dofs[1] = 9;
            break;
        case 3:
            dofs[0] = 10;
            dofs[1] = 11;
            break;
        case 4:
            dofs[0] = 12;
            dofs[1] = 13;
            break;
        case 5:
            dofs[0] = 14;
            dofs[1] = 15;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 16;
            break;
        case 1:
            dofs[0] = 17;
            break;
        case 2:
            dofs[0] = 18;
            break;
        case 3:
            dofs[0] = 19;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        case 1:
            dofs[0] = 1;
            break;
        case 2:
            dofs[0] = 2;
            break;
        case 3:
            dofs[0] = 3;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 2;
            dofs[1] = 3;
            dofs[2] = 4;
            dofs[3] = 5;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 3;
            dofs[2] = 6;
            dofs[3] = 7;
            break;
        case 2:
            dofs[0] = 1;
            dofs[1] = 2;
            dofs[2] = 8;
            dofs[3] = 9;
            break;
        case 3:
            dofs[0] = 0;
            dofs[1] = 3;
            dofs[2] = 10;
            dofs[3] = 11;
            break;
        case 4:
            dofs[0] = 0;
            dofs[1] = 2;
            dofs[2] = 12;
            dofs[3] = 13;
            break;
        case 5:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 14;
            dofs[3] = 15;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 1;
            dofs[1] = 2;
            dofs[2] = 3;
            dofs[3] = 4;
            dofs[4] = 5;
            dofs[5] = 6;
            dofs[6] = 7;
            dofs[7] = 8;
            dofs[8] = 9;
            dofs[9] = 16;
            break;
        case 1:
            dofs[0] = 0;
            dofs[1] = 2;
            dofs[2] = 3;
            dofs[3] = 4;
            dofs[4] = 5;
            dofs[5] = 10;
            dofs[6] = 11;
            dofs[7] = 12;
            dofs[8] = 13;
            dofs[9] = 17;
            break;
        case 2:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 3;
            dofs[3] = 6;
            dofs[4] = 7;
            dofs[5] = 10;
            dofs[6] = 11;
            dofs[7] = 14;
            dofs[8] = 15;
            dofs[9] = 18;
            break;
        case 3:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 8;
            dofs[4] = 9;
            dofs[5] = 12;
            dofs[6] = 13;
            dofs[7] = 14;
            dofs[8] = 15;
            dofs[9] = 19;
            break;
        }
        break;
    case 3:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            dofs[4] = 4;
            dofs[5] = 5;
            dofs[6] = 6;
            dofs[7] = 7;
            dofs[8] = 8;
            dofs[9] = 9;
            dofs[10] = 10;
            dofs[11] = 11;
            dofs[12] = 12;
            dofs[13] = 13;
            dofs[14] = 14;
            dofs[15] = 15;
            dofs[16] = 16;
            dofs[17] = 17;
            dofs[18] = 18;
            dofs[19] = 19;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 0;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::dofmap * create() const final override
  {
    return new vp3_3_dofmap_0();
  }

};


class vp3_3_dofmap_1: public ufc::dofmap
{
public:

  vp3_3_dofmap_1() : ufc::dofmap()
  {
    // Do nothing
  }

  ~vp3_3_dofmap_1() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for VectorElement(FiniteElement('Lagrange', tetrahedron, 3), dim=3)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[4] = { true, true, true, false };
    if (d >= 4)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return 3 * num_global_entities[0] + 6 * num_global_entities[1] + 3 * num_global_entities[2];
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 60;
  }

  std::size_t num_element_dofs() const final override
  {
    return 60;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 30;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[4] = { 3, 6, 3, 0 };
    if (d >= 4)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[4] = { 3, 12, 30, 60 };
    if (d >= 4)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    std::size_t offset = 0;
    dofs[0] = offset + entity_indices[0][0];
    dofs[1] = offset + entity_indices[0][1];
    dofs[2] = offset + entity_indices[0][2];
    dofs[3] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
    dofs[4] = offset + 2 * entity_indices[1][0];
    dofs[5] = offset + 2 * entity_indices[1][0] + 1;
    dofs[6] = offset + 2 * entity_indices[1][1];
    dofs[7] = offset + 2 * entity_indices[1][1] + 1;
    dofs[8] = offset + 2 * entity_indices[1][2];
    dofs[9] = offset + 2 * entity_indices[1][2] + 1;
    dofs[10] = offset + 2 * entity_indices[1][3];
    dofs[11] = offset + 2 * entity_indices[1][3] + 1;
    dofs[12] = offset + 2 * entity_indices[1][4];
    dofs[13] = offset + 2 * entity_indices[1][4] + 1;
    dofs[14] = offset + 2 * entity_indices[1][5];
    dofs[15] = offset + 2 * entity_indices[1][5] + 1;
    offset += 2 * num_global_entities[1];
    dofs[16] = offset + entity_indices[2][0];
    dofs[17] = offset + entity_indices[2][1];
    dofs[18] = offset + entity_indices[2][2];
    dofs[19] = offset + entity_indices[2][3];
    offset += num_global_entities[2];
    dofs[20] = offset + entity_indices[0][0];
    dofs[21] = offset + entity_indices[0][1];
    dofs[22] = offset + entity_indices[0][2];
    dofs[23] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
    dofs[24] = offset + 2 * entity_indices[1][0];
    dofs[25] = offset + 2 * entity_indices[1][0] + 1;
    dofs[26] = offset + 2 * entity_indices[1][1];
    dofs[27] = offset + 2 * entity_indices[1][1] + 1;
    dofs[28] = offset + 2 * entity_indices[1][2];
    dofs[29] = offset + 2 * entity_indices[1][2] + 1;
    dofs[30] = offset + 2 * entity_indices[1][3];
    dofs[31] = offset + 2 * entity_indices[1][3] + 1;
    dofs[32] = offset + 2 * entity_indices[1][4];
    dofs[33] = offset + 2 * entity_indices[1][4] + 1;
    dofs[34] = offset + 2 * entity_indices[1][5];
    dofs[35] = offset + 2 * entity_indices[1][5] + 1;
    offset += 2 * num_global_entities[1];
    dofs[36] = offset + entity_indices[2][0];
    dofs[37] = offset + entity_indices[2][1];
    dofs[38] = offset + entity_indices[2][2];
    dofs[39] = offset + entity_indices[2][3];
    offset += num_global_entities[2];
    dofs[40] = offset + entity_indices[0][0];
    dofs[41] = offset + entity_indices[0][1];
    dofs[42] = offset + entity_indices[0][2];
    dofs[43] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
    dofs[44] = offset + 2 * entity_indices[1][0];
    dofs[45] = offset + 2 * entity_indices[1][0] + 1;
    dofs[46] = offset + 2 * entity_indices[1][1];
    dofs[47] = offset + 2 * entity_indices[1][1] + 1;
    dofs[48] = offset + 2 * entity_indices[1][2];
    dofs[49] = offset + 2 * entity_indices[1][2] + 1;
    dofs[50] = offset + 2 * entity_indices[1][3];
    dofs[51] = offset + 2 * entity_indices[1][3] + 1;
    dofs[52] = offset + 2 * entity_indices[1][4];
    dofs[53] = offset + 2 * entity_indices[1][4] + 1;
    dofs[54] = offset + 2 * entity_indices[1][5];
    dofs[55] = offset + 2 * entity_indices[1][5] + 1;
    offset += 2 * num_global_entities[1];
    dofs[56] = offset + entity_indices[2][0];
    dofs[57] = offset + entity_indices[2][1];
    dofs[58] = offset + entity_indices[2][2];
    dofs[59] = offset + entity_indices[2][3];
    offset += num_global_entities[2];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
        dofs[0] = 1;
        dofs[1] = 2;
        dofs[2] = 3;
        dofs[3] = 4;
        dofs[4] = 5;
        dofs[5] = 6;
        dofs[6] = 7;
        dofs[7] = 8;
        dofs[8] = 9;
        dofs[9] = 16;
        dofs[10] = 21;
        dofs[11] = 22;
        dofs[12] = 23;
        dofs[13] = 24;
        dofs[14] = 25;
        dofs[15] = 26;
        dofs[16] = 27;
        dofs[17] = 28;
        dofs[18] = 29;
        dofs[19] = 36;
        dofs[20] = 41;
        dofs[21] = 42;
        dofs[22] = 43;
        dofs[23] = 44;
        dofs[24] = 45;
        dofs[25] = 46;
        dofs[26] = 47;
        dofs[27] = 48;
        dofs[28] = 49;
        dofs[29] = 56;
        break;
    case 1:
        dofs[0] = 0;
        dofs[1] = 2;
        dofs[2] = 3;
        dofs[3] = 4;
        dofs[4] = 5;
        dofs[5] = 10;
        dofs[6] = 11;
        dofs[7] = 12;
        dofs[8] = 13;
        dofs[9] = 17;
        dofs[10] = 20;
        dofs[11] = 22;
        dofs[12] = 23;
        dofs[13] = 24;
        dofs[14] = 25;
        dofs[15] = 30;
        dofs[16] = 31;
        dofs[17] = 32;
        dofs[18] = 33;
        dofs[19] = 37;
        dofs[20] = 40;
        dofs[21] = 42;
        dofs[22] = 43;
        dofs[23] = 44;
        dofs[24] = 45;
        dofs[25] = 50;
        dofs[26] = 51;
        dofs[27] = 52;
        dofs[28] = 53;
        dofs[29] = 57;
        break;
    case 2:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 3;
        dofs[3] = 6;
        dofs[4] = 7;
        dofs[5] = 10;
        dofs[6] = 11;
        dofs[7] = 14;
        dofs[8] = 15;
        dofs[9] = 18;
        dofs[10] = 20;
        dofs[11] = 21;
        dofs[12] = 23;
        dofs[13] = 26;
        dofs[14] = 27;
        dofs[15] = 30;
        dofs[16] = 31;
        dofs[17] = 34;
        dofs[18] = 35;
        dofs[19] = 38;
        dofs[20] = 40;
        dofs[21] = 41;
        dofs[22] = 43;
        dofs[23] = 46;
        dofs[24] = 47;
        dofs[25] = 50;
        dofs[26] = 51;
        dofs[27] = 54;
        dofs[28] = 55;
        dofs[29] = 58;
        break;
    case 3:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 2;
        dofs[3] = 8;
        dofs[4] = 9;
        dofs[5] = 12;
        dofs[6] = 13;
        dofs[7] = 14;
        dofs[8] = 15;
        dofs[9] = 19;
        dofs[10] = 20;
        dofs[11] = 21;
        dofs[12] = 22;
        dofs[13] = 28;
        dofs[14] = 29;
        dofs[15] = 32;
        dofs[16] = 33;
        dofs[17] = 34;
        dofs[18] = 35;
        dofs[19] = 39;
        dofs[20] = 40;
        dofs[21] = 41;
        dofs[22] = 42;
        dofs[23] = 48;
        dofs[24] = 49;
        dofs[25] = 52;
        dofs[26] = 53;
        dofs[27] = 54;
        dofs[28] = 55;
        dofs[29] = 59;
        break;
    }
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 20;
            dofs[2] = 40;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 21;
            dofs[2] = 41;
            break;
        case 2:
            dofs[0] = 2;
            dofs[1] = 22;
            dofs[2] = 42;
            break;
        case 3:
            dofs[0] = 3;
            dofs[1] = 23;
            dofs[2] = 43;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 4;
            dofs[1] = 5;
            dofs[2] = 24;
            dofs[3] = 25;
            dofs[4] = 44;
            dofs[5] = 45;
            break;
        case 1:
            dofs[0] = 6;
            dofs[1] = 7;
            dofs[2] = 26;
            dofs[3] = 27;
            dofs[4] = 46;
            dofs[5] = 47;
            break;
        case 2:
            dofs[0] = 8;
            dofs[1] = 9;
            dofs[2] = 28;
            dofs[3] = 29;
            dofs[4] = 48;
            dofs[5] = 49;
            break;
        case 3:
            dofs[0] = 10;
            dofs[1] = 11;
            dofs[2] = 30;
            dofs[3] = 31;
            dofs[4] = 50;
            dofs[5] = 51;
            break;
        case 4:
            dofs[0] = 12;
            dofs[1] = 13;
            dofs[2] = 32;
            dofs[3] = 33;
            dofs[4] = 52;
            dofs[5] = 53;
            break;
        case 5:
            dofs[0] = 14;
            dofs[1] = 15;
            dofs[2] = 34;
            dofs[3] = 35;
            dofs[4] = 54;
            dofs[5] = 55;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 16;
            dofs[1] = 36;
            dofs[2] = 56;
            break;
        case 1:
            dofs[0] = 17;
            dofs[1] = 37;
            dofs[2] = 57;
            break;
        case 2:
            dofs[0] = 18;
            dofs[1] = 38;
            dofs[2] = 58;
            break;
        case 3:
            dofs[0] = 19;
            dofs[1] = 39;
            dofs[2] = 59;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 20;
            dofs[2] = 40;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 21;
            dofs[2] = 41;
            break;
        case 2:
            dofs[0] = 2;
            dofs[1] = 22;
            dofs[2] = 42;
            break;
        case 3:
            dofs[0] = 3;
            dofs[1] = 23;
            dofs[2] = 43;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 2;
            dofs[1] = 3;
            dofs[2] = 4;
            dofs[3] = 5;
            dofs[4] = 22;
            dofs[5] = 23;
            dofs[6] = 24;
            dofs[7] = 25;
            dofs[8] = 42;
            dofs[9] = 43;
            dofs[10] = 44;
            dofs[11] = 45;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 3;
            dofs[2] = 6;
            dofs[3] = 7;
            dofs[4] = 21;
            dofs[5] = 23;
            dofs[6] = 26;
            dofs[7] = 27;
            dofs[8] = 41;
            dofs[9] = 43;
            dofs[10] = 46;
            dofs[11] = 47;
            break;
        case 2:
            dofs[0] = 1;
            dofs[1] = 2;
            dofs[2] = 8;
            dofs[3] = 9;
            dofs[4] = 21;
            dofs[5] = 22;
            dofs[6] = 28;
            dofs[7] = 29;
            dofs[8] = 41;
            dofs[9] = 42;
            dofs[10] = 48;
            dofs[11] = 49;
            break;
        case 3:
            dofs[0] = 0;
            dofs[1] = 3;
            dofs[2] = 10;
            dofs[3] = 11;
            dofs[4] = 20;
            dofs[5] = 23;
            dofs[6] = 30;
            dofs[7] = 31;
            dofs[8] = 40;
            dofs[9] = 43;
            dofs[10] = 50;
            dofs[11] = 51;
            break;
        case 4:
            dofs[0] = 0;
            dofs[1] = 2;
            dofs[2] = 12;
            dofs[3] = 13;
            dofs[4] = 20;
            dofs[5] = 22;
            dofs[6] = 32;
            dofs[7] = 33;
            dofs[8] = 40;
            dofs[9] = 42;
            dofs[10] = 52;
            dofs[11] = 53;
            break;
        case 5:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 14;
            dofs[3] = 15;
            dofs[4] = 20;
            dofs[5] = 21;
            dofs[6] = 34;
            dofs[7] = 35;
            dofs[8] = 40;
            dofs[9] = 41;
            dofs[10] = 54;
            dofs[11] = 55;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 1;
            dofs[1] = 2;
            dofs[2] = 3;
            dofs[3] = 4;
            dofs[4] = 5;
            dofs[5] = 6;
            dofs[6] = 7;
            dofs[7] = 8;
            dofs[8] = 9;
            dofs[9] = 16;
            dofs[10] = 21;
            dofs[11] = 22;
            dofs[12] = 23;
            dofs[13] = 24;
            dofs[14] = 25;
            dofs[15] = 26;
            dofs[16] = 27;
            dofs[17] = 28;
            dofs[18] = 29;
            dofs[19] = 36;
            dofs[20] = 41;
            dofs[21] = 42;
            dofs[22] = 43;
            dofs[23] = 44;
            dofs[24] = 45;
            dofs[25] = 46;
            dofs[26] = 47;
            dofs[27] = 48;
            dofs[28] = 49;
            dofs[29] = 56;
            break;
        case 1:
            dofs[0] = 0;
            dofs[1] = 2;
            dofs[2] = 3;
            dofs[3] = 4;
            dofs[4] = 5;
            dofs[5] = 10;
            dofs[6] = 11;
            dofs[7] = 12;
            dofs[8] = 13;
            dofs[9] = 17;
            dofs[10] = 20;
            dofs[11] = 22;
            dofs[12] = 23;
            dofs[13] = 24;
            dofs[14] = 25;
            dofs[15] = 30;
            dofs[16] = 31;
            dofs[17] = 32;
            dofs[18] = 33;
            dofs[19] = 37;
            dofs[20] = 40;
            dofs[21] = 42;
            dofs[22] = 43;
            dofs[23] = 44;
            dofs[24] = 45;
            dofs[25] = 50;
            dofs[26] = 51;
            dofs[27] = 52;
            dofs[28] = 53;
            dofs[29] = 57;
            break;
        case 2:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 3;
            dofs[3] = 6;
            dofs[4] = 7;
            dofs[5] = 10;
            dofs[6] = 11;
            dofs[7] = 14;
            dofs[8] = 15;
            dofs[9] = 18;
            dofs[10] = 20;
            dofs[11] = 21;
            dofs[12] = 23;
            dofs[13] = 26;
            dofs[14] = 27;
            dofs[15] = 30;
            dofs[16] = 31;
            dofs[17] = 34;
            dofs[18] = 35;
            dofs[19] = 38;
            dofs[20] = 40;
            dofs[21] = 41;
            dofs[22] = 43;
            dofs[23] = 46;
            dofs[24] = 47;
            dofs[25] = 50;
            dofs[26] = 51;
            dofs[27] = 54;
            dofs[28] = 55;
            dofs[29] = 58;
            break;
        case 3:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 8;
            dofs[4] = 9;
            dofs[5] = 12;
            dofs[6] = 13;
            dofs[7] = 14;
            dofs[8] = 15;
            dofs[9] = 19;
            dofs[10] = 20;
            dofs[11] = 21;
            dofs[12] = 22;
            dofs[13] = 28;
            dofs[14] = 29;
            dofs[15] = 32;
            dofs[16] = 33;
            dofs[17] = 34;
            dofs[18] = 35;
            dofs[19] = 39;
            dofs[20] = 40;
            dofs[21] = 41;
            dofs[22] = 42;
            dofs[23] = 48;
            dofs[24] = 49;
            dofs[25] = 52;
            dofs[26] = 53;
            dofs[27] = 54;
            dofs[28] = 55;
            dofs[29] = 59;
            break;
        }
        break;
    case 3:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            dofs[4] = 4;
            dofs[5] = 5;
            dofs[6] = 6;
            dofs[7] = 7;
            dofs[8] = 8;
            dofs[9] = 9;
            dofs[10] = 10;
            dofs[11] = 11;
            dofs[12] = 12;
            dofs[13] = 13;
            dofs[14] = 14;
            dofs[15] = 15;
            dofs[16] = 16;
            dofs[17] = 17;
            dofs[18] = 18;
            dofs[19] = 19;
            dofs[20] = 20;
            dofs[21] = 21;
            dofs[22] = 22;
            dofs[23] = 23;
            dofs[24] = 24;
            dofs[25] = 25;
            dofs[26] = 26;
            dofs[27] = 27;
            dofs[28] = 28;
            dofs[29] = 29;
            dofs[30] = 30;
            dofs[31] = 31;
            dofs[32] = 32;
            dofs[33] = 33;
            dofs[34] = 34;
            dofs[35] = 35;
            dofs[36] = 36;
            dofs[37] = 37;
            dofs[38] = 38;
            dofs[39] = 39;
            dofs[40] = 40;
            dofs[41] = 41;
            dofs[42] = 42;
            dofs[43] = 43;
            dofs[44] = 44;
            dofs[45] = 45;
            dofs[46] = 46;
            dofs[47] = 47;
            dofs[48] = 48;
            dofs[49] = 49;
            dofs[50] = 50;
            dofs[51] = 51;
            dofs[52] = 52;
            dofs[53] = 53;
            dofs[54] = 54;
            dofs[55] = 55;
            dofs[56] = 56;
            dofs[57] = 57;
            dofs[58] = 58;
            dofs[59] = 59;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 3;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new vp3_3_dofmap_0();
    case 1:
        return new vp3_3_dofmap_0();
    case 2:
        return new vp3_3_dofmap_0();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create() const final override
  {
    return new vp3_3_dofmap_1();
  }

};

// DOLFIN wrappers

// Standard library includes
#include <string>

// DOLFIN includes
#include <dolfin/common/NoDeleter.h>
#include <dolfin/mesh/Mesh.h>
#include <dolfin/mesh/MultiMesh.h>
#include <dolfin/fem/FiniteElement.h>
#include <dolfin/fem/DofMap.h>
#include <dolfin/fem/Form.h>
#include <dolfin/fem/MultiMeshForm.h>
#include <dolfin/function/FunctionSpace.h>
#include <dolfin/function/MultiMeshFunctionSpace.h>
#include <dolfin/function/GenericFunction.h>
#include <dolfin/function/CoefficientAssigner.h>
#include <dolfin/function/MultiMeshCoefficientAssigner.h>
#include <dolfin/adaptivity/ErrorControl.h>
#include <dolfin/adaptivity/GoalFunctional.h>
#include <dolfin/la/GenericVector.h>

namespace vP3_3
{

class FunctionSpace: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  FunctionSpace(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<vp3_3_finite_element_1>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<vp3_3_dofmap_1>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  FunctionSpace(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<vp3_3_finite_element_1>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<vp3_3_dofmap_1>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

}

#endif
